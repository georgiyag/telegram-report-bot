#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –º–µ–Ω—é Telegram –±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é, –ø–æ–¥–º–µ–Ω—é, –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
"""

import asyncio
import sys
import os
from datetime import datetime, date, timedelta
from loguru import logger
from telegram import Bot
from telegram.error import TelegramError

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('src')

from database import DatabaseManager
from services.telegram_service import TelegramService
from services.ollama_service import OllamaService
from services.task_manager import TaskManager
from services.report_processor import ReportProcessor
from handlers.menu_handler import MenuHandler
from handlers.admin_handler import AdminHandler
from handlers.report_handler import ReportHandler
from handlers.user_handler import UserHandler
from handlers.admin.user_management import UserManagementHandler
from handlers.admin.department_management import DepartmentManagementHandler
from config import settings
from models.department import Department, Employee
from models.report import WeeklyReport

class ComprehensiveMenuTester:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –º–µ–Ω—é –±–æ—Ç–∞"""
    
    def __init__(self):
        self.test_results = {}
        self.failed_tests = []
        self.passed_tests = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.db_manager = DatabaseManager()
        self.bot = Bot(token=settings.telegram_bot_token)
        self.telegram_service = TelegramService(self.bot)
        self.ollama_service = OllamaService()
        self.task_manager = TaskManager()
        self.report_processor = ReportProcessor(self.ollama_service, self.telegram_service)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.user_management = UserManagementHandler(self.db_manager)
        self.department_management = DepartmentManagementHandler(self.db_manager)
        self.report_handler = ReportHandler(
            self.report_processor, self.ollama_service, 
            self.telegram_service, self.task_manager, self.db_manager
        )
        self.admin_handler = AdminHandler(
            self.report_processor, self.db_manager, self.telegram_service,
            self.user_management, self.department_management
        )
        self.menu_handler = MenuHandler(self.report_handler, self.admin_handler)
        self.user_handler = UserHandler(self.db_manager)
    
    async def test_database_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        try:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤
            departments = await self.db_manager.get_departments()
            assert len(departments) > 0, "–ù–µ—Ç –æ—Ç–¥–µ–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            employees = await self.db_manager.get_employees()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(employees)}")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞ –ø–æ –∫–æ–¥—É
            if departments:
                dept = await self.db_manager.get_department_by_code(departments[0].code)
                assert dept is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–¥–µ–ª –ø–æ –∫–æ–¥—É"
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–¥–µ–ª–∞
            if departments:
                stats = await self.db_manager.get_department_stats(
                    departments[0].code, date.today(), date.today()
                )
                assert isinstance(stats, dict), "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–¥–µ–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
            
            self.test_results["–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"] = "‚úÖ –ü–†–û–ô–î–ï–ù"
            self.passed_tests.append("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
            return True
            
        except Exception as e:
            error_msg = f"‚ùå –ù–ï –ü–†–û–ô–î–ï–ù - {str(e)}"
            self.test_results["–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"] = error_msg
            self.failed_tests.append(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
            return False
    
    async def test_telegram_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_info = await self.bot.get_me()
            assert bot_info.username is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"
            
            logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username}")
            
            self.test_results["–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram"] = "‚úÖ –ü–†–û–ô–î–ï–ù"
            self.passed_tests.append("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram")
            return True
            
        except Exception as e:
            error_msg = f"‚ùå –ù–ï –ü–†–û–ô–î–ï–ù - {str(e)}"
            self.test_results["–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram"] = error_msg
            self.failed_tests.append(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
            return False
    
    async def test_menu_handlers(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–µ–Ω—é...")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            assert self.menu_handler is not None, "MenuHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            assert self.admin_handler is not None, "AdminHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            assert self.report_handler is not None, "ReportHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            assert self.user_handler is not None, "UserHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤
            assert hasattr(self.menu_handler, 'show_main_menu'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ show_main_menu"
            assert hasattr(self.admin_handler, 'show_admin_panel'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ show_admin_panel"
            assert hasattr(self.user_management, 'show_user_list'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ show_user_list"
            assert hasattr(self.department_management, 'show_department_list'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ show_department_list"
            
            self.test_results["–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é"] = "‚úÖ –ü–†–û–ô–î–ï–ù"
            self.passed_tests.append("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é")
            return True
            
        except Exception as e:
            error_msg = f"‚ùå –ù–ï –ü–†–û–ô–î–ï–ù - {str(e)}"
            self.test_results["–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é"] = error_msg
            self.failed_tests.append(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            return False
    
    async def test_admin_functions(self):
        """–¢–µ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        try:
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            employees = await self.db_manager.get_employees()
            if employees:
                is_admin = await self.db_manager.is_admin(employees[0].user_id)
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {is_admin}")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = await self.db_manager.get_admin_employees()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(admins)}")
            
            # –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            assert hasattr(self.user_management, 'show_user_list'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
            
            # –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞–º–∏
            assert hasattr(self.department_management, 'show_department_list'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞–º–∏"
            
            self.test_results["–ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏"] = "‚úÖ –ü–†–û–ô–î–ï–ù"
            self.passed_tests.append("–ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏")
            return True
            
        except Exception as e:
            error_msg = f"‚ùå –ù–ï –ü–†–û–ô–î–ï–ù - {str(e)}"
            self.test_results["–ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏"] = error_msg
            self.failed_tests.append(f"–ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–π: {e}")
            return False
    
    async def test_report_functions(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç—á–µ—Ç–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç—á–µ—Ç–æ–≤...")
        try:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é
            today = date.today()
            week_reports = await self.db_manager.get_reports_by_week(today, today)
            logger.info(f"–û—Ç—á–µ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {len(week_reports)}")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –æ—Ç—á–µ—Ç–æ–≤
            missing_reports = await self.db_manager.get_missing_reports_users(today)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –æ—Ç—á–µ—Ç–æ–≤: {len(missing_reports)}")
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            employees = await self.db_manager.get_employees()
            if employees:
                test_report = WeeklyReport(
                    user_id=employees[0].user_id,
                    username=employees[0].username or "test_user",
                    full_name=employees[0].full_name,
                    week_start=datetime.now() - timedelta(days=7),
                    week_end=datetime.now(),
                    completed_tasks="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
                    achievements="–¢–µ—Å—Ç–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
                    problems="–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º",
                    next_week_plans="–¢–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞–Ω—ã",
                    department=employees[0].department_code,
                    position=employees[0].position or "–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω–æ)
                assert test_report.user_id is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç"
            
            self.test_results["–§—É–Ω–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"] = "‚úÖ –ü–†–û–ô–î–ï–ù"
            self.passed_tests.append("–§—É–Ω–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤")
            return True
            
        except Exception as e:
            error_msg = f"‚ùå –ù–ï –ü–†–û–ô–î–ï–ù - {str(e)}"
            self.test_results["–§—É–Ω–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"] = error_msg
            self.failed_tests.append(f"–§—É–Ω–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç—á–µ—Ç–æ–≤: {e}")
            return False
    
    async def test_navigation_system(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
            from src.utils.navigation import get_breadcrumb_path, create_keyboard
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
            breadcrumb = get_breadcrumb_path(["main", "admin", "admin_users"])
            assert isinstance(breadcrumb, str), "–•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
            logger.info(f"–•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏: {breadcrumb}")
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            keyboard = create_keyboard([
                [("–ö–Ω–æ–ø–∫–∞ 1", "btn1"), ("–ö–Ω–æ–ø–∫–∞ 2", "btn2")],
                [("–ù–∞–∑–∞–¥", "back"), ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main")]
            ])
            assert keyboard is not None, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"
            
            self.test_results["–°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"] = "‚úÖ –ü–†–û–ô–î–ï–ù"
            self.passed_tests.append("–°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
            return True
            
        except Exception as e:
            error_msg = f"‚ùå –ù–ï –ü–†–û–ô–î–ï–ù - {str(e)}"
            self.test_results["–°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"] = error_msg
            self.failed_tests.append(f"–°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
            return False
    
    async def test_services_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        try:
            # –¢–µ—Å—Ç TelegramService
            assert self.telegram_service is not None, "TelegramService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
            # –¢–µ—Å—Ç OllamaService
            assert self.ollama_service is not None, "OllamaService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
            # –¢–µ—Å—Ç TaskManager
            assert self.task_manager is not None, "TaskManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
            # –¢–µ—Å—Ç ReportProcessor
            assert self.report_processor is not None, "ReportProcessor –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —Å–µ—Ä–≤–∏—Å–æ–≤
            assert hasattr(self.telegram_service, 'send_message_safe'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ send_message_safe"
            assert hasattr(self.ollama_service, 'check_connection'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ check_connection"
            
            self.test_results["–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"] = "‚úÖ –ü–†–û–ô–î–ï–ù"
            self.passed_tests.append("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤")
            return True
            
        except Exception as e:
            error_msg = f"‚ùå –ù–ï –ü–†–û–ô–î–ï–ù - {str(e)}"
            self.test_results["–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"] = error_msg
            self.failed_tests.append(f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False
    
    async def test_configuration(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            assert hasattr(settings, 'telegram_bot_token'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_bot_token"
            assert hasattr(settings, 'group_chat_id'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç group_chat_id"
            assert settings.telegram_bot_token, "telegram_bot_token –ø—É—Å—Ç–æ–π"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Ollama
            assert hasattr(settings, 'ollama_url'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ollama_url"
            assert hasattr(settings, 'ollama_model'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ollama_model"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            assert hasattr(settings, 'admin_user_ids'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç admin_user_ids"
            
            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            
            self.test_results["–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"] = "‚úÖ –ü–†–û–ô–î–ï–ù"
            self.passed_tests.append("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
            return True
            
        except Exception as e:
            error_msg = f"‚ùå –ù–ï –ü–†–û–ô–î–ï–ù - {str(e)}"
            self.test_results["–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"] = error_msg
            self.failed_tests.append(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é –±–æ—Ç–∞...")
        logger.info("=" * 60)
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", self.test_database_operations),
            ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram", self.test_telegram_connection),
            ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é", self.test_menu_handlers),
            ("–ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏", self.test_admin_functions),
            ("–§—É–Ω–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤", self.test_report_functions),
            ("–°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", self.test_navigation_system),
            ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤", self.test_services_integration),
            ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", self.test_configuration)
        ]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
        for test_name, test_func in tests:
            logger.info(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_name}")
            try:
                await test_func()
                logger.success(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            except Exception as e:
                logger.error(f"‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù - {e}")
                if test_name not in self.test_results:
                    self.test_results[test_name] = f"‚ùå –ù–ï –ü–†–û–ô–î–ï–ù - {str(e)}"
                    self.failed_tests.append(f"{test_name}: {str(e)}")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("\n" + "=" * 60)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {len(self.passed_tests)}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(self.failed_tests)}")
        
        total_tests = len(self.passed_tests) + len(self.failed_tests)
        success_rate = (len(self.passed_tests) / total_tests * 100) if total_tests > 0 else 0
        logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for test_name, result in self.test_results.items():
            logger.info(f"   {result} {test_name}")
        
        if self.failed_tests:
            logger.warning(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(self.failed_tests)} –ø—Ä–æ–±–ª–µ–º:")
            for i, failed_test in enumerate(self.failed_tests, 1):
                logger.warning(f"   {i}. {failed_test}")
        else:
            logger.success("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        await self.save_test_report()
        
        return len(self.failed_tests) == 0
    
    async def save_test_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"comprehensive_menu_test_report_{timestamp}.txt"
        
        try:
            with open(report_filename, 'w', encoding='utf-8') as f:
                f.write(f"–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ú–ï–ù–Æ –ë–û–¢–ê\n")
                f.write(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n")
                f.write("=" * 60 + "\n\n")
                
                f.write(f"–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
                f.write(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(self.passed_tests)}\n")
                f.write(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(self.failed_tests)}\n")
                
                total_tests = len(self.passed_tests) + len(self.failed_tests)
                success_rate = (len(self.passed_tests) / total_tests * 100) if total_tests > 0 else 0
                f.write(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%\n\n")
                
                f.write("–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:\n")
                for test_name, result in self.test_results.items():
                    f.write(f"{result} {test_name}\n")
                
                if self.failed_tests:
                    f.write(f"\n–û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ({len(self.failed_tests)}):")
                    for i, failed_test in enumerate(self.failed_tests, 1):
                        f.write(f"\n{i}. {failed_test}")
                
                f.write("\n\n" + "=" * 60)
                f.write("\n–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
            
            logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ComprehensiveMenuTester()
    success = await tester.run_all_tests()
    
    if success:
        logger.success("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        logger.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)