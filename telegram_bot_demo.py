#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
"""

import asyncio
import json
import logging
import sqlite3
import time
from datetime import datetime, timedelta
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TelegramBotDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        self.db_path = Path("data/bot_database.db")
        self.db_path.parent.mkdir(exist_ok=True)
        self.init_database()
        self.scenarios_completed = []
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        telegram_id TEXT UNIQUE NOT NULL,
                        username TEXT,
                        first_name TEXT,
                        department TEXT,
                        role TEXT DEFAULT 'user',
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS reports (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        department TEXT,
                        content TEXT,
                        week_start DATE,
                        week_end DATE,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        status TEXT DEFAULT 'completed',
                        ai_analysis TEXT,
                        FOREIGN KEY (user_id) REFERENCES users (id)
                    )
                """)
                
                conn.commit()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def print_header(self, title: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print("\n" + "="*70)
        print(f"üé≠ {title}")
        print("="*70)
    
    def print_user_action(self, user: str, action: str):
        """–ü–µ—á–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"\n[{timestamp}] üë§ {user}: {action}")
        time.sleep(1)
    
    def print_bot_response(self, response: str):
        """–ü–µ—á–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] ü§ñ –ë–æ—Ç: {response}")
        time.sleep(2)
    
    def print_system_info(self, info: str):
        """–ü–µ—á–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] ‚öôÔ∏è  –°–∏—Å—Ç–µ–º–∞: {info}")
    
    async def scenario_start_command(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –ö–æ–º–∞–Ω–¥–∞ /start"""
        self.print_header("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞")
        
        self.print_user_action("–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /start")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "INSERT OR IGNORE INTO users (telegram_id, username, first_name, department, role) VALUES (?, ?, ?, ?, ?)",
                    ("123456789", "ivan_petrov", "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "IT –æ—Ç–¥–µ–ª", "user")
                )
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        
        self.print_bot_response(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –ê–û –≠–ú–ó '–§–ò–†–ú–ê –°–≠–õ–ú–ê'!\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã.\n\n"
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n"
            "üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç\n"
            "üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã\n"
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
            "‚ùì –ü–æ–º–æ—â—å"
        )
        
        self.scenarios_completed.append("–ö–æ–º–∞–Ω–¥–∞ /start")
    
    async def scenario_create_report(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
        self.print_header("–°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        
        self.print_user_action("–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "–ù–∞–∂–∏–º–∞–µ—Ç 'üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç'")
        
        self.print_bot_response(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:\n\n"
            "üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–¥–µ–ª—ã:\n"
            "‚Ä¢ –û–¢–ö\n‚Ä¢ –û–ö\n‚Ä¢ –û–ì–ö\n‚Ä¢ –û–ì–¢\n‚Ä¢ –û–ú–¢–°\n‚Ä¢ –ü–≠–û\n‚Ä¢ –†–°–£\n‚Ä¢ –≠–ú–û\n‚Ä¢ IT –æ—Ç–¥–µ–ª\n‚Ä¢ –ò–õ\n‚Ä¢ –ë–ò–ö"
        )
        
        self.print_user_action("–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "–í—ã–±–∏—Ä–∞–µ—Ç 'IT –æ—Ç–¥–µ–ª'")
        
        self.print_bot_response(
            "‚úÖ –û—Ç–¥–µ–ª –≤—ã–±—Ä–∞–Ω: IT –æ—Ç–¥–µ–ª\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞:\n"
            "üí° –û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
        )
        
        report_text = (
            "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –º–æ–¥—É–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. "
            "–ò—Å–ø—Ä–∞–≤–∏–ª–∏ 15 –±–∞–≥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏. "
            "–ù–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –Ω–æ–≤—ã–º API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏. "
            "–ü—Ä–æ–≤–µ–ª–∏ –∫–æ–¥-—Ä–µ–≤—å—é 8 pull request'–æ–≤."
        )
        
        self.print_user_action("–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", f"–í–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç: '{report_text}'")
        
        self.print_system_info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò...")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT id FROM users WHERE telegram_id = ?", ("123456789",))
                user_result = cursor.fetchone()
                
                if user_result:
                    user_id = user_result[0]
                    cursor.execute(
                        "INSERT INTO reports (user_id, department, content, week_start, week_end, status) VALUES (?, ?, ?, ?, ?, ?)",
                        (
                            user_id,
                            "IT –æ—Ç–¥–µ–ª",
                            report_text,
                            datetime.now().date(),
                            (datetime.now() + timedelta(days=6)).date(),
                            "completed"
                        )
                    )
                    conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        
        await asyncio.sleep(2)
        
        self.print_bot_response(
            "‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
            "üìà –ê–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–∞:\n"
            "‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: 4\n"
            "‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –±–∞–≥–æ–≤: 15\n"
            "‚Ä¢ –ù–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: 1\n"
            "‚Ä¢ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: –û—Ç–ª–∏—á–Ω–æ\n\n"
            "üìä –û—Ç—á–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–¥–µ–ª–∞"
        )
        
        self.scenarios_completed.append("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞")
    
    async def scenario_admin_panel(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
        self.print_header("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–∞–Ω–µ–ª—å—é")
        
        self.print_user_action("–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞ (–ê–¥–º–∏–Ω)", "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        
        self.print_bot_response(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
            "üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞–º–∏\n"
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "üìà –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
        )
        
        self.print_user_action("–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞", "–í—ã–±–∏—Ä–∞–µ—Ç '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã'")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM users")
                total_users = cursor.fetchone()[0]
                cursor.execute("SELECT COUNT(*) FROM reports")
                total_reports = cursor.fetchone()[0]
        except Exception:
            total_users = 1
            total_reports = 1
        
        self.print_bot_response(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üìã –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {total_reports}\n"
            "üè¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤: 1\n"
            "üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–æ–≤: 100%\n\n"
            "üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–¥–µ–ª—ã:\n"
            "‚Ä¢ IT –æ—Ç–¥–µ–ª - 100%"
        )
        
        self.scenarios_completed.append("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    
    async def scenario_help_system(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –°–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏"""
        self.print_header("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–º–æ—â—å")
        
        self.print_user_action("–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "–ù–∞–∂–∏–º–∞–µ—Ç '‚ùì –ü–æ–º–æ—â—å'")
        
        self.print_bot_response(
            "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ\n\n"
            "üìù –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç'\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª\n"
            "3. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞\n"
            "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç\n\n"
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
            "‚Ä¢ –û—Ç—á–µ—Ç—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –¥–æ –ø—è—Ç–Ω–∏—Ü—ã 18:00\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –¥–µ–¥–ª–∞–π–Ω–µ\n\n"
            "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @admin"
        )
        
        self.scenarios_completed.append("–°–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏")
    
    async def scenario_reminders(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        self.print_header("–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
        self.print_system_info("–°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
        
        self.print_bot_response(
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
            "‚è∞ –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –ø–æ–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å 2 —á–∞—Å–∞\n"
            "üìÖ –î–µ–¥–ª–∞–π–Ω: –°–µ–≥–æ–¥–Ω—è, 18:00\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.\n\n"
            "üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç —Å–µ–π—á–∞—Å\n"
            "‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç"
        )
        
        self.scenarios_completed.append("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    
    async def run_demonstration(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("\nüé≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø TELEGRAM –ë–û–¢–ê")
        print("ü§ñ –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ê–û –≠–ú–ó '–§–ò–†–ú–ê –°–≠–õ–ú–ê'")
        print("\n" + "="*80)
        
        print("\nüìã –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
        scenarios = [
            "1. –ö–æ–º–∞–Ω–¥–∞ /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "2. –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞",
            "3. –†–∞–±–æ—Ç–∞ —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é",
            "4. –°–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏",
            "5. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        ]
        
        for scenario in scenarios:
            print(f"   {scenario}")
        
        input("\n‚ñ∂Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞...")
        
        # –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        demo_scenarios = [
            self.scenario_start_command,
            self.scenario_create_report,
            self.scenario_admin_panel,
            self.scenario_help_system,
            self.scenario_reminders
        ]
        
        for i, scenario_func in enumerate(demo_scenarios, 1):
            print(f"\n\nüé¨ –°—Ü–µ–Ω–∞—Ä–∏–π {i}/{len(demo_scenarios)}")
            await scenario_func()
            
            if i < len(demo_scenarios):
                input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        
        self.print_final_summary()
    
    def print_final_summary(self):
        """–ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ–∑—é–º–µ"""
        self.print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        
        print("\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏:")
        for i, scenario in enumerate(self.scenarios_completed, 1):
            print(f"   {i}. {scenario}")
        
        print("\nüöÄ –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:")
        print("   ‚Ä¢ üë§ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("   ‚Ä¢ üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º")
        print("   ‚Ä¢ üëë –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        print("   ‚Ä¢ üîî –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        print("   ‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("   ‚Ä¢ ‚ùì –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏")
        
        print("\nüíæ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
        print("   ‚Ä¢ üóÑÔ∏è  SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        print("   ‚Ä¢ ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Ollama –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞")
        print("   ‚Ä¢ üì± Telegram Bot API")
        print("   ‚Ä¢ üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        
        print("\nüéØ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\n" + "="*80)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = f"demo_report_{timestamp}.txt"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("–û—Ç—á–µ—Ç –æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write("–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n")
            for i, scenario in enumerate(self.scenarios_completed, 1):
                f.write(f"{i}. {scenario}\n")
            f.write("\n–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n")
        
        print(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    demo = TelegramBotDemo()
    await demo.run_demonstration()

if __name__ == "__main__":
    asyncio.run(main())