#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
"""

import asyncio
import aiohttp
import json
import time
import os
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass

@dataclass
class TestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
    test_name: str
    success: bool
    message: str
    response_data: Optional[Dict] = None
    execution_time: float = 0.0

class ComprehensiveBotTester:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram API"""
    
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        
        # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
        self.test_user_id = 167960842  # –í–∞—à Telegram ID
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        self.test_results: List[TestResult] = []
        
        # –°–µ—Å—Å–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
        self.session: Optional[aiohttp.ClientSession] = None
        
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–µ—Ä–∞ –±–æ—Ç–∞")
        print(f"üì± –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.test_user_id}")
        print(f"üîó API URL: {self.base_url}")
        print("\n" + "="*60)
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
    
    async def send_telegram_request(self, method: str, data: Dict) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API"""
        url = f"{self.base_url}/{method}"
        
        async with self.session.post(url, json=data) as response:
            result = await response.json()
            return result
    
    async def simulate_callback_query(self, callback_data: str, message_id: int = None) -> TestResult:
        """–°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è inline –∫–Ω–æ–ø–∫–∏"""
        start_time = time.time()
        test_name = f"Callback: {callback_data}"
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º callback query —á–µ—Ä–µ–∑ sendMessage —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            keyboard = {
                "inline_keyboard": [[
                    {"text": f"Test {callback_data}", "callback_data": callback_data}
                ]]
            }
            
            data = {
                "chat_id": self.test_user_id,
                "text": f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏: {callback_data}",
                "reply_markup": keyboard
            }
            
            response = await self.send_telegram_request("sendMessage", data)
            execution_time = time.time() - start_time
            
            if response.get('ok'):
                return TestResult(
                    test_name=test_name,
                    success=True,
                    message=f"–ö–Ω–æ–ø–∫–∞ {callback_data} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                    response_data=response,
                    execution_time=execution_time
                )
            else:
                return TestResult(
                    test_name=test_name,
                    success=False,
                    message=f"–û—à–∏–±–∫–∞: {response.get('description', 'Unknown error')}",
                    response_data=response,
                    execution_time=execution_time
                )
                
        except Exception as e:
            execution_time = time.time() - start_time
            return TestResult(
                test_name=test_name,
                success=False,
                message=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                execution_time=execution_time
            )
    
    async def send_command(self, command: str) -> TestResult:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É"""
        start_time = time.time()
        test_name = f"Command: {command}"
        
        try:
            data = {
                "chat_id": self.test_user_id,
                "text": command
            }
            
            response = await self.send_telegram_request("sendMessage", data)
            execution_time = time.time() - start_time
            
            if response.get('ok'):
                return TestResult(
                    test_name=test_name,
                    success=True,
                    message=f"–ö–æ–º–∞–Ω–¥–∞ {command} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                    response_data=response,
                    execution_time=execution_time
                )
            else:
                return TestResult(
                    test_name=test_name,
                    success=False,
                    message=f"–û—à–∏–±–∫–∞: {response.get('description', 'Unknown error')}",
                    response_data=response,
                    execution_time=execution_time
                )
                
        except Exception as e:
            execution_time = time.time() - start_time
            return TestResult(
                test_name=test_name,
                success=False,
                message=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                execution_time=execution_time
            )
    
    async def send_text_message(self, text: str, description: str = "") -> TestResult:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        start_time = time.time()
        test_name = f"Text: {description or text[:30]}"
        
        try:
            data = {
                "chat_id": self.test_user_id,
                "text": text
            }
            
            response = await self.send_telegram_request("sendMessage", data)
            execution_time = time.time() - start_time
            
            if response.get('ok'):
                return TestResult(
                    test_name=test_name,
                    success=True,
                    message=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
                    response_data=response,
                    execution_time=execution_time
                )
            else:
                return TestResult(
                    test_name=test_name,
                    success=False,
                    message=f"–û—à–∏–±–∫–∞: {response.get('description', 'Unknown error')}",
                    response_data=response,
                    execution_time=execution_time
                )
                
        except Exception as e:
            execution_time = time.time() - start_time
            return TestResult(
                test_name=test_name,
                success=False,
                message=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}",
                execution_time=execution_time
            )
    
    def log_test_result(self, result: TestResult):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASS" if result.success else "‚ùå FAIL"
        print(f"{status} | {result.test_name} | {result.execution_time:.2f}s | {result.message}")
        self.test_results.append(result)
    
    async def test_basic_commands(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
        print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–´–• –ö–û–ú–ê–ù–î")
        print("-" * 40)
        
        commands = [
            "/start",
            "/menu", 
            "/help",
            "/status"
        ]
        
        for command in commands:
            result = await self.send_command(command)
            self.log_test_result(result)
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    async def test_main_menu_navigation(self):
        """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
        print("\nüß≠ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–í–ò–ì–ê–¶–ò–ò –ü–û –ì–õ–ê–í–ù–û–ú–£ –ú–ï–ù–Æ")
        print("-" * 50)
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        start_result = await self.send_command("/start")
        self.log_test_result(start_result)
        await asyncio.sleep(2)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        menu_buttons = [
            "menu_report",
            "menu_status", 
            "menu_help",
            "menu_admin"
        ]
        
        for button in menu_buttons:
            result = await self.simulate_callback_query(button)
            self.log_test_result(result)
            await asyncio.sleep(2)
    
    async def test_report_creation_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
        print("\nüìù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –û–¢–ß–ï–¢–ê")
        print("-" * 40)
        
        # 1. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        result = await self.send_command("/report")
        self.log_test_result(result)
        await asyncio.sleep(2)
        
        # 2. –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–¥–µ–ª (—Å–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª–∞)
        dept_result = await self.simulate_callback_query("dept_1")
        self.log_test_result(dept_result)
        await asyncio.sleep(2)
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏
        tasks_text = "–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:\n- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞\n- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫"
        tasks_result = await self.send_text_message(tasks_text, "–ó–∞–¥–∞—á–∏ –∑–∞ –Ω–µ–¥–µ–ª—é")
        self.log_test_result(tasks_result)
        await asyncio.sleep(2)
        
        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements_text = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n- –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥—É–ª—è\n- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏\n- –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
        achievements_result = await self.send_text_message(achievements_text, "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
        self.log_test_result(achievements_result)
        await asyncio.sleep(2)
        
        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        problems_text = "–ü—Ä–æ–±–ª–µ–º—ã:\n- –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π\n- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"
        problems_result = await self.send_text_message(problems_text, "–ü—Ä–æ–±–ª–µ–º—ã")
        self.log_test_result(problems_result)
        await asyncio.sleep(2)
        
        # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞–Ω—ã
        plans_text = "–ü–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:\n- –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é\n- –ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n- –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é"
        plans_result = await self.send_text_message(plans_text, "–ü–ª–∞–Ω—ã")
        self.log_test_result(plans_result)
        await asyncio.sleep(2)
        
        # 7. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç—á–µ—Ç
        confirm_result = await self.simulate_callback_query("report_confirm")
        self.log_test_result(confirm_result)
        await asyncio.sleep(2)
    
    async def test_admin_panel(self):
        """–¢–µ—Å—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        print("\n‚öôÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò")
        print("-" * 35)
        
        # 1. –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        admin_result = await self.send_command("/admin")
        self.log_test_result(admin_result)
        await asyncio.sleep(2)
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        admin_buttons = [
            "admin_manage_users",
            "admin_manage_depts", 
            "admin_reports",
            "admin_reminders",
            "admin_export"
        ]
        
        for button in admin_buttons:
            result = await self.simulate_callback_query(button)
            self.log_test_result(result)
            await asyncio.sleep(2)
    
    async def test_navigation_buttons(self):
        """–¢–µ—Å—Ç –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        print("\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ù–û–ü–û–ö –ù–ê–í–ò–ì–ê–¶–ò–ò")
        print("-" * 40)
        
        navigation_buttons = [
            "back_to_main",
            "back_main",
            "admin_back",
            "cancel"
        ]
        
        for button in navigation_buttons:
            result = await self.simulate_callback_query(button)
            self.log_test_result(result)
            await asyncio.sleep(1)
    
    async def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ë–û–¢–ê")
        print("=" * 60)
        print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –±–æ—Ç: {self.base_url}")
        print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.test_user_id}")
        
        start_time = time.time()
        
        try:
            # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
            await self.test_basic_commands()
            await self.test_main_menu_navigation()
            await self.test_report_creation_flow()
            await self.test_admin_panel()
            await self.test_navigation_buttons()
            
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        
        total_time = time.time() - start_time
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        await self.generate_test_report(total_time)
    
    async def generate_test_report(self, total_time: float):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        print("=" * 60)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for r in self.test_results if r.success)
        failed_tests = total_tests - passed_tests
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
        
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        print(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        if failed_tests > 0:
            print("\n‚ùå –ü–†–û–í–ê–õ–ò–í–®–ò–ï–°–Ø –¢–ï–°–¢–´:")
            print("-" * 30)
            for result in self.test_results:
                if not result.success:
                    print(f"‚Ä¢ {result.test_name}: {result.message}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_filename = f"comprehensive_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write("–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò TELEGRAM –ë–û–¢–ê\n")
            f.write("=" * 60 + "\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥\n")
            f.write(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}\n")
            f.write(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}\n")
            f.write(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}\n")
            f.write(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%\n\n")
            
            f.write("–î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:\n")
            f.write("-" * 40 + "\n")
            for result in self.test_results:
                status = "PASS" if result.success else "FAIL"
                f.write(f"[{status}] {result.test_name} ({result.execution_time:.2f}s): {result.message}\n")
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_filename}")
        
        if success_rate >= 90:
            print("\nüéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.")
        elif success_rate >= 70:
            print("\n‚ö†Ô∏è  –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        else:
            print("\nüö® –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï! –ú–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫.")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞")
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ API –≤—ã–∑–æ–≤—ã")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token or bot_token == 'YOUR_BOT_TOKEN_HERE':
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        return
    
    async with ComprehensiveBotTester() as tester:
        await tester.run_comprehensive_test()

if __name__ == "__main__":
    asyncio.run(main())