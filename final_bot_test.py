#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ —Ñ—É–Ω–∫—Ü–∏–π
"""

import asyncio
import sys
from pathlib import Path
from unittest.mock import AsyncMock, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from handlers.admin_handler import AdminHandler
from handlers.menu_handler import MenuHandler
from handlers.report_handler import ReportHandler
from database import DatabaseManager
from services.telegram_service import TelegramService
from services.reminder_service import ReminderService
from services.report_processor import ReportProcessor
from services.task_manager import TaskManager

class FinalBotTest:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""
    
    def __init__(self):
        self.setup_mocks()
        self.setup_handlers()
    
    def setup_mocks(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        self.db_manager = MagicMock()
        self.telegram_service = AsyncMock()
        self.reminder_service = AsyncMock()
        self.report_processor = AsyncMock()
        self.task_manager = AsyncMock()
        
        # –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db_manager.get_departments.return_value = [
            {'id': 1, 'name': 'IT –æ—Ç–¥–µ–ª'},
            {'id': 2, 'name': '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è'}
        ]
        
        self.db_manager.get_users.return_value = [
            {'id': 1, 'telegram_id': 123456, 'full_name': '–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'department_id': 1}
        ]
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        user_management_handler = AsyncMock()
        department_management_handler = AsyncMock()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.admin_handler = AdminHandler(
            self.report_processor,
            self.db_manager,
            self.telegram_service,
            user_management_handler,
            department_management_handler
        )
        
        self.report_handler = ReportHandler(
            self.report_processor,
            None,  # ollama_service
            self.telegram_service,
            self.task_manager,
            self.db_manager
        )
        
        self.menu_handler = MenuHandler(
            self.report_handler,
            self.admin_handler
        )
    
    def create_mock_update(self, callback_data, user_id=167960842):
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ Update –æ–±—ä–µ–∫—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = AsyncMock()
        user.id = user_id
        user.first_name = "Test"
        user.username = "testuser"
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = AsyncMock()
        message.chat.id = user_id
        message.message_id = 123
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ callback_query
        callback_query = AsyncMock()
        callback_query.id = "test_callback"
        callback_query.from_user = user
        callback_query.chat_instance = "test_instance"
        callback_query.data = callback_data
        callback_query.message = message
        callback_query.answer = AsyncMock()
        callback_query.edit_message_text = AsyncMock()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ update
        update = AsyncMock()
        update.callback_query = callback_query
        update.effective_user = user
        update.effective_chat = message.chat
        
        return update
    
    def create_mock_context(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ Context –æ–±—ä–µ–∫—Ç–∞"""
        context = AsyncMock()
        context.bot = AsyncMock()
        context.user_data = {}
        context.chat_data = {}
        return context
    
    async def test_main_menu_buttons(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é...")
        
        buttons_to_test = [
            'menu_report',
            'menu_admin',
            'menu_help'
        ]
        
        for button in buttons_to_test:
            try:
                update = self.create_mock_update(button)
                context = self.create_mock_context()
                
                if button == 'menu_report':
                    await self.report_handler.report_command(update, context)
                elif button == 'menu_admin':
                    await self.admin_handler.admin_command(update, context)
                elif button == 'menu_help':
                    await self.menu_handler.show_help(update, context)
                
                print(f"  ‚úÖ –ö–Ω–æ–ø–∫–∞ '{button}' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–Ω–æ–ø–∫–µ '{button}': {e}")
                return False
        
        return True
    
    async def test_admin_panel_buttons(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
        
        admin_buttons = [
            'admin_users',
            'admin_departments', 
            'admin_reminders',
            'admin_reports',
            'admin_export'
        ]
        
        for button in admin_buttons:
            try:
                update = self.create_mock_update(button)
                context = self.create_mock_context()
                
                await self.admin_handler.handle_admin_callback(update, context)
                print(f"  ‚úÖ –ê–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∞ '{button}' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω –∫–Ω–æ–ø–∫–µ '{button}': {e}")
                return False
        
        return True
    
    async def test_reminder_buttons(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        
        reminder_buttons = [
            'reminder_settings',
            'reminder_send_all',
            'reminder_send_missing'
        ]
        
        for button in reminder_buttons:
            try:
                update = self.create_mock_update(button)
                context = self.create_mock_context()
                
                await self.admin_handler.handle_reminder_action(update, context)
                print(f"  ‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π '{button}' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–Ω–æ–ø–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π '{button}': {e}")
                return False
        
        return True
    
    async def test_back_buttons(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞...")
        
        back_buttons = [
            'admin_back',
            'back_to_main',
            'back_to_admin'
        ]
        
        for button in back_buttons:
            try:
                update = self.create_mock_update(button)
                context = self.create_mock_context()
                
                if button == 'admin_back':
                    await self.admin_handler.handle_admin_callback(update, context)
                elif button == 'back_to_main':
                    await self.menu_handler.show_main_menu(update, context)
                elif button == 'back_to_admin':
                    await self.admin_handler.admin_command(update, context)
                
                print(f"  ‚úÖ –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ '{button}' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ –∫–Ω–æ–ø–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ '{button}': {e}")
                return False
        
        return True
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞")
        print("=" * 60)
        
        tests = [
            ("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", self.test_main_menu_buttons),
            ("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", self.test_admin_panel_buttons),
            ("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", self.test_reminder_buttons),
            ("–ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞", self.test_back_buttons)
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test_name, test_func in tests:
            print(f"\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_name}")
            try:
                result = await test_func()
                if result:
                    passed_tests += 1
                    print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                else:
                    print(f"‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù")
            except Exception as e:
                print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
        
        print("\n" + "=" * 60)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed_tests == total_tests:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω.")
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True
        else:
            print(f"‚ö†Ô∏è  {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    tester = FinalBotTest()
    success = await tester.run_all_tests()
    
    if success:
        print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üîß –ö–Ω–æ–ø–∫–∞ '–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π' –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç.")
    else:
        print("\n‚ùå –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.")
    
    return success

if __name__ == "__main__":
    asyncio.run(main())