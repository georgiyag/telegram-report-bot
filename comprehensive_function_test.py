#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π "–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" –≤ –∫–æ–¥–µ –±–æ—Ç–∞.
"""

import os
import re
from datetime import datetime

class UnderDevelopmentChecker:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."""
    
    def __init__(self):
        self.src_dir = "src"
        self.under_dev_patterns = [
            r"–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            r"–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            r"under development",
            r"–∑–∞–≥–ª—É—à–∫–∞",
            r"stub",
            r"TODO",
            r"FIXME"
        ]
        self.results = []
        
    def scan_file(self, filepath):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."""
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
                lines = content.split('\n')
                
            found_issues = []
            for i, line in enumerate(lines, 1):
                for pattern in self.under_dev_patterns:
                    if re.search(pattern, line, re.IGNORECASE):
                        found_issues.append({
                            'line': i,
                            'content': line.strip(),
                            'pattern': pattern
                        })
            
            return found_issues
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")
            return []
    
    def scan_directory(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é src."""
        print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        print("=" * 60)
        
        total_files = 0
        files_with_issues = 0
        total_issues = 0
        
        for root, dirs, files in os.walk(self.src_dir):
            for file in files:
                if file.endswith('.py'):
                    filepath = os.path.join(root, file)
                    total_files += 1
                    
                    issues = self.scan_file(filepath)
                    if issues:
                        files_with_issues += 1
                        total_issues += len(issues)
                        
                        print(f"\nüìÅ {filepath}:")
                        for issue in issues:
                            print(f"   –°—Ç—Ä–æ–∫–∞ {issue['line']}: {issue['content']}")
                            print(f"   –ü–∞—Ç—Ç–µ—Ä–Ω: {issue['pattern']}")
                            print()
                        
                        self.results.append({
                            'file': filepath,
                            'issues': issues
                        })
        
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        print(f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total_files}")
        print(f"‚ö†Ô∏è  –§–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {files_with_issues}")
        print(f"üîç –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {total_issues}")
        
        if total_issues == 0:
            print("\nüéâ –û—Ç–ª–∏—á–Ω–æ! –§—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            print("   –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É.")
        else:
            print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω–æ {total_issues} —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
            print("   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é.")
            
            print("\nüìã –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:")
            for result in self.results:
                print(f"\nüìÅ {result['file']}:")
                for issue in result['issues']:
                    print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫–∞ {issue['line']}: {issue['content'][:50]}...")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        self.save_report(total_files, files_with_issues, total_issues)
        
        return total_issues == 0
    
    def save_report(self, total_files, files_with_issues, total_issues):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"under_development_report_{timestamp}.txt"
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write("–û–¢–ß–ï–¢ –û –§–£–ù–ö–¶–ò–Ø–• –í –†–ê–ó–†–ê–ë–û–¢–ö–ï\n")
            f.write("=" * 40 + "\n\n")
            f.write(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n")
            f.write(f"–§–∞–π–ª–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {files_with_issues}\n")
            f.write(f"–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {total_issues}\n\n")
            
            if self.results:
                f.write("–î–ï–¢–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –ü–†–û–ë–õ–ï–ú:\n")
                f.write("-" * 30 + "\n")
                for result in self.results:
                    f.write(f"\n–§–∞–π–ª: {result['file']}\n")
                    for issue in result['issues']:
                        f.write(f"  –°—Ç—Ä–æ–∫–∞ {issue['line']}: {issue['content']}\n")
                        f.write(f"  –ü–∞—Ç—Ç–µ—Ä–Ω: {issue['pattern']}\n\n")
            else:
                f.write("–§—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n")
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    checker = UnderDevelopmentChecker()
    
    if not os.path.exists(checker.src_dir):
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {checker.src_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return 1
    
    success = checker.scan_directory()
    return 0 if success else 1

if __name__ == "__main__":
    exit_code = main()
    exit(exit_code)