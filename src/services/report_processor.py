import asyncio
from typing import List, Dict, Optional, Tuple
from datetime import datetime, timedelta
from loguru import logger

from models.report import WeeklyReport
from models.department import Employee, Department
from .ollama_service import OllamaService
from .telegram_service import TelegramService
from config import settings

class ReportProcessor:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞–º–∏"""
    
    def __init__(self, ollama_service: OllamaService, telegram_service: TelegramService):
        self.ollama_service = ollama_service
        self.telegram_service = telegram_service
        self.reports_storage: List[WeeklyReport] = []  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        self.employees_storage: List[Employee] = []   # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    
    async def process_new_report(self, report: WeeklyReport) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {report.user_id}")
            
            # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            self.save_report(report)
            
            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.telegram_service.send_report_confirmation(report.user_id, report)
            
            # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –ò–ò (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if await self.ollama_service.check_connection():
                processed_report = await self.ollama_service.process_report(report)
                self.update_report(processed_report)
            else:
                logger.warning("Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç—á–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –±–µ–∑ –ò–ò –∞–Ω–∞–ª–∏–∑–∞")
                report.mark_as_processed(
                    summary="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    analysis="–ò–ò –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                )
                self.update_report(report)
            
            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
            await self.telegram_service.send_report_to_group(report)
            
            logger.info(f"–û—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {report.user_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {report.user_id}: {e}")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ
            await self.telegram_service.send_admin_notification(
                settings.admin_user_ids,
                f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {report.user_id}: {str(e)}"
            )
            return False
    
    def save_report(self, report: WeeklyReport) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
        existing_report = self.get_user_report_for_week(report.user_id, report.week_start)
        
        if existing_report:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç
            existing_report.completed_tasks = report.completed_tasks
            existing_report.achievements = report.achievements
            existing_report.problems = report.problems
            existing_report.next_week_plans = report.next_week_plans
            existing_report.submitted_at = report.submitted_at
            existing_report.status = report.status
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {report.user_id}")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
            self.reports_storage.append(report)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {report.user_id}")
    
    def update_report(self, report: WeeklyReport) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        for i, stored_report in enumerate(self.reports_storage):
            if (stored_report.user_id == report.user_id and 
                stored_report.week_start == report.week_start):
                self.reports_storage[i] = report
                logger.debug(f"–û—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {report.user_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                return
        
        # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        self.reports_storage.append(report)
        logger.debug(f"–û—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {report.user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –Ω–æ–≤—ã–π")
    
    def get_user_report_for_week(self, user_id: int, week_start: datetime) -> Optional[WeeklyReport]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–µ–¥–µ–ª—é"""
        for report in self.reports_storage:
            if report.user_id == user_id and report.week_start.date() == week_start.date():
                return report
        return None
    
    def get_user_reports(self, user_id: int, limit: int = 10) -> List[WeeklyReport]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_reports = [r for r in self.reports_storage if r.user_id == user_id]
        user_reports.sort(key=lambda x: x.week_start, reverse=True)
        return user_reports[:limit]
    
    def get_reports_for_week(self, week_start: datetime) -> List[WeeklyReport]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–µ–¥–µ–ª—é"""
        return [r for r in self.reports_storage 
                if r.week_start.date() == week_start.date()]
    
    def get_reports_for_period(self, start_date: datetime, end_date: datetime) -> List[WeeklyReport]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        return [r for r in self.reports_storage 
                if start_date.date() <= r.week_start.date() <= end_date.date()]
    
    def get_all_reports(self, limit: Optional[int] = None) -> List[WeeklyReport]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        sorted_reports = sorted(self.reports_storage, key=lambda x: x.submitted_at, reverse=True)
        return sorted_reports[:limit] if limit else sorted_reports
    
    def get_statistics(self) -> Dict[str, any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Ç—á–µ—Ç–∞–º"""
        total_reports = len(self.reports_storage)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_stats = {}
        for report in self.reports_storage:
            status_stats[report.status] = status_stats.get(report.status, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º
        department_stats = {}
        for report in self.reports_storage:
            dept = report.department or '–ù–µ —É–∫–∞–∑–∞–Ω'
            department_stats[dept] = department_stats.get(dept, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
        now = datetime.now()
        week_stats = {}
        for i in range(4):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 –Ω–µ–¥–µ–ª–∏
            week_start = now - timedelta(weeks=i)
            week_reports = self.get_reports_for_week(week_start)
            week_stats[f"week_{i}"] = len(week_reports)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        active_users = len(set(r.user_id for r in self.reports_storage 
                              if r.submitted_at >= now - timedelta(days=30)))
        
        return {
            'total_reports': total_reports,
            'status_distribution': status_stats,
            'department_distribution': department_stats,
            'weekly_stats': week_stats,
            'active_users_last_month': active_users,
            'total_users': len(self.employees_storage)
        }
    
    async def generate_weekly_summary(self, week_start: Optional[datetime] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        if not week_start:
            week_start = datetime.now() - timedelta(days=datetime.now().weekday())
        
        week_reports = self.get_reports_for_week(week_start)
        
        if not week_reports:
            return f"–û—Ç—á–µ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é {week_start.strftime('%d.%m.%Y')} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        basic_summary = f"""üìä –°–≤–æ–¥–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é {week_start.strftime('%d.%m.%Y')} - {(week_start + timedelta(days=6)).strftime('%d.%m.%Y')}

üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {len(week_reports)}
‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(self.employees_storage)}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–¥–∞—á–∏: {len(week_reports) / max(len(self.employees_storage), 1) * 100:.1f}%

üìã –ü–æ –æ—Ç–¥–µ–ª–∞–º:"""
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º
        dept_stats = {}
        for report in week_reports:
            dept = report.department or '–ù–µ —É–∫–∞–∑–∞–Ω'
            dept_stats[dept] = dept_stats.get(dept, 0) + 1
        
        for dept, count in dept_stats.items():
            basic_summary += f"\n‚Ä¢ {dept}: {count} –æ—Ç—á–µ—Ç–æ–≤"
        
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ò–ò, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–≤–æ–¥–∫—É
        if await self.ollama_service.check_connection():
            ai_summary = await self.ollama_service.generate_weekly_summary(week_reports)
            return f"{basic_summary}\n\nü§ñ –ò–ò –ê–Ω–∞–ª–∏–∑:\n{ai_summary}"
        else:
            return basic_summary
    
    async def send_reminders_to_missing_users(self) -> Dict[str, int]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –Ω–µ —Å–¥–∞–≤—à–∏–º –æ—Ç—á–µ—Ç—ã"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        now = datetime.now()
        week_start = now - timedelta(days=now.weekday())
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        week_reports = self.get_reports_for_week(week_start)
        submitted_user_ids = {r.user_id for r in week_reports}
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –æ—Ç—á–µ—Ç–æ–≤
        missing_users = [emp for emp in self.employees_storage 
                        if emp.user_id not in submitted_user_ids]
        
        if not missing_users:
            return {'sent': 0, 'failed': 0, 'no_missing': True}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        results = await self.telegram_service.send_bulk_reminders(missing_users)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {results['sent']} –∏–∑ {len(missing_users)}")
        return results
    
    def add_employee(self, employee: Employee) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        existing = self.get_employee_by_user_id(employee.user_id)
        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            existing.full_name = employee.full_name
            existing.username = employee.username
            existing.department = employee.department
            existing.position = employee.position
            existing.is_active = employee.is_active
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ {employee.user_id}")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ
            self.employees_storage.append(employee)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee.user_id}")
    
    def get_employee_by_user_id(self, user_id: int) -> Optional[Employee]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ user_id"""
        for emp in self.employees_storage:
            if emp.user_id == user_id:
                return emp
        return None
    
    def get_all_employees(self) -> List[Employee]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        return self.employees_storage.copy()
    
    def get_employees_by_department(self, department: str) -> List[Employee]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –æ—Ç–¥–µ–ª—É"""
        return [emp for emp in self.employees_storage if emp.department == department]
    
    async def export_reports_to_text(self, start_date: datetime, end_date: datetime) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        reports = self.get_reports_for_period(start_date, end_date)
        
        if not reports:
            return "–û—Ç—á–µ—Ç—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
        
        export_text = f"""–≠–ö–°–ü–û–†–¢ –û–¢–ß–ï–¢–û–í
–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}
–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {len(reports)}
–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}

{'='*50}\n\n"""
        
        for i, report in enumerate(reports, 1):
            export_text += f"""–û–¢–ß–ï–¢ #{i}
–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {report.full_name}
–û—Ç–¥–µ–ª: {report.department or '–ù–µ —É–∫–∞–∑–∞–Ω'}
–î–æ–ª–∂–Ω–æ—Å—Ç—å: {report.position or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
–ü–µ—Ä–∏–æ–¥: {report.get_week_string()}
–°—Ç–∞—Ç—É—Å: {report.status}
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {report.submitted_at.strftime('%d.%m.%Y %H:%M')}

–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:
{report.completed_tasks}

–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:
{report.achievements}

–ü—Ä–æ–±–ª–µ–º—ã:
{report.problems}

–ü–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:
{report.next_week_plans}

{'-'*30}\n\n"""
        
        return export_text
    
    async def analyze_user_performance(self, user_id: int) -> str:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_reports = self.get_user_reports(user_id, limit=8)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 8 –Ω–µ–¥–µ–ª—å
        
        if not user_reports:
            return "–û—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        employee = self.get_employee_by_user_id(user_id)
        employee_name = employee.full_name if employee else f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
        
        basic_analysis = f"""üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {employee_name}

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {len(user_reports)}
‚Ä¢ –ü–µ—Ä–∏–æ–¥: {user_reports[-1].get_week_string()} - {user_reports[0].get_week_string()}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç—á–µ—Ç–∞: {sum(len(r.completed_tasks) for r in user_reports) // len(user_reports)} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å: {len(user_reports)} –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 8 –Ω–µ–¥–µ–ª—å"""
        
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ò–ò, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if await self.ollama_service.check_connection():
            ai_analysis = await self.ollama_service.analyze_employee_performance(user_reports, user_id)
            return f"{basic_analysis}\n\nü§ñ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:\n{ai_analysis}"
        else:
            return basic_analysis
    
    def cleanup_old_reports(self, days_to_keep: int = 90) -> int:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        cutoff_date = datetime.now() - timedelta(days=days_to_keep)
        
        initial_count = len(self.reports_storage)
        self.reports_storage = [r for r in self.reports_storage 
                               if r.submitted_at >= cutoff_date]
        
        removed_count = initial_count - len(self.reports_storage)
        
        if removed_count > 0:
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
        
        return removed_count