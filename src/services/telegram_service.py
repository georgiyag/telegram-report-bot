import asyncio
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError, BadRequest, Forbidden
from loguru import logger

from config import settings
from models.report import WeeklyReport
from models.department import Employee

class TelegramService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.group_chat_id = settings.group_chat_id
        self.thread_id = settings.thread_id
    
    async def send_message_safe(self, chat_id: int, text: str, 
                               reply_markup: Optional[InlineKeyboardMarkup] = None,
                               parse_mode: str = 'HTML') -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            return True
        except Forbidden:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            return False
        except BadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
            return False
        except TelegramError as e:
            logger.error(f"Telegram –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {chat_id}: {e}")
            return False
    
    async def send_report_to_group(self, report: WeeklyReport) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            formatted_report = self._format_report_for_group(report)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            if self.thread_id:
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω thread_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç—Ä–µ–¥
                await self.bot.send_message(
                    chat_id=self.group_chat_id,
                    text=formatted_report,
                    message_thread_id=self.thread_id,
                    parse_mode='HTML'
                )
            else:
                # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
                await self.bot.send_message(
                    chat_id=self.group_chat_id,
                    text=formatted_report,
                    parse_mode='HTML'
                )
            
            logger.info(f"–û—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {report.user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")
            return False
    
    def _format_report_for_group(self, report: WeeklyReport) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —É–∫—Ä–∞—à–µ–Ω–∏—è
        status_emoji = {
            'submitted': 'üìã',
            'processed': '‚úÖ',
            'draft': 'üìù'
        }
        
        emoji = status_emoji.get(report.status, 'üìÑ')
        
        formatted = f"""{emoji} <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</b>

üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {report.full_name}
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {report.week_start.strftime('%d.%m.%Y')} - {report.week_end.strftime('%d.%m.%Y')}
üè¢ <b>–û—Ç–¥–µ–ª:</b> {report.department or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {report.position or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üìã <b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>
{self._format_text_block(report.completed_tasks)}

üéØ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
{self._format_text_block(report.achievements)}

‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º—ã:</b>
{self._format_text_block(report.problems)}

üìà <b>–ü–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:</b>
{self._format_text_block(report.next_week_plans)}
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ò–ò –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(report, 'ai_summary') and report.ai_summary:
            formatted += f"\nü§ñ <b>–ò–ò –ê–Ω–∞–ª–∏–∑:</b>\n{self._format_text_block(report.ai_summary)}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        submit_time = report.submitted_at or report.created_at
        if submit_time:
            formatted += f"\n‚è∞ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {submit_time.strftime('%d.%m.%Y %H:%M')}"
        else:
            from datetime import datetime
            current_time = datetime.now()
            formatted += f"\n‚è∞ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {current_time.strftime('%d.%m.%Y %H:%M')}"
        
        return formatted
    
    def _format_text_block(self, text: str, max_length: int = 500) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã"""
        if not text or text.strip() == "":
            return "<i>–ù–µ —É–∫–∞–∑–∞–Ω–æ</i>"
        
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(text) > max_length:
            text = text[:max_length] + "..."
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
        text = text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
        
        return text
    
    async def send_reminder_to_user(self, user_id: int, user_name: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–¥–∞—Ç—å –æ—Ç—á–µ—Ç"""
        reminder_text = f"""üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–º –æ—Ç—á–µ—Ç–µ</b>

–ü—Ä–∏–≤–µ—Ç, {user_name}!

–ù–µ –∑–∞–±—É–¥—å —Å–¥–∞—Ç—å —Å–≤–æ–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–æ {settings.report_deadline}.

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /report

üìã –í –æ—Ç—á–µ—Ç–µ —É–∫–∞–∂–∏:
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
‚Ä¢ –í–æ–∑–Ω–∏–∫—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –ü–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é

–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å! üôè"""
        
        return await self.send_message_safe(user_id, reminder_text)
    
    async def send_bulk_reminders(self, users: List[Employee]) -> Dict[str, int]:
        """–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        results = {'sent': 0, 'failed': 0}
        
        for user in users:
            success = await self.send_reminder_to_user(user.user_id, user.full_name)
            if success:
                results['sent'] += 1
            else:
                results['failed'] += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await asyncio.sleep(0.5)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {results['sent']}, –Ω–µ—É–¥–∞—á–Ω—ã—Ö: {results['failed']}")
        return results
    
    async def send_weekly_summary_to_admins(self, summary: str, admin_ids: List[int]) -> int:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        summary_text = f"""üìä <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –æ—Ç—á–µ—Ç–æ–≤</b>

{summary}

üìÖ <b>–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
        
        sent_count = 0
        for admin_id in admin_ids:
            if await self.send_message_safe(admin_id, summary_text):
                sent_count += 1
            await asyncio.sleep(0.3)
        
        return sent_count
    
    async def send_report_confirmation(self, user_id: int, report: WeeklyReport) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞"""
        confirmation_text = f"""‚úÖ <b>–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç!</b>

–°–ø–∞—Å–∏–±–æ, {report.full_name}!

–¢–≤–æ–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ {report.week_start.strftime('%d.%m.%Y')} - {report.week_end.strftime('%d.%m.%Y')} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.

üìã <b>–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ó–∞–¥–∞—á–∏: {len(report.completed_tasks.split('\n')) if report.completed_tasks else 0} –ø—É–Ω–∫—Ç–æ–≤
‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {'‚úì' if report.achievements.strip() else '‚úó'}
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã: {'‚úì' if report.problems.strip() else '‚úó'}
‚Ä¢ –ü–ª–∞–Ω—ã: {'‚úì' if report.next_week_plans.strip() else '‚úó'}

ü§ñ –û—Ç—á–µ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É.

–£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—á–µ–π –Ω–µ–¥–µ–ª–∏! üöÄ"""
        
        return await self.send_message_safe(user_id, confirmation_text)
    
    async def send_error_notification(self, user_id: int, error_message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        error_text = f"""‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>

{error_message}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help"""
        
        return await self.send_message_safe(user_id, error_text)
    
    async def send_admin_notification(self, admin_ids: List[int], message: str) -> int:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        admin_text = f"""üîß <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

{message}

‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
        
        sent_count = 0
        for admin_id in admin_ids:
            if await self.send_message_safe(admin_id, admin_text):
                sent_count += 1
            await asyncio.sleep(0.2)
        
        return sent_count
    
    async def get_chat_member_count(self, chat_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        try:
            member_count = await self.bot.get_chat_member_count(chat_id)
            return member_count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ {chat_id}: {e}")
            return None
    
    async def check_bot_permissions(self, chat_id: int) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ"""
        try:
            bot_member = await self.bot.get_chat_member(chat_id, self.bot.id)
            
            permissions = {
                'can_send_messages': getattr(bot_member, 'can_send_messages', False),
                'can_send_media_messages': getattr(bot_member, 'can_send_media_messages', False),
                'can_pin_messages': getattr(bot_member, 'can_pin_messages', False),
                'can_delete_messages': getattr(bot_member, 'can_delete_messages', False),
                'is_admin': bot_member.status in ['administrator', 'creator']
            }
            
            return permissions
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}: {e}")
            return {}
    
    def create_report_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="create_report")],
            [InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="my_status")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def create_admin_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üìã –í—Å–µ –æ—Ç—á–µ—Ç—ã", callback_data="admin_reports")],
            [InlineKeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="admin_reminders")],
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def send_typing_action(self, chat_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è '–ø–µ—á–∞—Ç–∞–µ—Ç'"""
        try:
            await self.bot.send_chat_action(chat_id, 'typing')
            return True
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å typing action –¥–ª—è {chat_id}: {e}")
            return False
    
    async def delete_message_safe(self, chat_id: int, message_id: int) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await self.bot.delete_message(chat_id, message_id)
            return True
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
            return False
    
    async def edit_message_safe(self, chat_id: int, message_id: int, text: str,
                               reply_markup: Optional[InlineKeyboardMarkup] = None) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            await self.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return True
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
            return False