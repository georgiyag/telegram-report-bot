# -*- coding: utf-8 -*-
"""
–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö.
–ê–û –≠–ú–ó "–§–ò–†–ú–ê –°–≠–õ–ú–ê"

–ê–≤—Ç–æ—Ä: Telegram Report Bot
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
from datetime import datetime, date, time, timedelta
from typing import List, Optional

from loguru import logger

from database import DatabaseManager
from services.telegram_service import TelegramService
from models.department import Employee
from config import settings


class ReminderService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    
    def __init__(self, db_manager: DatabaseManager, telegram_service: TelegramService):
        self.db_manager = db_manager
        self.telegram_service = telegram_service
        self.is_running = False
        self._task: Optional[asyncio.Task] = None
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        if self.is_running:
            logger.warning("–°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        self._task = asyncio.create_task(self._reminder_loop())
        logger.info("–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        self.is_running = False
        if self._task:
            self._task.cancel()
            try:
                await self._task
            except asyncio.CancelledError:
                pass
        logger.info("–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _reminder_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        while self.is_running:
            try:
                await self._check_and_send_reminders()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                await asyncio.sleep(1800)
            except asyncio.CancelledError:
                logger.info("–¶–∏–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _check_and_send_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        now = datetime.now()
        current_date = now.date()
        current_time = now.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        week_start = current_date - timedelta(days=current_date.weekday())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        should_send = await self._should_send_reminders(current_date, current_time)
        
        if should_send:
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            await self._send_automatic_reminders(week_start)
    
    async def _should_send_reminders(self, current_date: date, current_time: time) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–µ–π—á–∞—Å"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Å—Ä–µ–¥—É –≤ 14:00
        wednesday_reminder = (
            current_date.weekday() == 2 and  # –°—Ä–µ–¥–∞
            current_time.hour == 14 and
            current_time.minute < 30
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 16:00 (–∑–∞ 2 —á–∞—Å–∞ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞)
        friday_reminder = (
            current_date.weekday() == 4 and  # –ü—è—Ç–Ω–∏—Ü–∞
            current_time.hour == 16 and
            current_time.minute < 30
        )
        
        return wednesday_reminder or friday_reminder
    
    async def _send_automatic_reminders(self, week_start: date):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±–µ–∑ –æ—Ç—á–µ—Ç–æ–≤
            missing_users = await self.db_manager.get_missing_reports_users(week_start)
            
            if not missing_users:
                logger.info("–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —É–∂–µ —Å–¥–∞–ª–∏ –æ—Ç—á–µ—Ç—ã")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            results = await self.telegram_service.send_bulk_reminders(missing_users)
            sent_count = results.get('sent', 0)
            failed_count = results.get('failed', 0)
            
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {sent_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admin_message = (
                f"ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã</b>\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –±–µ–∑ –æ—Ç—á–µ—Ç–æ–≤: {len(missing_users)}\n"
                f"‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {sent_count}\n"
                f"‚Ä¢ –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {failed_count}\n\n"
                f"üìÖ –ù–µ–¥–µ–ª—è: {week_start.strftime('%d.%m.%Y')}"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admin_ids = await self._get_admin_ids()
            if admin_ids:
                await self.telegram_service.send_admin_notification(admin_ids, admin_message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ
            error_message = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n"
                f"<code>{str(e)}</code>\n\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            admin_ids = await self._get_admin_ids()
            if admin_ids:
                await self.telegram_service.send_admin_notification(admin_ids, error_message)
    
    async def _get_admin_ids(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            employees = await self.db_manager.get_employees()
            admin_ids = [emp.user_id for emp in employees if emp.is_admin and emp.is_active]
            return admin_ids
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return []
    
    async def send_manual_reminder(self, target_type: str, target_value: str = None) -> dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—É—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            week_start = date.today() - timedelta(days=date.today().weekday())
            
            if target_type == "all":
                # –í—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
                employees = await self.db_manager.get_employees()
                target_users = [emp for emp in employees if emp.is_active and not emp.is_blocked]
                
            elif target_type == "missing":
                # –¢–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –Ω–µ —Å–¥–∞–ª –æ—Ç—á–µ—Ç
                target_users = await self.db_manager.get_missing_reports_users(week_start)
                
            elif target_type == "department":
                # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ—Ç–¥–µ–ª—É
                if not target_value:
                    return {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–¥ –æ—Ç–¥–µ–ª–∞"}
                target_users = await self.db_manager.get_employees_by_department(target_value)
                target_users = [emp for emp in target_users if emp.is_active and not emp.is_blocked]
                
            else:
                return {"success": False, "error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ü–µ–ª–∏"}
            
            if not target_users:
                return {"success": True, "sent": 0, "failed": 0, "message": "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"}
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            results = await self.telegram_service.send_bulk_reminders(target_users)
            
            return {
                "success": True,
                "sent": results.get('sent', 0),
                "failed": results.get('failed', 0),
                "total": len(target_users)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä—É—á–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return {"success": False, "error": str(e)}