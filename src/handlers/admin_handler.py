# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.

–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç
–∑–∞–¥–∞—á–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –æ—Ç–¥–µ–ª–∞–º–∏
—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from loguru import logger
from datetime import datetime

from .states import AdminStates
from database import DatabaseManager
from .admin.user_management import UserManagementHandler
from .admin.department_management import DepartmentManagementHandler

class AdminHandler:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""

    def __init__(self, report_processor, db_manager, telegram_service, user_management_handler, department_management_handler):
        self.report_processor = report_processor
        self.db_manager = db_manager
        self.telegram_service = telegram_service
        self.user_management_handler = user_management_handler
        self.department_management_handler = department_management_handler

    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handles the /admin command."""
        user_id = update.effective_user.id
        if await self.db_manager.is_admin(user_id):
            return await self.show_admin_panel(update, context)
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ callback_query, —Ç–∞–∫ –∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if update.callback_query:
                await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
            elif update.message:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return ConversationHandler.END

    async def show_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
        from utils.navigation import get_breadcrumb_path, update_context_path
        
        query = update.callback_query
        if query:
            await query.answer()

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        path = update_context_path(context, 'admin')
        breadcrumb = get_breadcrumb_path(path)

        keyboard = [
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users")],
            [InlineKeyboardButton("üóÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="admin_manage_depts")],
            [InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤", callback_data="admin_reports")],
            [InlineKeyboardButton("üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏", callback_data="admin_reminders")],
            [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export")],
            [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_exit")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message_text = (
            f"üìç {breadcrumb}\n\n"
            f"üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        if query:
            await query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        
        return AdminStates.MAIN_MENU
    
    async def handle_reminder_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
        from utils.navigation import get_breadcrumb_path, update_context_path, create_keyboard
        
        query = update.callback_query
        await query.answer()
        data = query.data
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö callback_data
        if data.startswith('schedule_reminder_'):
            if data == 'schedule_reminder_1h':
                await query.edit_message_text(
                    "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å</b>\n\n"
                    "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ 1 —á–∞—Å.",
                    parse_mode='HTML'
                )
            elif data == 'schedule_reminder_tomorrow':
                await query.edit_message_text(
                    "üìÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞ –≤ 9:00</b>\n\n"
                    "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 9:00.",
                    parse_mode='HTML'
                )
            elif data == 'schedule_reminder_weekly':
                await query.edit_message_text(
                    "üìÜ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
                    "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫.",
                    parse_mode='HTML'
                )
            elif data == 'schedule_reminder_custom':
                await query.edit_message_text(
                    "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏</b>\n\n"
                    "üìù –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
                    parse_mode='HTML'
                )
            return AdminStates.MAIN_MENU
        
        elif data.startswith('time_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
            if data == 'time_custom':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                await query.edit_message_text(
                    "‚è∞ <b>–í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏</b>\n\n"
                    "üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
                    parse_mode='HTML'
                )
                return AdminStates.MAIN_MENU
            
            time_value = data.replace('time_', '').replace('_', ':')
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                reminder_settings = await self.db_manager.get_reminder_settings()
                reminder_settings['reminder_time'] = time_value
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                await self.db_manager.update_reminder_settings(reminder_settings)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                auto_enabled = reminder_settings.get('auto_enabled', False)
                reminder_time = reminder_settings.get('reminder_time', '09:00')
                reminder_days = reminder_settings.get('reminder_days', '–ü–Ω,–°—Ä,–ü—Ç')
                
                path = update_context_path(context, 'reminder_settings')
                breadcrumb = get_breadcrumb_path(path)
                
                keyboard = create_keyboard([
                    [(f"{'üîî' if auto_enabled else 'üîï'} –ê–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'–í–ö–õ' if auto_enabled else '–í–´–ö–õ'}", "toggle_auto_reminders")],
                    [(f"‚è∞ –í—Ä–µ–º—è: {reminder_time}", "set_reminder_time")],
                    [(f"üìÖ –î–Ω–∏: {reminder_days}", "set_reminder_days")],
                    [("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "save_reminder_settings")]
                ], path)
                
                await query.edit_message_text(
                    f"üìç {breadcrumb}\n\n"
                    f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                    f"‚úÖ <b>–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_value}</b>\n\n"
                    f"üîß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                    f"‚Ä¢ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if auto_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
                    f"‚Ä¢ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {reminder_time}\n"
                    f"‚Ä¢ <b>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:</b> {reminder_days}\n\n"
                    f"üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
                await query.edit_message_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                    parse_mode='HTML'
                )
            return AdminStates.MAIN_MENU
        
        elif data.startswith('days_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π
            days_mapping = {
                'days_mon_wed_fri': '–ü–Ω,–°—Ä,–ü—Ç',
                'days_tue_thu': '–í—Ç,–ß—Ç', 
                'days_everyday': '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å',
                'days_friday_only': '–¢–æ–ª—å–∫–æ –ø—è—Ç–Ω–∏—Ü–∞'
            }
            
            selected_days = days_mapping.get(data, '–ü–Ω,–°—Ä,–ü—Ç')
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–∏
                reminder_settings = await self.db_manager.get_reminder_settings()
                reminder_settings['reminder_days'] = selected_days
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                await self.db_manager.update_reminder_settings(reminder_settings)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏
                auto_enabled = reminder_settings.get('auto_enabled', False)
                reminder_time = reminder_settings.get('reminder_time', '09:00')
                reminder_days = reminder_settings.get('reminder_days', '–ü–Ω,–°—Ä,–ü—Ç')
                
                path = update_context_path(context, 'reminder_settings')
                breadcrumb = get_breadcrumb_path(path)
                
                keyboard = create_keyboard([
                    [(f"{'üîî' if auto_enabled else 'üîï'} –ê–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'–í–ö–õ' if auto_enabled else '–í–´–ö–õ'}", "toggle_auto_reminders")],
                    [(f"‚è∞ –í—Ä–µ–º—è: {reminder_time}", "set_reminder_time")],
                    [(f"üìÖ –î–Ω–∏: {reminder_days}", "set_reminder_days")],
                    [("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "save_reminder_settings")]
                ], path)
                
                await query.edit_message_text(
                    f"üìç {breadcrumb}\n\n"
                    f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                    f"‚úÖ <b>–î–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {selected_days}</b>\n\n"
                    f"üîß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                    f"‚Ä¢ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if auto_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
                    f"‚Ä¢ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {reminder_time}\n"
                    f"‚Ä¢ <b>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:</b> {reminder_days}\n\n"
                    f"üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–Ω–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
                await query.edit_message_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                    parse_mode='HTML'
                )
            return AdminStates.MAIN_MENU
        
        elif data == 'set_reminder_time':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
            path = update_context_path(context, 'set_reminder_time')
            breadcrumb = get_breadcrumb_path(path)
            
            keyboard = create_keyboard([
                [("üåÖ 09:00", "time_09_00")],
                [("üåû 12:00", "time_12_00")],
                [("üåÜ 18:00", "time_18_00")],
                [("‚öôÔ∏è –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", "time_custom")]
            ], path)
            
            await query.edit_message_text(
                f"üìç {breadcrumb}\n\n"
                f"‚è∞ <b>–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                f"üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"
                f"‚Ä¢ <b>09:00</b> - —É—Ç—Ä–æ–º\n"
                f"‚Ä¢ <b>12:00</b> - –≤ –æ–±–µ–¥\n"
                f"‚Ä¢ <b>18:00</b> - –≤–µ—á–µ—Ä–æ–º\n\n"
                f"üí° –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            return AdminStates.MAIN_MENU
        
        elif data == 'set_reminder_days':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–Ω–µ–π
            path = update_context_path(context, 'set_reminder_days')
            breadcrumb = get_breadcrumb_path(path)
            
            keyboard = create_keyboard([
                [("üìÖ –ü–Ω,–°—Ä,–ü—Ç", "days_mon_wed_fri")],
                [("üìÖ –í—Ç,–ß—Ç", "days_tue_thu")],
                [("üìÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å", "days_everyday")],
                [("üìÖ –¢–æ–ª—å–∫–æ –ø—è—Ç–Ω–∏—Ü–∞", "days_friday_only")],
                [("‚å®Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–Ω–∏", "custom_days_input")]
            ], path)
            
            await query.edit_message_text(
                f"üìç {breadcrumb}\n\n"
                f"üìÖ <b>–í—ã–±–æ—Ä –¥–Ω–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                f"üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"
                f"‚Ä¢ <b>–ü–Ω,–°—Ä,–ü—Ç</b> - —á–µ—Ä–µ–∑ –¥–µ–Ω—å\n"
                f"‚Ä¢ <b>–í—Ç,–ß—Ç</b> - –≤—Ç–æ—Ä–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥\n"
                f"‚Ä¢ <b>–ö–∞–∂–¥—ã–π –¥–µ–Ω—å</b> - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\n"
                f"‚Ä¢ <b>–¢–æ–ª—å–∫–æ –ø—è—Ç–Ω–∏—Ü–∞</b> - –ø–µ—Ä–µ–¥ –¥–µ–¥–ª–∞–π–Ω–æ–º\n\n"
                f"üí° –ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–∏ –¥–Ω–∏:",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            return AdminStates.MAIN_MENU
        
        elif data == 'custom_days_input':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–Ω–µ–π
            await query.edit_message_text(
                "üìÖ <b>–í–≤–æ–¥ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏</b>\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–Ω,–°—Ä,–ü—Ç):",
                parse_mode='HTML'
            )
            return AdminStates.MAIN_MENU
        
        elif data == 'save_reminder_settings':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            try:
                reminder_settings = await self.db_manager.get_reminder_settings()
                await self.db_manager.update_reminder_settings(reminder_settings)
                
                await query.edit_message_text(
                    "üíæ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</b>\n\n"
                    "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
                await query.edit_message_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                    parse_mode='HTML'
                )
            return AdminStates.MAIN_MENU
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –≤—ã–∑–æ–≤ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ callback_data
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        path = update_context_path(context, 'admin_reminders')
        breadcrumb = get_breadcrumb_path(path)
        
        keyboard = create_keyboard([
            [("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º", "reminder_send_all")],
            [("üìã –ù–∞–ø–æ–º–Ω–∏—Ç—å –Ω–µ —Å–¥–∞–≤—à–∏–º", "reminder_send_missing")],
            [("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", "reminder_settings")]
        ], path)
        
        await query.edit_message_text(
            f"üìç {breadcrumb}\n\n"
            f"üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏</b>\n\n"
            f"üìä –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:\n\n"
            f"‚Ä¢ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º</b> - –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞\n"
            f"‚Ä¢ <b>–ù–∞–ø–æ–º–Ω–∏—Ç—å –Ω–µ —Å–¥–∞–≤—à–∏–º</b> - —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –Ω–µ —Å–¥–∞–ª –æ—Ç—á–µ—Ç\n"
            f"‚Ä¢ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        return AdminStates.MAIN_MENU
    
    async def handle_reports_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤."""
        from utils.navigation import get_breadcrumb_path, update_context_path, create_keyboard
        
        query = update.callback_query
        await query.answer()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        path = update_context_path(context, 'admin_reports')
        breadcrumb = get_breadcrumb_path(path)
        
        keyboard = create_keyboard([
            [("üìÖ –û—Ç—á–µ—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é", "reports_current_week")],
            [("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º", "reports_department_stats")],
            [("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "reports_general_stats")],
            [("üîç –ü–æ–∏—Å–∫ –æ—Ç—á–µ—Ç–æ–≤", "reports_search")]
        ], path)
        
        await query.edit_message_text(
            f"üìç {breadcrumb}\n\n"
            f"üìä <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤</b>\n\n"
            f"üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n"
            f"‚Ä¢ <b>–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è</b> - –æ—Ç—á–µ—Ç—ã –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é\n"
            f"‚Ä¢ <b>–ü–æ –æ—Ç–¥–µ–ª–∞–º</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º\n"
            f"‚Ä¢ <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            f"‚Ä¢ <b>–ü–æ–∏—Å–∫</b> - –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—Ç—á–µ—Ç—ã",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        return AdminStates.MAIN_MENU
    
    async def handle_export_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö."""
        from utils.navigation import get_breadcrumb_path, update_context_path, create_keyboard
        
        query = update.callback_query
        await query.answer()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        path = update_context_path(context, 'admin_export')
        breadcrumb = get_breadcrumb_path(path)
        
        keyboard = create_keyboard([
            [("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", "export_excel")],
            [("üìã –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", "export_csv")],
            [("üìä –û—Ç—á–µ—Ç –ø–æ –æ—Ç–¥–µ–ª–∞–º", "export_departments")],
            [("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "export_users")]
        ], path)
        
        await query.edit_message_text(
            f"üìç {breadcrumb}\n\n"
            f"üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            f"üíæ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:\n\n"
            f"‚Ä¢ <b>Excel</b> - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n"
            f"‚Ä¢ <b>CSV</b> - –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
            f"‚Ä¢ <b>–ü–æ –æ—Ç–¥–µ–ª–∞–º</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π\n"
            f"‚Ä¢ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        return AdminStates.MAIN_MENU
    
    async def cancel_admin_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥."""
        await update.message.reply_text(
            "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω.",
            parse_mode='HTML'
        )
        return ConversationHandler.END
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /stats –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        user_id = update.effective_user.id
        if not await self.db_manager.is_admin(user_id):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            total_users = await self.db_manager.get_total_users_count()
            total_reports = await self.db_manager.get_total_reports_count()
            total_departments = await self.db_manager.get_total_departments_count()
            active_users = await self.db_manager.get_active_users_count()
            reports_this_week = await self.db_manager.get_reports_this_week_count()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_message = (
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
                f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
                f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total_users}\n"
                f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n\n"
                f"üè¢ <b>–û—Ç–¥–µ–ª—ã:</b> {total_departments}\n\n"
                f"üìã <b>–û—Ç—á–µ—Ç—ã:</b>\n"
                f"   ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {total_reports}\n"
                f"   ‚Ä¢ –ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é: {reports_this_week}\n\n"
                f"üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
                f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {(active_users/total_users*100):.1f}% (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)\n"
                f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {(total_reports/total_users):.1f} (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)"
            )
            
            await update.message.reply_text(stats_message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML'
            )
    
    async def handle_reminder_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏."""
        query = update.callback_query
        await query.answer()
        data = query.data
        
        if data == 'reminder_send_all':
            await query.edit_message_text(
                "üì§ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ–º</b>\n\n"
                "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º...",
                parse_mode='HTML'
            )
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            
        elif data == 'reminder_send_dept':
            from utils.navigation import get_breadcrumb_path, update_context_path, create_keyboard
            
            path = update_context_path(context, 'reminder_send_dept')
            breadcrumb = get_breadcrumb_path(path)
            
            try:
                departments = await self.db_manager.get_departments()
                if departments:
                    keyboard_buttons = []
                    for dept in departments:
                        keyboard_buttons.append([(f"üè¢ {dept.name}", f"send_reminder_to_dept_{dept.code}")])
                    
                    keyboard = create_keyboard(keyboard_buttons, path)
                    
                    await query.edit_message_text(
                        f"üìç {breadcrumb}\n\n"
                        f"üè¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª</b>\n\n"
                        f"üì§ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞:",
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
                else:
                    await query.edit_message_text(
                        f"üìç {breadcrumb}\n\n"
                        f"üè¢ <b>–û—Ç–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                        f"‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤.",
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–æ–≤: {e}")
                await query.edit_message_text(
                    f"üìç {breadcrumb}\n\n"
                    f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤.",
                    parse_mode='HTML'
                )
            
        elif data == 'reminder_schedule':
            from utils.navigation import get_breadcrumb_path, update_context_path, create_keyboard
            
            path = update_context_path(context, 'reminder_schedule')
            breadcrumb = get_breadcrumb_path(path)
            
            keyboard = create_keyboard([
                [("‚è∞ –ß–µ—Ä–µ–∑ 1 —á–∞—Å", "schedule_reminder_1h")],
                [("üìÖ –ó–∞–≤—Ç—Ä–∞ –≤ 9:00", "schedule_reminder_tomorrow")],
                [("üìÜ –ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "schedule_reminder_weekly")],
                [("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è", "schedule_reminder_custom")]
            ], path)
            
            await query.edit_message_text(
                f"üìç {breadcrumb}\n\n"
                f"‚è∞ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                f"üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
                f"‚Ä¢ <b>–ß–µ—Ä–µ–∑ 1 —á–∞—Å</b> - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                f"‚Ä¢ <b>–ó–∞–≤—Ç—Ä–∞ –≤ 9:00</b> - –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                f"‚Ä¢ <b>–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫</b> - –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ\n"
                f"‚Ä¢ <b>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è</b> - –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
        elif data == 'reminder_send_missing':
            await query.edit_message_text(
                "üìã <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —Å–¥–∞–≤—à–∏–º</b>\n\n"
                "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –±–µ–∑ –æ—Ç—á–µ—Ç–æ–≤...",
                parse_mode='HTML'
            )
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            
        elif data == 'reminder_settings':
            from utils.navigation import get_breadcrumb_path, update_context_path, create_keyboard
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            path = update_context_path(context, 'reminder_settings')
            breadcrumb = get_breadcrumb_path(path)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            try:
                reminder_settings = await self.db_manager.get_reminder_settings()
                auto_enabled = reminder_settings.get('auto_enabled', False)
                reminder_time = reminder_settings.get('reminder_time', '09:00')
                reminder_days = reminder_settings.get('reminder_days', '–ü–Ω,–°—Ä,–ü—Ç')
                
                keyboard = create_keyboard([
                    [(f"{'üîî' if auto_enabled else 'üîï'} –ê–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'–í–ö–õ' if auto_enabled else '–í–´–ö–õ'}", "toggle_auto_reminders")],
                    [(f"‚è∞ –í—Ä–µ–º—è: {reminder_time}", "set_reminder_time")],
                    [(f"üìÖ –î–Ω–∏: {reminder_days}", "set_reminder_days")],
                    [("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "save_reminder_settings")]
                ], path)
                
                await query.edit_message_text(
                    f"üìç {breadcrumb}\n\n"
                    f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                    f"üîß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                    f"‚Ä¢ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if auto_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
                    f"‚Ä¢ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {reminder_time}\n"
                    f"‚Ä¢ <b>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:</b> {reminder_days}\n\n"
                    f"üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
                await query.edit_message_text(
                    f"üìç {breadcrumb}\n\n"
                    f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode='HTML'
                )
        
        elif data == 'toggle_auto_reminders':
            from utils.navigation import get_breadcrumb_path, update_context_path, create_keyboard
            
            path = update_context_path(context, 'reminder_settings')
            breadcrumb = get_breadcrumb_path(path)
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                reminder_settings = await self.db_manager.get_reminder_settings()
                current_auto = reminder_settings.get('auto_enabled', False)
                
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                new_settings = reminder_settings.copy()
                new_settings['auto_enabled'] = not current_auto
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                await self.db_manager.update_reminder_settings(new_settings)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                auto_enabled = new_settings.get('auto_enabled', False)
                reminder_time = new_settings.get('reminder_time', '09:00')
                reminder_days = new_settings.get('reminder_days', '–ü–Ω,–°—Ä,–ü—Ç')
                
                keyboard = create_keyboard([
                    [(f"{'üîî' if auto_enabled else 'üîï'} –ê–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'–í–ö–õ' if auto_enabled else '–í–´–ö–õ'}", "toggle_auto_reminders")],
                    [(f"‚è∞ –í—Ä–µ–º—è: {reminder_time}", "set_reminder_time")],
                    [(f"üìÖ –î–Ω–∏: {reminder_days}", "set_reminder_days")],
                    [("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "save_reminder_settings")]
                ], path)
                
                await query.edit_message_text(
                    f"üìç {breadcrumb}\n\n"
                    f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                    f"üîß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                    f"‚Ä¢ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if auto_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
                    f"‚Ä¢ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {reminder_time}\n"
                    f"‚Ä¢ <b>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:</b> {reminder_days}\n\n"
                    f"üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
                await query.edit_message_text(
                    f"üìç {breadcrumb}\n\n"
                    f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                    parse_mode='HTML'
                )
        
        elif data.startswith('send_reminder_to_dept_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ—Ç–¥–µ–ª—É
            dept_code = data.replace('send_reminder_to_dept_', '')
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–¥–µ–ª–µ
                departments = await self.db_manager.get_departments()
                dept_name = None
                for dept in departments:
                    if dept.code == dept_code:
                        dept_name = dept.name
                        break
                
                if dept_name:
                    await query.edit_message_text(
                        f"üì§ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–¥–µ–ª—É</b>\n\n"
                        f"üè¢ <b>–û—Ç–¥–µ–ª:</b> {dept_name}\n\n"
                        f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ—Ç–¥–µ–ª–∞...",
                        parse_mode='HTML'
                    )
                    
                    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç–¥–µ–ª—É
                    # result = await self.reminder_service.send_reminder_to_department(dept_code)
                    
                    await query.edit_message_text(
                        f"üì§ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>\n\n"
                        f"üè¢ <b>–û—Ç–¥–µ–ª:</b> {dept_name}\n\n"
                        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ—Ç–¥–µ–ª–∞.",
                        parse_mode='HTML'
                    )
                else:
                    await query.edit_message_text(
                        f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                        f"–û—Ç–¥–µ–ª —Å –∫–æ–¥–æ–º {dept_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–¥–µ–ª—É {dept_code}: {e}")
                await query.edit_message_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—É.",
                    parse_mode='HTML'
                )
        
        elif data == 'set_reminder_time':
            from utils.navigation import get_breadcrumb_path, update_context_path, create_keyboard
            
            path = update_context_path(context, 'set_reminder_time')
            breadcrumb = get_breadcrumb_path(path)
            
            keyboard = create_keyboard([
                [("üïò 09:00", "time_09_00"), ("üïô 10:00", "time_10_00")],
                [("üïõ 12:00", "time_12_00"), ("üïê 13:00", "time_13_00")],
                [("üïï 18:00", "time_18_00"), ("üïò 21:00", "time_21_00")],
                [("‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è", "custom_time_input")]
            ], path)
            
            await query.edit_message_text(
                f"üìç {breadcrumb}\n\n"
                f"‚è∞ <b>–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                f"üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"
                f"‚Ä¢ <b>09:00</b> - —É—Ç—Ä–æ–º\n"
                f"‚Ä¢ <b>12:00</b> - –≤ –æ–±–µ–¥\n"
                f"‚Ä¢ <b>18:00</b> - –≤–µ—á–µ—Ä–æ–º\n\n"
                f"üí° –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        
        elif data == 'set_reminder_days':
            from utils.navigation import get_breadcrumb_path, update_context_path, create_keyboard
            
            path = update_context_path(context, 'set_reminder_days')
            breadcrumb = get_breadcrumb_path(path)
            
            keyboard = create_keyboard([
                [("üìÖ –ü–Ω,–°—Ä,–ü—Ç", "days_mon_wed_fri")],
                [("üìÖ –í—Ç,–ß—Ç", "days_tue_thu")],
                [("üìÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å", "days_everyday")],
                [("üìÖ –¢–æ–ª—å–∫–æ –ø—è—Ç–Ω–∏—Ü–∞", "days_friday_only")],
                [("‚å®Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–Ω–∏", "custom_days_input")]
            ], path)
            
            await query.edit_message_text(
                f"üìç {breadcrumb}\n\n"
                f"üìÖ <b>–í—ã–±–æ—Ä –¥–Ω–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                f"üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"
                f"‚Ä¢ <b>–ü–Ω,–°—Ä,–ü—Ç</b> - —á–µ—Ä–µ–∑ –¥–µ–Ω—å\n"
                f"‚Ä¢ <b>–í—Ç,–ß—Ç</b> - –≤—Ç–æ—Ä–Ω–∏–∫ –∏ —á–µ—Ç–≤–µ—Ä–≥\n"
                f"‚Ä¢ <b>–ö–∞–∂–¥—ã–π –¥–µ–Ω—å</b> - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\n"
                f"‚Ä¢ <b>–¢–æ–ª—å–∫–æ –ø—è—Ç–Ω–∏—Ü–∞</b> - –ø–µ—Ä–µ–¥ –¥–µ–¥–ª–∞–π–Ω–æ–º\n\n"
                f"üí° –ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–∏ –¥–Ω–∏:",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        
        elif data == 'save_reminder_settings':
            from utils.navigation import get_breadcrumb_path, update_context_path, create_keyboard
            
            path = update_context_path(context, 'reminder_settings')
            breadcrumb = get_breadcrumb_path(path)
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                reminder_settings = await self.db_manager.get_reminder_settings()
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                success = await self.db_manager.update_reminder_settings(reminder_settings)
                
                if success:
                    auto_enabled = reminder_settings.get('auto_enabled', False)
                    reminder_time = reminder_settings.get('reminder_time', '09:00')
                    reminder_days = reminder_settings.get('reminder_days', '–ü–Ω,–°—Ä,–ü—Ç')
                    
                    keyboard = create_keyboard([
                        [(f"{'üîî' if auto_enabled else 'üîï'} –ê–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'–í–ö–õ' if auto_enabled else '–í–´–ö–õ'}", "toggle_auto_reminders")],
                        [(f"‚è∞ –í—Ä–µ–º—è: {reminder_time}", "set_reminder_time")],
                        [(f"üìÖ –î–Ω–∏: {reminder_days}", "set_reminder_days")],
                        [("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "save_reminder_settings")]
                    ], path)
                    
                    await query.edit_message_text(
                        f"üìç {breadcrumb}\n\n"
                        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                        f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"
                        f"üîß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                        f"‚Ä¢ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if auto_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
                        f"‚Ä¢ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {reminder_time}\n"
                        f"‚Ä¢ <b>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:</b> {reminder_days}\n\n"
                        f"üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
                else:
                    await query.edit_message_text(
                        f"üìç {breadcrumb}\n\n"
                        f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\n"
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
                await query.edit_message_text(
                    f"üìç {breadcrumb}\n\n"
                    f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                     parse_mode='HTML'
                 )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        elif data.startswith('time_'):
            from utils.navigation import get_breadcrumb_path, update_context_path, create_keyboard
            
            path = update_context_path(context, 'reminder_settings')
            breadcrumb = get_breadcrumb_path(path)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ callback data
            time_map = {
                'time_09_00': '09:00',
                'time_10_00': '10:00', 
                'time_12_00': '12:00',
                'time_13_00': '13:00',
                'time_18_00': '18:00',
                'time_21_00': '21:00'
            }
            
            selected_time = time_map.get(data, '09:00')
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                reminder_settings = await self.db_manager.get_reminder_settings()
                reminder_settings['reminder_time'] = selected_time
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                await self.db_manager.update_reminder_settings(reminder_settings)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                auto_enabled = reminder_settings.get('auto_enabled', False)
                reminder_time = reminder_settings.get('reminder_time', '09:00')
                reminder_days = reminder_settings.get('reminder_days', '–ü–Ω,–°—Ä,–ü—Ç')
                
                keyboard = create_keyboard([
                    [(f"{'üîî' if auto_enabled else 'üîï'} –ê–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'–í–ö–õ' if auto_enabled else '–í–´–ö–õ'}", "toggle_auto_reminders")],
                    [(f"‚è∞ –í—Ä–µ–º—è: {reminder_time}", "set_reminder_time")],
                    [(f"üìÖ –î–Ω–∏: {reminder_days}", "set_reminder_days")],
                    [("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "save_reminder_settings")]
                ], path)
                
                await query.edit_message_text(
                    f"üìç {breadcrumb}\n\n"
                    f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                    f"‚úÖ <b>–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {selected_time}</b>\n\n"
                    f"üîß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                    f"‚Ä¢ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if auto_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
                    f"‚Ä¢ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {reminder_time}\n"
                    f"‚Ä¢ <b>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:</b> {reminder_days}\n\n"
                    f"üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
                await query.edit_message_text(
                    f"üìç {breadcrumb}\n\n"
                    f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                    parse_mode='HTML'
                )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π
        elif data.startswith('days_'):
            from utils.navigation import get_breadcrumb_path, update_context_path, create_keyboard
            
            path = update_context_path(context, 'reminder_settings')
            breadcrumb = get_breadcrumb_path(path)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–Ω–∏ –∏–∑ callback data
            days_map = {
                'days_mon_wed_fri': '–ü–Ω,–°—Ä,–ü—Ç',
                'days_tue_thu': '–í—Ç,–ß—Ç',
                'days_everyday': '–ü–Ω,–í—Ç,–°—Ä,–ß—Ç,–ü—Ç,–°–±,–í—Å',
                'days_friday_only': '–ü—Ç'
            }
            
            selected_days = days_map.get(data, '–ü–Ω,–°—Ä,–ü—Ç')
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–∏
                reminder_settings = await self.db_manager.get_reminder_settings()
                reminder_settings['reminder_days'] = selected_days
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                await self.db_manager.update_reminder_settings(reminder_settings)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏
                auto_enabled = reminder_settings.get('auto_enabled', False)
                reminder_time = reminder_settings.get('reminder_time', '09:00')
                reminder_days = reminder_settings.get('reminder_days', '–ü–Ω,–°—Ä,–ü—Ç')
                
                keyboard = create_keyboard([
                    [(f"{'üîî' if auto_enabled else 'üîï'} –ê–≤—Ç–æ–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'–í–ö–õ' if auto_enabled else '–í–´–ö–õ'}", "toggle_auto_reminders")],
                    [(f"‚è∞ –í—Ä–µ–º—è: {reminder_time}", "set_reminder_time")],
                    [(f"üìÖ –î–Ω–∏: {reminder_days}", "set_reminder_days")],
                    [("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "save_reminder_settings")]
                ], path)
                
                await query.edit_message_text(
                    f"üìç {breadcrumb}\n\n"
                    f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                    f"‚úÖ <b>–î–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {selected_days}</b>\n\n"
                    f"üîß –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
                    f"‚Ä¢ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {'–í–∫–ª—é—á–µ–Ω—ã' if auto_enabled else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
                    f"‚Ä¢ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {reminder_time}\n"
                    f"‚Ä¢ <b>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:</b> {reminder_days}\n\n"
                    f"üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–Ω–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
                await query.edit_message_text(
                    f"üìç {breadcrumb}\n\n"
                    f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
                    parse_mode='HTML'
                )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        elif data == 'custom_time_input':
            from utils.navigation import get_breadcrumb_path, update_context_path, create_keyboard
            
            path = update_context_path(context, 'custom_time_input')
            breadcrumb = get_breadcrumb_path(path)
            
            await query.edit_message_text(
                f"üìç {breadcrumb}\n\n"
                f"‚è∞ <b>–í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
                f"üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n\n"
                f"üí° –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 00:00 –¥–æ 23:59",
                parse_mode='HTML'
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
            context.user_data['waiting_for_time_input'] = True
        
        return AdminStates.MAIN_MENU
    
    async def handle_reports_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç—á–µ—Ç–∞–º–∏."""
        query = update.callback_query
        await query.answer()
        data = query.data
        
        if data == 'reports_current_week':
            try:
                reports = await self.db_manager.get_reports_current_week()
                if reports:
                    report_text = "üìÖ <b>–û—Ç—á–µ—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é</b>\n\n"
                    for report in reports[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—Ç—á–µ—Ç–æ–≤
                        user_name = report.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                        department = report.get('department', '–ù–µ —É–∫–∞–∑–∞–Ω')
                        date = report.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        report_text += f"üë§ <b>{user_name}</b> ({department})\n"
                        report_text += f"üìÖ {date}\n\n"
                    
                    if len(reports) > 10:
                        report_text += f"... –∏ –µ—â–µ {len(reports) - 10} –æ—Ç—á–µ—Ç–æ–≤\n"
                    
                    report_text += f"\nüìä <b>–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é:</b> {len(reports)}"
                else:
                    report_text = "üìÖ <b>–û—Ç—á–µ—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é</b>\n\nüì≠ –û—Ç—á–µ—Ç–æ–≤ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –ø–æ–∫–∞ –Ω–µ—Ç."
                
                await query.edit_message_text(report_text, parse_mode='HTML')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {e}")
                await query.edit_message_text(
                    "üìÖ <b>–û—Ç—á–µ—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é</b>\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–æ–≤.",
                    parse_mode='HTML'
                )
        elif data == 'reports_department_stats':
            try:
                dept_stats = await self.db_manager.get_department_statistics()
                if dept_stats:
                    stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º</b>\n\n"
                    for dept in dept_stats:
                        dept_name = dept.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–¥–µ–ª')
                        user_count = dept.get('user_count', 0)
                        report_count = dept.get('report_count', 0)
                        stats_text += f"üè¢ <b>{dept_name}</b>\n"
                        stats_text += f"   üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {user_count}\n"
                        stats_text += f"   üìã –û—Ç—á–µ—Ç–æ–≤: {report_count}\n\n"
                else:
                    stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º</b>\n\nüì≠ –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç."
                
                await query.edit_message_text(stats_text, parse_mode='HTML')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–¥–µ–ª–æ–≤: {e}")
                await query.edit_message_text(
                    "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º</b>\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                    parse_mode='HTML'
                )
        elif data == 'reports_general_stats':
            try:
                general_stats = await self.db_manager.get_general_statistics()
                total_users = general_stats.get('total_users', 0)
                total_reports = general_stats.get('total_reports', 0)
                active_users = general_stats.get('active_users', 0)
                avg_reports = general_stats.get('avg_reports_per_user', 0)
                
                stats_text = (
                    "üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                    f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
                    f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
                    f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n\n"
                    f"üìã <b>–û—Ç—á–µ—Ç—ã:</b>\n"
                    f"   ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: {total_reports}\n"
                    f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {avg_reports:.1f}\n\n"
                    f"üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
                    f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {(active_users/total_users*100):.1f}%" if total_users > 0 else "   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: 0%"
                )
                
                await query.edit_message_text(stats_text, parse_mode='HTML')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                await query.edit_message_text(
                    "üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                    parse_mode='HTML'
                )
        elif data == 'reports_view_all':
            try:
                all_reports = await self.db_manager.get_all_reports_with_details()
                if all_reports:
                    report_text = "üìã <b>–í—Å–µ –æ—Ç—á–µ—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ</b>\n\n"
                    for i, report in enumerate(all_reports[:15]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 –æ—Ç—á–µ—Ç–æ–≤
                        user_name = report.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                        department = report.get('department', '–ù–µ —É–∫–∞–∑–∞–Ω')
                        date = report.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        report_text += f"{i+1}. üë§ <b>{user_name}</b> ({department})\n"
                        report_text += f"   üìÖ {date}\n\n"
                    
                    if len(all_reports) > 15:
                        report_text += f"... –∏ –µ—â–µ {len(all_reports) - 15} –æ—Ç—á–µ—Ç–æ–≤\n\n"
                    
                    report_text += f"üìä <b>–í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤:</b> {len(all_reports)}"
                else:
                    report_text = "üìã <b>–í—Å–µ –æ—Ç—á–µ—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ</b>\n\nüì≠ –û—Ç—á–µ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç."
                
                await query.edit_message_text(report_text, parse_mode='HTML')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
                await query.edit_message_text(
                    "üìã <b>–í—Å–µ –æ—Ç—á–µ—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–µ</b>\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–æ–≤.",
                    parse_mode='HTML'
                )
        elif data == 'reports_by_user':
            from utils.navigation import get_breadcrumb_path, update_context_path, create_keyboard
            
            path = update_context_path(context, 'reports_by_user')
            breadcrumb = get_breadcrumb_path(path)
            
            try:
                users = await self.db_manager.get_employees()
                if users:
                    keyboard_buttons = []
                    for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        keyboard_buttons.append([(f"üë§ {user.full_name}", f"view_user_reports_{user.id}")])
                    
                    keyboard = create_keyboard(keyboard_buttons, path)
                    
                    await query.edit_message_text(
                        f"üìç {breadcrumb}\n\n"
                        f"üë§ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                        f"üìã –ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –æ—Ç—á–µ—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
                else:
                    await query.edit_message_text(
                        f"üìç {breadcrumb}\n\n"
                        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                        f"‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
                await query.edit_message_text(
                    f"üìç {breadcrumb}\n\n"
                    f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                    parse_mode='HTML'
                )
        elif data == 'reports_by_department':
            from utils.navigation import get_breadcrumb_path, update_context_path, create_keyboard
            
            path = update_context_path(context, 'reports_by_department')
            breadcrumb = get_breadcrumb_path(path)
            
            try:
                departments = await self.db_manager.get_departments()
                if departments:
                    keyboard_buttons = []
                    for dept in departments:
                        keyboard_buttons.append([(f"üè¢ {dept.name}", f"view_dept_reports_{dept.code}")])
                    
                    keyboard = create_keyboard(keyboard_buttons, path)
                    
                    await query.edit_message_text(
                        f"üìç {breadcrumb}\n\n"
                        f"üè¢ <b>–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª</b>\n\n"
                        f"üìã –ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –æ—Ç—á–µ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞:",
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
                else:
                    await query.edit_message_text(
                        f"üìç {breadcrumb}\n\n"
                        f"üè¢ <b>–û—Ç–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                        f"‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤.",
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–æ–≤: {e}")
                await query.edit_message_text(
                    f"üìç {breadcrumb}\n\n"
                    f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤.",
                    parse_mode='HTML'
                )
        elif data == 'reports_export':
            try:
                await query.edit_message_text(
                    "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤</b>\n\n"
                    "‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–∞–º–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...",
                    parse_mode='HTML'
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                reports_data = await self.db_manager.get_all_reports_for_export()
                
                if reports_data:
                    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–∞–º–∏
                    excel_file = await self.report_processor.create_reports_export(reports_data)
                    
                    if excel_file:
                        await query.edit_message_text(
                            "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤</b>\n\n"
                            f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                            f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {len(reports_data)}\n\n"
                            f"üìé –§–∞–π–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
                            parse_mode='HTML'
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                        with open(excel_file, 'rb') as file:
                            await context.bot.send_document(
                                chat_id=query.message.chat_id,
                                document=file,
                                filename=f"all_reports_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                                caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤"
                            )
                    else:
                        await query.edit_message_text(
                            "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤</b>\n\n"
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                            parse_mode='HTML'
                        )
                else:
                    await query.edit_message_text(
                        "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤</b>\n\n"
                        "üì≠ –ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–æ–≤: {e}")
                await query.edit_message_text(
                    "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤</b>\n\n"
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–æ–≤.",
                    parse_mode='HTML'
                )
        elif data == 'reports_search':
            from utils.navigation import get_breadcrumb_path, update_context_path, create_keyboard
            
            path = update_context_path(context, 'reports_search')
            breadcrumb = get_breadcrumb_path(path)
            
            keyboard = create_keyboard([
                [("üë§ –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", "search_by_user")],
                [("üè¢ –ü–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—É", "search_by_department")],
                [("üìÖ –ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ", "search_by_date")],
                [("üî§ –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É", "search_by_text")]
            ], path)
            
            await query.edit_message_text(
                f"üìç {breadcrumb}\n\n"
                f"üîç <b>–ü–æ–∏—Å–∫ –æ—Ç—á–µ—Ç–æ–≤</b>\n\n"
                f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:\n\n"
                f"‚Ä¢ <b>–ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b> - –Ω–∞–π—Ç–∏ –æ—Ç—á–µ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
                f"‚Ä¢ <b>–ü–æ –æ—Ç–¥–µ–ª—É</b> - –æ—Ç—á–µ—Ç—ã –≤—Å–µ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\n"
                f"‚Ä¢ <b>–ü–æ –¥–∞—Ç–µ</b> - –æ—Ç—á–µ—Ç—ã –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
                f"‚Ä¢ <b>–ü–æ —Ç–µ–∫—Å—Ç—É</b> - –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –æ—Ç—á–µ—Ç–æ–≤",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        
        return AdminStates.MAIN_MENU
    
    async def handle_export_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞."""
        query = update.callback_query
        await query.answer()
        data = query.data
        
        if data == 'export_excel':
            try:
                await query.edit_message_text(
                    "üìÑ <b>–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel</b>\n\n"
                    "‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º Excel —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–∞–º–∏...",
                    parse_mode='HTML'
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                reports_data = await self.db_manager.get_all_reports_for_export()
                
                if reports_data:
                    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
                    excel_file = await self.report_processor.create_excel_export(reports_data)
                    
                    if excel_file:
                        await query.edit_message_text(
                            "üìÑ <b>–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel</b>\n\n"
                            f"‚úÖ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                            f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(reports_data)}\n\n"
                            f"üìé –§–∞–π–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
                            parse_mode='HTML'
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                        with open(excel_file, 'rb') as file:
                            await context.bot.send_document(
                                chat_id=query.message.chat_id,
                                document=file,
                                filename=f"reports_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                                caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel"
                            )
                    else:
                        await query.edit_message_text(
                            "üìÑ <b>–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel</b>\n\n"
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞.",
                            parse_mode='HTML'
                        )
                else:
                    await query.edit_message_text(
                        "üìÑ <b>–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel</b>\n\n"
                        "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}")
                await query.edit_message_text(
                    "üìÑ <b>–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel</b>\n\n"
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.",
                    parse_mode='HTML'
                )
        elif data == 'export_csv':
            try:
                await query.edit_message_text(
                    "üìã <b>–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV</b>\n\n"
                    "‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º CSV —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–∞–º–∏...",
                    parse_mode='HTML'
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                reports_data = await self.db_manager.get_all_reports_for_export()
                
                if reports_data:
                    # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª
                    csv_file = await self.report_processor.create_csv_export(reports_data)
                    
                    if csv_file:
                        await query.edit_message_text(
                            "üìã <b>–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV</b>\n\n"
                            f"‚úÖ CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                            f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(reports_data)}\n\n"
                            f"üìé –§–∞–π–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
                            parse_mode='HTML'
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                        with open(csv_file, 'rb') as file:
                            await context.bot.send_document(
                                chat_id=query.message.chat_id,
                                document=file,
                                filename=f"reports_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                                caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
                            )
                    else:
                        await query.edit_message_text(
                            "üìã <b>–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV</b>\n\n"
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞.",
                            parse_mode='HTML'
                        )
                else:
                    await query.edit_message_text(
                        "üìã <b>–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV</b>\n\n"
                        "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {e}")
                await query.edit_message_text(
                    "üìã <b>–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV</b>\n\n"
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.",
                    parse_mode='HTML'
                )
        elif data == 'export_departments':
            try:
                await query.edit_message_text(
                    "üìä <b>–û—Ç—á–µ—Ç –ø–æ –æ—Ç–¥–µ–ª–∞–º</b>\n\n"
                    "‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –æ—Ç–¥–µ–ª–∞–º...",
                    parse_mode='HTML'
                )
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ç–¥–µ–ª–∞–º
                dept_stats = await self.db_manager.get_detailed_department_statistics()
                
                if dept_stats:
                    report_text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ—Ç–¥–µ–ª–∞–º</b>\n\n"
                    
                    for dept in dept_stats:
                        dept_name = dept.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–¥–µ–ª')
                        user_count = dept.get('user_count', 0)
                        report_count = dept.get('report_count', 0)
                        active_users = dept.get('active_users', 0)
                        last_report = dept.get('last_report_date', '–ù–∏–∫–æ–≥–¥–∞')
                        
                        report_text += f"üè¢ <b>{dept_name}</b>\n"
                        report_text += f"   üë• –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {user_count}\n"
                        report_text += f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
                        report_text += f"   üìã –û—Ç—á–µ—Ç–æ–≤: {report_count}\n"
                        report_text += f"   üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç: {last_report}\n"
                        
                        if user_count > 0:
                            activity_rate = (active_users / user_count) * 100
                            report_text += f"   üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_rate:.1f}%\n"
                        
                        report_text += "\n"
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
                    report_file = await self.report_processor.create_department_report(dept_stats)
                    
                    await query.edit_message_text(report_text[:4000], parse_mode='HTML')  # Telegram limit
                    
                    if report_file:
                        with open(report_file, 'rb') as file:
                            await context.bot.send_document(
                                chat_id=query.message.chat_id,
                                document=file,
                                filename=f"department_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                                caption="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ—Ç–¥–µ–ª–∞–º"
                            )
                else:
                    await query.edit_message_text(
                        "üìä <b>–û—Ç—á–µ—Ç –ø–æ –æ—Ç–¥–µ–ª–∞–º</b>\n\n"
                        "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ—Ç–¥–µ–ª–∞–º.",
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º: {e}")
                await query.edit_message_text(
                    "üìä <b>–û—Ç—á–µ—Ç –ø–æ –æ—Ç–¥–µ–ª–∞–º</b>\n\n"
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.",
                    parse_mode='HTML'
                )
        elif data == 'export_users':
            try:
                await query.edit_message_text(
                    "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                    "‚è≥ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
                    parse_mode='HTML'
                )
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users_data = await self.db_manager.get_all_users_for_export()
                
                if users_data:
                    users_text = "üë• <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                    
                    for user in users_data[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        username = user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')
                        full_name = user.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                        department = user.get('department', '–ù–µ —É–∫–∞–∑–∞–Ω')
                        is_admin = user.get('is_admin', False)
                        is_active = user.get('is_active', True)
                        last_activity = user.get('last_activity', '–ù–∏–∫–æ–≥–¥–∞')
                        
                        status_emoji = "üëë" if is_admin else ("‚úÖ" if is_active else "‚ùå")
                        
                        users_text += f"{status_emoji} <b>{full_name}</b>\n"
                        users_text += f"   üì± @{username}\n"
                        users_text += f"   üè¢ {department}\n"
                        users_text += f"   üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n\n"
                    
                    if len(users_data) > 20:
                        users_text += f"... –∏ –µ—â–µ {len(users_data) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                    
                    users_text += f"üìä <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(users_data)}"
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    users_file = await self.report_processor.create_users_export(users_data)
                    
                    await query.edit_message_text(users_text[:4000], parse_mode='HTML')  # Telegram limit
                    
                    if users_file:
                        with open(users_file, 'rb') as file:
                            await context.bot.send_document(
                                chat_id=query.message.chat_id,
                                document=file,
                                filename=f"users_list_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                                caption="üë• –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                            )
                else:
                    await query.edit_message_text(
                        "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                        "üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
                await query.edit_message_text(
                    "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                    parse_mode='HTML'
                )
        
        return AdminStates.MAIN_MENU

    async def handle_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handles all admin-related callbacks."""
        query = update.callback_query
        await query.answer()
        data = query.data

        if data.startswith('admin_user_'):
            return await self.user_management_handler.handle_callback(update, context)
        elif data.startswith('admin_dept_'):
            return await self.department_management_handler.handle_callback(update, context)
        elif data == 'admin_back_to_main_menu':
            return await self.show_admin_panel(update, context)
        elif data == 'admin_back':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            from utils.navigation import go_back_path
            path = go_back_path(context)
            if not path or path[-1] == 'admin':
                return await self.show_admin_panel(update, context)
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
                return await self.show_admin_panel(update, context)

        return await self.handle_main_menu_callback(update, context)

    async def handle_main_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏."""
        query = update.callback_query
        await query.answer()
        data = query.data

        if data == 'admin_manage_users':
            return await self.user_management_handler.show_user_list(update, context)
        elif data == 'admin_manage_depts':
            return await self.department_management_handler.show_department_list(update, context)
        elif data == 'admin_reports':
            return await self.handle_reports_callback(update, context)
        elif data == 'admin_reminders':
            return await self.handle_reminder_callback(update, context)
        elif data == 'admin_export':
            return await self.handle_export_callback(update, context)
        elif data == 'export_reports':
            return await self.handle_export_action(update, context, 'reports')
        elif data == 'export_users':
            return await self.handle_export_action(update, context, 'users')
        elif data == 'export_departments':
            return await self.handle_export_action(update, context, 'departments')
        elif data == 'export_all_data':
            return await self.handle_export_action(update, context, 'all_data')
        elif data == 'export_stats':
            return await self.handle_export_action(update, context, 'stats')
        elif data.startswith('reminder_'):
            return await self.handle_reminder_action(update, context)
        elif data.startswith('reports_'):
            return await self.handle_reports_action(update, context)
        elif data.startswith('export_'):
            return await self.handle_export_action(update, context)
        elif data == 'admin_exit':
            await query.edit_message_text(
                "‚úÖ <b>–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</b>\n\n"
                "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                parse_mode='HTML'
            )
            return ConversationHandler.END
        
        return AdminStates.MAIN_MENU