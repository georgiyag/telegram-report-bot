from datetime import datetime, timedelta
from typing import List, Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, 
    ConversationHandler, 
    CommandHandler, 
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from loguru import logger

from config import settings, MESSAGES
from services.report_processor import ReportProcessor
from utils.date_utils import get_current_week_range, get_week_range
from .states import AdminStates, get_admin_main_keyboard, get_wizard_navigation_keyboard, get_confirmation_keyboard, get_delete_confirmation_keyboard
from database import DatabaseManager
from models.department import Employee, Department

from services.telegram_service import TelegramService

class AdminHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, report_processor: ReportProcessor, db_manager: DatabaseManager, telegram_service: TelegramService):
        self.report_processor = report_processor
        self.db_manager = db_manager
        self.telegram_service = telegram_service
    
    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id in settings.get_admin_ids()
    
    async def _is_admin_async(self, user_id: int) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∫–æ–Ω—Ñ–∏–≥, –∏ –ë–î)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª (–æ—Å–Ω–æ–≤–Ω—ã–µ –∞–¥–º–∏–Ω—ã)
        if user_id in settings.get_admin_ids():
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            employee = await self.db_manager.get_employee_by_user_id(user_id)
            return employee and employee.is_admin and employee.is_active and not employee.is_blocked
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        user = update.effective_user
        
        if not await self._is_admin_async(user.id):
            if update.callback_query:
                await update.callback_query.edit_message_text(MESSAGES["unauthorized"])
            elif update.message:
                await update.message.reply_text(MESSAGES["unauthorized"])
            return ConversationHandler.END
        
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.id} –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        
        admin_text = (
            f"üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=admin_text,
                reply_markup=get_admin_main_keyboard(),
                parse_mode='HTML'
            )
        elif update.message:
            await update.message.reply_text(
                text=admin_text,
                reply_markup=get_admin_main_keyboard(),
                parse_mode='HTML'
            )
        
        return AdminStates.MAIN_MENU
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user = update.effective_user
        
        if not await self._is_admin_async(user.id):
            await update.message.reply_text(MESSAGES["unauthorized"])
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        week_start, week_end = get_current_week_dates()
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤</b>

<b>–ù–µ–¥–µ–ª—è:</b> {week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m.%Y')}

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: 0
‚Ä¢ –û—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: 0
‚Ä¢ –û—Ç—á–µ—Ç—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: 0
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 0%

‚è∞ <b>–ü–æ –≤—Ä–µ–º–µ–Ω–∏:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è: 0
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º: 0

üèÜ <b>–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b>
(–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö)"""
        
        await update.message.reply_text(stats_text, parse_mode='HTML')
    
    async def handle_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        logger.info(f"Admin callback received: {query.data} from user {user_id}")
        
        if not await self._is_admin_async(user_id):
            await query.edit_message_text(MESSAGES["unauthorized"])
            return ConversationHandler.END
        
        if query.data == "admin_view_reports":
            return await self._show_reports_menu(query)
        
        elif query.data == "admin_send_reminder":
            return await self._send_reminder_menu(query)
        
        elif query.data == "admin_manage_users":
            return await self._manage_users_menu(query)
        
        elif query.data == "admin_export_data":
            return await self._export_data_menu(query)
        
        elif query.data == "admin_close":
            await query.edit_message_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")
            return ConversationHandler.END
        
        elif query.data == "admin_back":
            await query.edit_message_text(
                f"üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_admin_main_keyboard(),
                parse_mode='HTML'
            )
            return AdminStates.MAIN_MENU
        
        return AdminStates.MAIN_MENU
    
    async def _show_reports_menu(self, query) -> int:
        """–ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="reports_current_week")],
            [InlineKeyboardButton("üìÖ –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è", callback_data="reports_last_week")],
            [InlineKeyboardButton("üìä –°–≤–æ–¥–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º", callback_data="reports_by_department")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É", callback_data="reports_search_user")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            "üìä <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —Ç–∏–ø –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.VIEW_REPORTS
    
    async def _send_reminder_menu(self, query) -> int:
        """–ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        keyboard = [
            [InlineKeyboardButton("üì¢ –í—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º", callback_data="reminder_all")],
            [InlineKeyboardButton("‚ö†Ô∏è –ù–µ —Å–¥–∞–≤—à–∏–º –æ—Ç—á–µ—Ç", callback_data="reminder_missing")],
            [InlineKeyboardButton("üè¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ—Ç–¥–µ–ª—É", callback_data="reminder_department")],
            [InlineKeyboardButton("üë§ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É", callback_data="reminder_user")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            "üì¢ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.SEND_REMINDER
    
    async def _manage_users_menu(self, query) -> int:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list_all")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="users_add_wizard")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="users_edit")],
            [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="users_block")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="users_delete")],
            [InlineKeyboardButton("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_rights_manage")],
            [InlineKeyboardButton("üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="departments_manage")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.MANAGE_USERS
    
    async def _export_data_menu(self, query) -> int:
        """–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        keyboard = [
            [InlineKeyboardButton("üìä Excel –æ—Ç—á–µ—Ç (—Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è)", callback_data="export_excel_current")],
            [InlineKeyboardButton("üìä Excel –æ—Ç—á–µ—Ç (–ø—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è)", callback_data="export_excel_last")],
            [InlineKeyboardButton("üìÑ CSV —Ñ–∞–π–ª (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ)", callback_data="export_csv_all")],
            [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç", callback_data="export_analytics")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.EXPORT_DATA
    
    async def handle_reports_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data == "reports_current_week":
                week_start, week_end = get_current_week_range()
                reports_text = await self._get_week_reports_summary(week_start, week_end)
                
            elif query.data == "reports_last_week":
                from utils.date_utils import get_current_datetime
                from datetime import timedelta
                current_date = get_current_datetime() - timedelta(weeks=1)
                week_start, week_end = get_week_range(current_date)
                reports_text = await self._get_week_reports_summary(week_start, week_end)
                
            elif query.data == "reports_by_department":
                reports_text = await self._get_department_summary()
                
            else:
                # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã
                reports = self.report_processor.get_all_reports()
                if not reports:
                    reports_text = "üìä –û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                else:
                    reports_text = "üìä –í—Å–µ –æ—Ç—á–µ—Ç—ã:\n\n"
                    for report in reports[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç—á–µ—Ç–æ–≤
                        date_str = report.submitted_at.strftime('%d.%m.%Y %H:%M') if report.submitted_at else '–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
                        late_mark = "‚ö†Ô∏è" if report.is_late else "‚úÖ"
                        reports_text += f"{late_mark} {report.full_name} ({date_str})\n"
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")
            reports_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Ç—á–µ—Ç–∞–º", callback_data="admin_view_reports")]]
        
        await query.edit_message_text(
            reports_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.VIEW_REPORTS
    
    async def handle_reminder_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data == "reminder_all":
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º
                employees = await self.db_manager.get_employees()
                active_employees = [emp for emp in employees if emp.is_active and not emp.is_blocked]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if active_employees:
                    results = await self.telegram_service.send_bulk_reminders(active_employees)
                    sent_count = results.get('sent', 0)
                    message = f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º ({sent_count}/{len(active_employees)} —á–µ–ª–æ–≤–µ–∫)"
                else:
                    message = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
                
            elif query.data == "reminder_missing":
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–º, –∫—Ç–æ –Ω–µ —Å–¥–∞–ª –æ—Ç—á–µ—Ç
                from datetime import date, timedelta
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
                today = date.today()
                week_start = today - timedelta(days=today.weekday())
                missing = await self.db_manager.get_missing_reports_users(week_start)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                if missing:
                    results = await self.telegram_service.send_bulk_reminders(missing)
                    sent_count = results.get('sent', 0)
                    message = f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –±–µ–∑ –æ—Ç—á–µ—Ç–æ–≤ ({sent_count}/{len(missing)} —á–µ–ª–æ–≤–µ–∫)"
                else:
                    message = "‚úÖ –í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —É–∂–µ —Å–¥–∞–ª–∏ –æ—Ç—á–µ—Ç—ã –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é"
            
            elif query.data == "reminder_department":
                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                message = "–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–¥–µ–ª—É –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
                context.user_data['action'] = 'remind_department'
                # –¢—É—Ç –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ –æ—Ç–¥–µ–ª–∞
                # await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ—Ç–¥–µ–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
                # return AdminStates.WAITING_INPUT

            elif query.data == "reminder_user":
                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                message = "–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
                context.user_data['action'] = 'remind_user'
                # –¢—É—Ç –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å ID –∏–ª–∏ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                # await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
                # return AdminStates.WAITING_INPUT
            else:
                message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º", callback_data="admin_send_reminder")]]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return AdminStates.SEND_REMINDER
    
    async def handle_users_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        query = update.callback_query
        await query.answer()
        
        logger.info(f"Users callback received: {query.data} from user {query.from_user.id}")
        
        if query.data == "users_list_all":
            message = await self._get_users_list()
            
        elif query.data == "users_add":
            message = await self._handle_add_user_request()
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['action'] = 'add_user'
            await query.edit_message_text(
                message,
                parse_mode='HTML'
            )
            return AdminStates.WAITING_INPUT
            
        elif query.data == "users_add_wizard":
            return await self._start_add_user_wizard(update, context)
            
        elif query.data == "users_delete":
            return await self._start_delete_user_wizard(update, context)
            
        elif query.data == "users_edit":
            message = await self._handle_edit_user_request()
            context.user_data['action'] = 'edit_user'
            await query.edit_message_text(
                message,
                parse_mode='HTML'
            )
            return AdminStates.WAITING_INPUT
            
        elif query.data == "users_block":
            message = await self._handle_block_user_request()
            context.user_data['action'] = 'block_user'
            await query.edit_message_text(
                message,
                parse_mode='HTML'
            )
            return AdminStates.WAITING_INPUT
            
        elif query.data == "admin_rights_manage":
            return await self._admin_rights_menu(query)
            
        elif query.data == "departments_manage":
            return await self._departments_menu(query)
            
        elif query.data == "departments_list_all":
            message = await self._get_departments_menu()
            
        elif query.data == "departments_add":
            message = await self._handle_add_department_request()
            context.user_data['action'] = 'add_department'
            await query.edit_message_text(
                message,
                parse_mode='HTML'
            )
            return AdminStates.WAITING_INPUT
            
        elif query.data == "departments_add_wizard":
            return await self._start_add_department_wizard(update, context)
            
        elif query.data == "departments_delete":
            return await self._start_delete_department_wizard(update, context)
            
        elif query.data == "departments_edit":
            message = await self._handle_edit_department_request()
            context.user_data['action'] = 'edit_department'
            await query.edit_message_text(
                message,
                parse_mode='HTML'
            )
            return AdminStates.WAITING_INPUT
            
        elif query.data == "departments_toggle":
            message = await self._handle_toggle_department_request()
            context.user_data['action'] = 'toggle_department'
            await query.edit_message_text(
                message,
                parse_mode='HTML'
            )
            return AdminStates.WAITING_INPUT
            
        else:
            message = "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users")]]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.MANAGE_USERS
    
    async def handle_export_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        query = update.callback_query
        await query.answer()
        
        logger.info(f"Export callback received: {query.data} from user {query.from_user.id}")
        
        try:
            if query.data == "export_excel_current":
                # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
                reports = self.report_processor.get_all_reports()
                message = f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –≥–æ—Ç–æ–≤\n\nüìÅ –§–∞–π–ª: reports_{datetime.now().strftime('%Y%m%d')}.xlsx\nüìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\nüìà –ó–∞–ø–∏—Å–µ–π: {len(reports)}"
                
            elif query.data == "export_excel_last":
                # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
                reports = self.report_processor.get_all_reports()
                message = f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –≥–æ—Ç–æ–≤\n\nüìÅ –§–∞–π–ª: reports_{datetime.now().strftime('%Y%m%d')}.xlsx\nüìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\nüìà –ó–∞–ø–∏—Å–µ–π: {len(reports)}"
                
            elif query.data == "export_csv_all":
                # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
                reports = self.report_processor.get_all_reports()
                message = f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –≥–æ—Ç–æ–≤\n\nüìÅ –§–∞–π–ª: reports_{datetime.now().strftime('%Y%m%d')}.csv\nüìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\nüìà –ó–∞–ø–∏—Å–µ–π: {len(reports)}"
                
            elif query.data == "export_analytics":
                # –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF
                reports = self.report_processor.get_all_reports()
                pages = (len(reports) // 10) + 1
                message = f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF –≥–æ—Ç–æ–≤\n\nüìÅ –§–∞–π–ª: reports_summary_{datetime.now().strftime('%Y%m%d')}.pdf\nüìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {pages}"
                
            else:
                message = "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export_data")]]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.EXPORT_DATA
    
    async def _get_week_reports_summary(self, week_start: datetime, week_end: datetime) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
        return f"""üìä <b>–û—Ç—á–µ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é {week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m.%Y')}</b>

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: 0
‚Ä¢ –û—Ç—á–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: 0
‚Ä¢ –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç—á–µ—Ç–æ–≤: 0

üìã <b>–°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤:</b>
(–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö)

‚ö†Ô∏è <b>–ù–µ —Å–¥–∞–ª–∏ –æ—Ç—á–µ—Ç:</b>
(–°–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö)"""
    
    async def _get_department_summary(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º"""
        return """üè¢ <b>–°–≤–æ–¥–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º:</b>
(–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö)

‚Ä¢ IT –æ—Ç–¥–µ–ª: 0/0 (0%)
‚Ä¢ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è: 0/0 (0%)
‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: 0/0 (0%)
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: 0/0 (0%)"""
    
    async def _send_reminder_to_all(self) -> int:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        return 0
    
    async def _send_reminder_to_missing(self) -> int:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –æ—Ç—á–µ—Ç–∞"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –æ—Ç—á–µ—Ç–∞")
        return 0
    
    async def _handle_add_user_request(self) -> str:
        """–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        departments = await self.db_manager.get_departments()
        dept_list = "\n".join([f"‚Ä¢ {dept.code} - {dept.name}" for dept in departments])
        
        return (
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "<code>user_id:username:full_name:department_code:position:employee_id:email:phone</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>123456789:john_doe:–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á:IT:–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç:EMP001:ivan@company.com:+7900123456</code>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–¥–µ–ª—ã:</b>\n"
            f"{dept_list}\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
    
    async def _handle_edit_user_request(self) -> str:
        """–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return (
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>123456789</code>\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
    
    async def _handle_block_user_request(self) -> str:
        """–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return (
            "üö´ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>user_id:action</code>\n\n"
            "–ì–¥–µ action –º–æ–∂–µ—Ç –±—ã—Ç—å:\n"
            "‚Ä¢ <code>block</code> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n"
            "‚Ä¢ <code>unblock</code> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>123456789:block</code>\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
    
    async def handle_user_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message = update.message
        text = message.text
        user_action = context.user_data.get('action')
        
        if text == '/cancel':
            await message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return await self.admin_command(update, context)
        
        if user_action == 'add_user':
            return await self._process_add_user(update, context)
        
        elif user_action == 'edit_user':
            try:
                user_id = int(text.strip())
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                employee = await self.db_manager.get_employee_by_user_id(user_id)
                if not employee:
                    await message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=get_admin_main_keyboard()
                )
                    context.user_data.clear()
                    return AdminStates.MAIN_MENU
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ user_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                context.user_data['edit_user_id'] = user_id
                context.user_data['action'] = 'edit_user_data'
                
                await message.reply_text(
                     f"üë§ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
                     f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
                     f"‚Ä¢ ID: {employee.user_id}\n"
                     f"‚Ä¢ –ò–º—è: {employee.full_name}\n"
                     f"‚Ä¢ –û—Ç–¥–µ–ª: {employee.department}\n\n"
                     f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                     f"<code>–ø–æ–ª–Ω–æ–µ_–∏–º—è:–æ—Ç–¥–µ–ª</code>\n\n"
                     f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
                     parse_mode='HTML'
                 )
                
                return AdminStates.WAITING_INPUT
                
            except ValueError:
                await message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ."
                )
                return AdminStates.WAITING_INPUT
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                await message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                )
                return AdminStates.WAITING_INPUT
        
        elif user_action == 'edit_user_data':
            try:
                parts = text.split(':')
                if len(parts) != 2:
                    await message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        "<code>–ø–æ–ª–Ω–æ–µ_–∏–º—è:–æ—Ç–¥–µ–ª</code>"
                    )
                    return AdminStates.WAITING_INPUT
                
                full_name, department = [p.strip() for p in parts]
                user_id = context.user_data['edit_user_id']
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Employee —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                success = await self.db_manager.update_employee(
                    user_id=user_id,
                    full_name=full_name,
                    department_code=department
                )
                
                if not success:
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        reply_markup=get_admin_main_keyboard()
                    )
                    return AdminStates.MAIN_MENU
                
                await message.reply_text(
                    f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {full_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
                    reply_markup=get_admin_main_keyboard()
                )
                
                context.user_data.clear()
                return AdminStates.MAIN_MENU
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")]
                ])
                await message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                    reply_markup=reply_markup
                )
                return AdminStates.WAITING_INPUT
        
        elif user_action == 'block_user':
            try:
                parts = text.split(':')
                if len(parts) != 2:
                    await message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        "<code>user_id:action</code>\n"
                        "–ì–¥–µ action: block –∏–ª–∏ unblock"
                    )
                    return AdminStates.WAITING_INPUT
                
                user_id, action_type = [p.strip() for p in parts]
                user_id = int(user_id)
                
                if action_type not in ['block', 'unblock']:
                    await message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'block' –∏–ª–∏ 'unblock'."
                    )
                    return AdminStates.WAITING_INPUT
                
                is_blocked = action_type == 'block'
                await self.db_manager.block_employee(user_id, is_blocked)
                
                action_text = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_blocked else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
                await message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {action_text}!",
                    reply_markup=get_admin_main_keyboard()
                )
                
                context.user_data.clear()
                return AdminStates.MAIN_MENU
                
            except ValueError:
                await message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ."
                )
                return AdminStates.WAITING_INPUT
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")]
                ])
                await message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                    reply_markup=reply_markup
                )
                return AdminStates.WAITING_INPUT
        
        elif user_action == 'add_department':
            try:
                parts = text.split(':')
                if len(parts) != 4:
                    await message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        "<code>–∫–æ–¥:–Ω–∞–∑–≤–∞–Ω–∏–µ:–æ–ø–∏—Å–∞–Ω–∏–µ:—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å</code>"
                    )
                    return AdminStates.WAITING_INPUT
                
                code, name, description, head_name = [p.strip() for p in parts]
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Department
                department = Department(
                    code=code,
                    name=name,
                    description=description if description else None,
                    head_name=head_name if head_name else None,
                    is_active=True
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                success = await self.db_manager.add_department(department)
                
                if success:
                    await message.reply_text(
                        f"‚úÖ –û—Ç–¥–µ–ª '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                        reply_markup=get_admin_main_keyboard()
                    )
                    context.user_data.clear()
                    return AdminStates.MAIN_MENU
                else:
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="manage_departments")]
                    ])
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)",
                        reply_markup=reply_markup
                    )
                    return AdminStates.WAITING_INPUT
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞: {e}")
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="manage_departments")]
                ])
                await message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞",
                    reply_markup=reply_markup
                )
                return AdminStates.WAITING_INPUT
        
        elif user_action == 'edit_department':
            try:
                parts = text.split(':')
                if len(parts) != 4:
                    await message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                        "<code>–∫–æ–¥:–Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ:–Ω–æ–≤–æ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ:–Ω–æ–≤—ã–π_—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å</code>"
                    )
                    return AdminStates.WAITING_INPUT
                
                code, name, description, head_name = [p.strip() for p in parts]
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–¥–µ–ª
                department = await self.db_manager.get_department_by_code(code)
                if not department:
                    await message.reply_text(
                        f"‚ùå –û—Ç–¥–µ–ª —Å –∫–æ–¥–æ–º '{code}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    )
                    return AdminStates.WAITING_INPUT
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                department.name = name
                department.description = description if description else None
                department.head_name = head_name if head_name else None
                
                success = await self.db_manager.update_department(department)
                
                if success:
                    await message.reply_text(
                        f"‚úÖ –û—Ç–¥–µ–ª '{name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                        reply_markup=get_admin_main_keyboard()
                    )
                    context.user_data.clear()
                    return AdminStates.MAIN_MENU
                else:
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="manage_departments")]
                    ])
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞",
                        reply_markup=reply_markup
                    )
                    return AdminStates.WAITING_INPUT
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞: {e}")
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="manage_departments")]
                ])
                await message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞",
                    reply_markup=reply_markup
                )
                return AdminStates.WAITING_INPUT
        
        elif user_action == 'toggle_department':
            try:
                code = text.strip()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–¥–µ–ª
                department = await self.db_manager.get_department_by_code(code)
                if not department:
                    await message.reply_text(
                        f"‚ùå –û—Ç–¥–µ–ª —Å –∫–æ–¥–æ–º '{code}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    )
                    return AdminStates.WAITING_INPUT
                
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
                department.is_active = not department.is_active
                success = await self.db_manager.update_department(department)
                
                if success:
                    status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if department.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                    await message.reply_text(
                        f"‚úÖ –û—Ç–¥–µ–ª '{department.name}' {status_text}!",
                        reply_markup=get_admin_main_keyboard()
                    )
                    context.user_data.clear()
                    return AdminStates.MAIN_MENU
                else:
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="manage_departments")]
                    ])
                    await message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–¥–µ–ª–∞",
                        reply_markup=reply_markup
                    )
                    return AdminStates.WAITING_INPUT
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–¥–µ–ª–∞: {e}")
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="manage_departments")]
                ])
                await message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–¥–µ–ª–∞",
                    reply_markup=reply_markup
                )
                return AdminStates.WAITING_INPUT
        
        return AdminStates.MAIN_MENU
    
    async def _process_add_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            data = update.message.text.strip().split(':')
            if len(data) != 8:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –¢—Ä–µ–±—É–µ—Ç—Å—è 8 –ø–æ–ª–µ–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–≤–æ–µ—Ç–æ—á–∏–µ–º."
                )
                return AdminStates.WAITING_INPUT
            
            user_id, username, full_name, dept_code, position, emp_id, email, phone = data
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Employee
            employee = Employee(
                user_id=int(user_id),
                username=username,
                full_name=full_name,
                department_code=dept_code,
                position=position,
                employee_id=emp_id,
                email=email,
                phone=phone,
                is_active=True,
                is_blocked=False
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ç–¥–µ–ª
            departments = await self.db_manager.get_departments()
            dept_codes = [dept.code for dept in departments]
            
            if dept_code not in dept_codes:
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")]
                ])
                await update.message.reply_text(
                    f"‚ùå –û—Ç–¥–µ–ª —Å –∫–æ–¥–æ–º '{dept_code}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–¥–µ–ª—ã: {', '.join(dept_codes)}",
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                return AdminStates.WAITING_INPUT
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = await self.db_manager.add_employee(employee)
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                    parse_mode='HTML'
                )
            else:
                reply_markup = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")]
                ])
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                    "‚Ä¢ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è\n"
                    "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data.clear()
            
            return await self.admin_command(update, context)
            
        except ValueError as e:
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")]
            ])
            if "invalid literal for int()" in str(e):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.\n\n"
                    "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
                    "<code>123456789:john_doe:–ò–≤–∞–Ω–æ–≤ –ò.–ò.:IT:–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç:EMP001:ivan@company.com:+7900123456</code>",
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
            return AdminStates.WAITING_INPUT
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")]
            ])
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
                f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            return AdminStates.WAITING_INPUT
    
    async def _get_users_list(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            employees = await self.db_manager.get_employees()
            if not employees:
                return "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç"
            
            users_text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for emp in employees:
                status = "üü¢" if emp.is_active else "üî¥"
                users_text += f"{status} {emp.full_name} (@{emp.username or '–Ω–µ—Ç'})\n"
                users_text += f"   üìß {emp.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                users_text += f"   üè¢ {emp.department_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            
            return users_text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    async def _departments_menu(self, query) -> int:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–æ–≤", callback_data="departments_list_all")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª", callback_data="departments_add_wizard")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª", callback_data="departments_edit")],
            [InlineKeyboardButton("üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data="departments_toggle")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª", callback_data="departments_delete")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users")]
        ]
        
        await query.edit_message_text(
            "üè¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.MANAGE_USERS
    
    async def _get_departments_menu(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            departments = await self.db_manager.get_departments()
            if not departments:
                return "üè¢ –û—Ç–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            dept_text = "üè¢ <b>–°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤:</b>\n\n"
            for dept in departments:
                employees_count = len(self.report_processor.get_employees_by_department(dept.code))
                status = "üü¢" if dept.is_active else "üî¥"
                dept_text += f"{status} <b>{dept.name}</b> (–∫–æ–¥: {dept.code})\n"
                dept_text += f"   üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {employees_count}\n"
                dept_text += f"   üë§ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {dept.head_name or '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
                if dept.description:
                    dept_text += f"   üìù {dept.description}\n"
                dept_text += "\n"
            
            return dept_text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–æ–≤"
    
    async def _handle_add_department_request(self) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞"""
        return (
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–¥–µ–ª–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–∫–æ–¥:–Ω–∞–∑–≤–∞–Ω–∏–µ:–æ–ø–∏—Å–∞–Ω–∏–µ:—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>IT:–û—Ç–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ü–û:–ò–≤–∞–Ω–æ–≤ –ò.–ò.</code>\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
        )
    
    async def _handle_edit_department_request(self) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞"""
        return (
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–∫–æ–¥:–Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ:–Ω–æ–≤–æ–µ_–æ–ø–∏—Å–∞–Ω–∏–µ:–Ω–æ–≤—ã–π_—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>IT:–ò–¢ –æ—Ç–¥–µ–ª:–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:–ü–µ—Ç—Ä–æ–≤ –ü.–ü.</code>\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
        )
    
    async def _handle_toggle_department_request(self) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –æ—Ç–¥–µ–ª–∞"""
        return (
            "üîÑ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è/–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–¥–µ–ª–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ—Ç–¥–µ–ª–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<code>IT</code>\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
        )
    
    # –ú–µ—Ç–æ–¥—ã –º–∞—Å—Ç–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async def _start_add_user_wizard(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –º–∞—Å—Ç–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        keyboard = get_wizard_navigation_keyboard()
        
        await query.edit_message_text(
            "üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
            "–®–∞–≥ 1 –∏–∑ 8: –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> –ò–≤–∞–Ω",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        context.user_data['wizard_data'] = {}
        return AdminStates.ADD_USER_STEP1_ID
    
    async def _handle_add_user_step1(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        first_name = update.message.text.strip()
        
        if not first_name:
            await update.message.reply_text(
                "‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return AdminStates.ADD_USER_STEP1_ID
        
        context.user_data['wizard_data']['first_name'] = first_name
        
        keyboard = get_wizard_navigation_keyboard()
        
        await update.message.reply_text(
            "üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
            "–®–∞–≥ 2 –∏–∑ 8: –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> –ò–≤–∞–Ω–æ–≤",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        return AdminStates.ADD_USER_STEP2_USERNAME
    
    async def _handle_add_user_step2(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        last_name = update.message.text.strip()
        
        if not last_name:
            await update.message.reply_text(
                "‚ùå –§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return AdminStates.ADD_USER_STEP2_USERNAME
        
        context.user_data['wizard_data']['last_name'] = last_name
        
        keyboard = get_wizard_navigation_keyboard(skip_callback="wizard_next")
        
        await update.message.reply_text(
            "üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
            "–®–∞–≥ 3 –∏–∑ 8: –í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –Ω–∞–∂–∞–≤ '–î–∞–ª–µ–µ')\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> –ü–µ—Ç—Ä–æ–≤–∏—á",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        return AdminStates.ADD_USER_STEP3_FULLNAME
    
    async def _handle_add_user_step3(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if update.message:
            middle_name = update.message.text.strip()
            context.user_data['wizard_data']['middle_name'] = middle_name if middle_name else None
        elif update.callback_query and update.callback_query.data == 'wizard_next':
            context.user_data['wizard_data']['middle_name'] = None
        
        keyboard = get_wizard_navigation_keyboard()
        
        message_text = (
            "üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
            "–®–∞–≥ 4 –∏–∑ 8: –í–≤–µ–¥–∏—Ç–µ Telegram ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> 123456789\n\n"
            "üí° <i>–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID, –Ω–∞–ø–∏—Å–∞–≤ –±–æ—Ç—É /start</i>"
        )
        
        if update.message:
            await update.message.reply_text(
                message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            await update.callback_query.edit_message_text(
                message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        
        return AdminStates.ADD_USER_STEP4_DEPARTMENT
    
    async def _handle_add_user_step4(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            telegram_id = int(update.message.text.strip())
        except ValueError:
            await update.message.reply_text(
                "‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return AdminStates.ADD_USER_STEP4_DEPARTMENT
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID
        existing_user = await self.db_manager.get_employee_by_user_id(telegram_id)
        if existing_user:
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π ID:"
            )
            return AdminStates.ADD_USER_STEP4_DEPARTMENT
        
        context.user_data['wizard_data']['telegram_id'] = telegram_id
        
        keyboard = get_wizard_navigation_keyboard()
        
        await update.message.reply_text(
            "üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
            "–®–∞–≥ 5 –∏–∑ 8: –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        return AdminStates.ADD_USER_STEP5_POSITION
    
    async def _handle_add_user_step5(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        position = update.message.text.strip()
        
        if not position:
            await update.message.reply_text(
                "‚ùå –î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return AdminStates.ADD_USER_STEP5_POSITION
        
        context.user_data['wizard_data']['position'] = position
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤
        departments = await self.db_manager.get_departments()
        if not departments:
            await update.message.reply_text(
                "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –æ—Ç–¥–µ–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ—Ç–¥–µ–ª."
            )
            return ConversationHandler.END
        
        keyboard = get_wizard_navigation_keyboard()
        
        dept_list = "\n".join([f"‚Ä¢ <code>{dept.code}</code> - {dept.name}" for dept in departments])
        
        await update.message.reply_text(
            f"üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
            f"–®–∞–≥ 6 –∏–∑ 8: –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–¥–µ–ª—ã:\n{dept_list}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ—Ç–¥–µ–ª–∞:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        return AdminStates.ADD_USER_STEP6_EMPLOYEE_ID
    
    async def _handle_add_user_step6(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞"""
        department_code = update.message.text.strip().upper()
        
        department = await self.db_manager.get_department_by_code(department_code)
        if not department:
            await update.message.reply_text(
                f"‚ùå –û—Ç–¥–µ–ª —Å –∫–æ–¥–æ–º '{department_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return AdminStates.ADD_USER_STEP6_EMPLOYEE_ID
        
        context.user_data['wizard_data']['department_code'] = department_code
        
        keyboard = get_wizard_navigation_keyboard(skip_callback="wizard_next")
        
        await update.message.reply_text(
            "üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
            "–®–∞–≥ 7 –∏–∑ 8: –í–≤–µ–¥–∏—Ç–µ email —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –Ω–∞–∂–∞–≤ '–î–∞–ª–µ–µ')\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> ivan.ivanov@company.com",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        return AdminStates.ADD_USER_STEP7_EMAIL
    
    async def _handle_add_user_step7(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email"""
        if update.message:
            email = update.message.text.strip()
            context.user_data['wizard_data']['email'] = email if email else None
        elif update.callback_query and update.callback_query.data == 'wizard_next':
            context.user_data['wizard_data']['email'] = None
        
        keyboard = get_wizard_navigation_keyboard(skip_callback="wizard_next")
        
        message_text = (
            "üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
            "–®–∞–≥ 8 –∏–∑ 8: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –Ω–∞–∂–∞–≤ '–î–∞–ª–µ–µ')\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> +7 (999) 123-45-67"
        )
        
        if update.message:
            await update.message.reply_text(
                message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            await update.callback_query.edit_message_text(
                message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        
        return AdminStates.ADD_USER_STEP8_PHONE
    
    async def _handle_add_user_step8(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        if update.message:
            phone = update.message.text.strip()
            context.user_data['wizard_data']['phone'] = phone if phone else None
        elif update.callback_query and update.callback_query.data == 'wizard_next':
            context.user_data['wizard_data']['phone'] = None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        wizard_data = context.user_data['wizard_data']
        
        summary = (
            "üë§ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
            f"<b>–ò–º—è:</b> {wizard_data['first_name']}\n"
            f"<b>–§–∞–º–∏–ª–∏—è:</b> {wizard_data['last_name']}\n"
        )
        
        if wizard_data.get('middle_name'):
            summary += f"<b>–û—Ç—á–µ—Å—Ç–≤–æ:</b> {wizard_data['middle_name']}\n"
        
        summary += (
            f"<b>Telegram ID:</b> {wizard_data['telegram_id']}\n"
            f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {wizard_data['position']}\n"
            f"<b>–û—Ç–¥–µ–ª:</b> {wizard_data['department_code']}\n"
        )
        
        if wizard_data.get('email'):
            summary += f"<b>Email:</b> {wizard_data['email']}\n"
        
        if wizard_data.get('phone'):
            summary += f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {wizard_data['phone']}\n"
        
        summary += "\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ?"
        
        keyboard = get_confirmation_keyboard('user_confirm')
        
        if update.message:
            await update.message.reply_text(
                summary,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            await update.callback_query.edit_message_text(
                summary,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        
        return AdminStates.ADD_USER_CONFIRM
    
    async def _confirm_add_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'user_confirm':
            wizard_data = context.user_data['wizard_data']
            
            try:
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                from models.department import Employee
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                logger.info(f"Wizard data: {wizard_data}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if not wizard_data.get('department_code'):
                    await query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ–¥ –æ—Ç–¥–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ.",
                        parse_mode='HTML'
                    )
                    return ConversationHandler.END
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
                full_name_parts = [wizard_data['first_name'], wizard_data['last_name']]
                if wizard_data.get('middle_name'):
                    full_name_parts.insert(1, wizard_data['middle_name'])
                full_name = ' '.join(full_name_parts)
                
                employee = Employee(
                    user_id=wizard_data['telegram_id'],
                    full_name=full_name,
                    department_code=wizard_data['department_code'],
                    position=wizard_data['position'],
                    email=wizard_data.get('email'),
                    phone=wizard_data.get('phone')
                )
                
                success = await self.db_manager.add_employee(employee)
                
                if success:
                    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(
                        f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {wizard_data['first_name']} {wizard_data['last_name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
                else:
                    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        reply_markup=reply_markup
                    )
            except Exception as e:
                keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {str(e)}",
                    reply_markup=reply_markup
                )
        else:
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=reply_markup
            )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞
        context.user_data.pop('wizard_data', None)
        return ConversationHandler.END
    
    # –ú–µ—Ç–æ–¥—ã –º–∞—Å—Ç–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async def _start_delete_user_wizard(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –º–∞—Å—Ç–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        employees = await self.db_manager.get_employees()
        if not employees:
            await query.edit_message_text(
                "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        keyboard = []
        for emp in employees[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            keyboard.append([
                InlineKeyboardButton(
                    f"{emp.full_name} ({emp.position or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'})",
                    callback_data=f"delete_user_{emp.user_id}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return AdminStates.DELETE_USER_SELECT
    
    async def _handle_delete_user_select(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "cancel":
            await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return ConversationHandler.END
        
        telegram_id = int(query.data.split("_")[-1])
        employee = await self.db_manager.get_employee_by_user_id(telegram_id)
        
        if not employee:
            await query.edit_message_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END
        
        context.user_data['delete_user_id'] = telegram_id
        
        full_name = employee.full_name
        
        keyboard = get_delete_confirmation_keyboard("delete_confirm")
        
        await query.edit_message_text(
            f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n"
            f"<b>{full_name}</b>\n"
            f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {employee.position}\n"
            f"–û—Ç–¥–µ–ª: {employee.department_code}\n\n"
            f"‚ö†Ô∏è <i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        return AdminStates.DELETE_USER_CONFIRM
    
    async def _confirm_delete_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'delete_confirm':
            telegram_id = context.user_data.get('delete_user_id')
            if telegram_id:
                employee = await self.db_manager.get_employee_by_user_id(telegram_id)
                if employee:
                    success = await self.db_manager.delete_employee(telegram_id)
                    if success:
                        full_name = employee.full_name
                        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users")]]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text(
                            f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {full_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                            reply_markup=reply_markup
                        )
                    else:
                        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users")]]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text(
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.",
                            reply_markup=reply_markup
                        )
                else:
                    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=reply_markup)
            else:
                keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=reply_markup)
        else:
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=reply_markup)
        
        context.user_data.pop('delete_user_id', None)
        return ConversationHandler.END
    
    # –ú–µ—Ç–æ–¥—ã –º–∞—Å—Ç–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤
    async def _start_add_department_wizard(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –º–∞—Å—Ç–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞"""
        query = update.callback_query
        await query.answer()
        
        keyboard = get_wizard_navigation_keyboard()
        
        await query.edit_message_text(
            "üè¢ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–¥–µ–ª–∞</b>\n\n"
            "–®–∞–≥ 1 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ—Ç–¥–µ–ª–∞\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> IT\n\n"
            "üí° <i>–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤</i>",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        context.user_data['wizard_data'] = {}
        return AdminStates.ADD_DEPT_STEP1_CODE
    
    async def _handle_add_department_step1(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –æ—Ç–¥–µ–ª–∞"""
        code = update.message.text.strip().upper()
        
        if not code:
            await update.message.reply_text(
                "‚ùå –ö–æ–¥ –æ—Ç–¥–µ–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return AdminStates.ADD_DEPT_STEP1_CODE
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–¥–µ–ª —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
        existing_dept = await self.db_manager.get_department_by_code(code)
        if existing_dept:
            await update.message.reply_text(
                f"‚ùå –û—Ç–¥–µ–ª —Å –∫–æ–¥–æ–º '{code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:"
            )
            return AdminStates.ADD_DEPT_STEP1_CODE
        
        context.user_data['wizard_data']['code'] = code
        
        keyboard = get_wizard_navigation_keyboard()
        
        await update.message.reply_text(
            "üè¢ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–¥–µ–ª–∞</b>\n\n"
            "–®–∞–≥ 2 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        return AdminStates.ADD_DEPT_STEP2_NAME
    
    async def _handle_add_department_step2(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞"""
        name = update.message.text.strip()
        
        if not name:
            await update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return AdminStates.ADD_DEPT_STEP2_NAME
        
        context.user_data['wizard_data']['name'] = name
        
        keyboard = get_wizard_navigation_keyboard(skip_callback="wizard_next")
        
        await update.message.reply_text(
            "üè¢ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–¥–µ–ª–∞</b>\n\n"
            "–®–∞–≥ 3 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –Ω–∞–∂–∞–≤ '–î–∞–ª–µ–µ')\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> –û—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        return AdminStates.ADD_DEPT_STEP3_DESCRIPTION
    
    async def _handle_add_department_step3(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞"""
        if update.message:
            description = update.message.text.strip()
            context.user_data['wizard_data']['description'] = description if description else None
        elif update.callback_query and update.callback_query.data == 'wizard_next':
            context.user_data['wizard_data']['description'] = None
        
        keyboard = get_wizard_navigation_keyboard(skip_callback="wizard_next")
        
        message_text = (
            "üè¢ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–¥–µ–ª–∞</b>\n\n"
            "–®–∞–≥ 4 –∏–∑ 4: –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–¥–µ–ª–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –Ω–∞–∂–∞–≤ '–î–∞–ª–µ–µ')\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b> –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
        )
        
        if update.message:
            await update.message.reply_text(
                message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            await update.callback_query.edit_message_text(
                message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        
        return AdminStates.ADD_DEPT_STEP4_HEAD
    
    async def _handle_add_department_step4(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        if update.message:
            manager = update.message.text.strip()
            context.user_data['wizard_data']['manager'] = manager if manager else None
        elif update.callback_query and update.callback_query.data == 'wizard_next':
            context.user_data['wizard_data']['manager'] = None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        wizard_data = context.user_data['wizard_data']
        
        summary = (
            "üè¢ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞</b>\n\n"
            f"<b>–ö–æ–¥:</b> {wizard_data['code']}\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {wizard_data['name']}\n"
        )
        
        if wizard_data.get('description'):
            summary += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {wizard_data['description']}\n"
        
        if wizard_data.get('manager'):
            summary += f"<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {wizard_data['manager']}\n"
        
        summary += "\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ?"
        
        keyboard = get_confirmation_keyboard('dept_confirm_confirm', 'dept_confirm_cancel')
        
        if update.message:
            await update.message.reply_text(
                summary,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        else:
            await update.callback_query.edit_message_text(
                summary,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        
        return AdminStates.ADD_DEPT_CONFIRM
    
    async def _confirm_add_department(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'dept_confirm_confirm':
            wizard_data = context.user_data['wizard_data']
            
            try:
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–¥–µ–ª–∞
                from models.department import Department
                
                department = Department(
                    code=wizard_data['code'],
                    name=wizard_data['name'],
                    description=wizard_data.get('description'),
                    head_name=wizard_data.get('manager')
                )
                
                success = await self.db_manager.add_department(department)
                
                if success:
                    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="departments_manage")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(
                        f"‚úÖ –û—Ç–¥–µ–ª {wizard_data['name']} ({wizard_data['code']}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
                else:
                    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="departments_manage")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        reply_markup=reply_markup
                    )
            except Exception as e:
                keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="departments_manage")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞: {str(e)}",
                    reply_markup=reply_markup
                )
        elif query.data == 'dept_confirm_edit':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É –º–∞—Å—Ç–µ—Ä–∞
            return await self._start_add_department_wizard(update, context)
        else:
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="departments_manage")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=reply_markup
            )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞
        context.user_data.pop('wizard_data', None)
        return ConversationHandler.END
    
    # –ú–µ—Ç–æ–¥—ã –º–∞—Å—Ç–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤
    async def _start_delete_department_wizard(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –º–∞—Å—Ç–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞"""
        query = update.callback_query
        await query.answer()
        
        departments = await self.db_manager.get_departments()
        if not departments:
            await query.edit_message_text(
                "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –æ—Ç–¥–µ–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
            )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        keyboard = []
        for dept in departments:
            keyboard.append([
                InlineKeyboardButton(
                    f"{dept.name} ({dept.code})",
                    callback_data=f"delete_dept_{dept.code}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        
        return AdminStates.DELETE_DEPT_SELECT
    
    async def _handle_delete_department_select(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "cancel":
            await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return ConversationHandler.END
        
        dept_code = query.data.split("_")[-1]
        department = await self.db_manager.get_department_by_code(dept_code)
        
        if not department:
            await query.edit_message_text("‚ùå –û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤ —ç—Ç–æ–º –æ—Ç–¥–µ–ª–µ
        employees_in_dept = await self.db_manager.get_employees_by_department(dept_code)
        if employees_in_dept:
            await query.edit_message_text(
                f"‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª '{department.name}', —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–µ–º –µ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏.\n\n"
                f"–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –¥—Ä—É–≥–∏–µ –æ—Ç–¥–µ–ª—ã –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –∏—Ö."
            )
            return ConversationHandler.END
        
        context.user_data['delete_dept_code'] = dept_code
        
        keyboard = get_delete_confirmation_keyboard("delete_confirm")
        
        await query.edit_message_text(
            f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª:\n"
            f"<b>{department.name} ({department.code})</b>\n\n"
            f"‚ö†Ô∏è <i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        return AdminStates.DELETE_DEPT_CONFIRM
    
    async def _confirm_delete_department(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'delete_confirm':
            dept_code = context.user_data.get('delete_dept_code')
            if dept_code:
                department = await self.db_manager.get_department_by_code(dept_code)
                if department:
                    success = await self.db_manager.delete_department(dept_code)
                    if success:
                        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="admin_manage_departments")]]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text(
                            f"‚úÖ –û—Ç–¥–µ–ª {department.name} ({department.code}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                            reply_markup=reply_markup
                        )
                    else:
                        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="admin_manage_departments")]]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await query.edit_message_text(
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞.",
                            reply_markup=reply_markup
                        )
                else:
                    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="admin_manage_departments")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text("‚ùå –û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=reply_markup)
            else:
                keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="admin_manage_departments")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ–¥ –æ—Ç–¥–µ–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=reply_markup)
        else:
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="admin_manage_departments")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=reply_markup)
        
        context.user_data.pop('delete_dept_code', None)
        return ConversationHandler.END
    
    async def _admin_rights_menu(self, query) -> int:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="admin_list")],
            [InlineKeyboardButton("‚ûï –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_grant")],
            [InlineKeyboardButton("‚ûñ –°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_revoke")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            "üëë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.ADMIN_RIGHTS
    
    async def handle_admin_rights_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "admin_list":
            message = await self._get_admin_list()
            
        elif query.data == "admin_grant":
            return await self._start_grant_admin_wizard(update, context)
            
        elif query.data == "admin_revoke":
            return await self._start_revoke_admin_wizard(update, context)
            
        else:
            message = "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_rights_manage")]]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.ADMIN_RIGHTS
    
    async def _get_admin_list(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            admins = await self.db_manager.get_admin_employees()
            
            if not admins:
                return "üëë <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            
            admin_list = "üëë <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n"
            for admin in admins:
                status = "üü¢" if admin.is_active and not admin.is_blocked else "üî¥"
                admin_list += f"{status} <b>{admin.full_name}</b>\n"
                admin_list += f"   üì± ID: <code>{admin.user_id}</code>\n"
                admin_list += f"   üè¢ {admin.department_code} - {admin.position}\n\n"
            
            return admin_list
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
    
    async def _start_grant_admin_wizard(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
            employees = await self.db_manager.get_employees()
            non_admin_employees = [emp for emp in employees if emp.is_active and not emp.is_blocked and not emp.is_admin]
            
            if not non_admin_employees:
                keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_rights_manage")]]
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return AdminStates.ADMIN_RIGHTS
            
            keyboard = []
            for emp in non_admin_employees[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                keyboard.append([InlineKeyboardButton(
                    f"{emp.full_name} ({emp.department_code})",
                    callback_data=f"grant_admin_{emp.user_id}"
                )])
            
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_rights_manage")])
            
            await query.edit_message_text(
                "‚ûï <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
            return AdminStates.GRANT_ADMIN_SELECT
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–∞—Å—Ç–µ—Ä–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_rights_manage")]]
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return AdminStates.ADMIN_RIGHTS
    
    async def _start_revoke_admin_wizard(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –º–∞—Å—Ç–µ—Ä–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = await self.db_manager.get_admin_employees()
            
            if not admins:
                keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_rights_manage")]]
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return AdminStates.ADMIN_RIGHTS
            
            keyboard = []
            for admin in admins:
                # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —Å–Ω–∏–º–∞—Ç—å –ø—Ä–∞–≤–∞ —Å —Å–∞–º–æ–≥–æ —Å–µ–±—è
                if admin.user_id != query.from_user.id:
                    keyboard.append([InlineKeyboardButton(
                        f"{admin.full_name} ({admin.department_code})",
                        callback_data=f"revoke_admin_{admin.user_id}"
                    )])
            
            if not keyboard:
                keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_rights_manage")])
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ (–Ω–µ–ª—å–∑—è —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —Å —Å–∞–º–æ–≥–æ —Å–µ–±—è).",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return AdminStates.ADMIN_RIGHTS
            
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_rights_manage")])
            
            await query.edit_message_text(
                "‚ûñ <b>–°–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            
            return AdminStates.REVOKE_ADMIN_SELECT
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–∞—Å—Ç–µ—Ä–µ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_rights_manage")]]
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return AdminStates.ADMIN_RIGHTS
    
    async def _handle_grant_admin_select(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("grant_admin_"):
            user_id = int(query.data.replace("grant_admin_", ""))
            employee = await self.db_manager.get_employee_by_user_id(user_id)
            
            if employee:
                context.user_data['grant_admin_user_id'] = user_id
                
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_grant_admin")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_rights_manage")]
                ]
                
                await query.edit_message_text(
                    f"‚ûï <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>\n\n"
                    f"–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
                    f"<b>{employee.full_name}</b>\n"
                    f"üì± ID: <code>{employee.user_id}</code>\n"
                    f"üè¢ {employee.department_code} - {employee.position}\n\n"
                    f"‚ö†Ô∏è <i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!</i>",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='HTML'
                )
                
                return AdminStates.GRANT_ADMIN_CONFIRM
            else:
                keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_rights_manage")]]
                await query.edit_message_text(
                    "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return AdminStates.ADMIN_RIGHTS
        
        return AdminStates.ADMIN_RIGHTS
    
    async def _handle_revoke_admin_select(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("revoke_admin_"):
            user_id = int(query.data.replace("revoke_admin_", ""))
            employee = await self.db_manager.get_employee_by_user_id(user_id)
            
            if employee:
                context.user_data['revoke_admin_user_id'] = user_id
                
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_revoke_admin")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_rights_manage")]
                ]
                
                await query.edit_message_text(
                    f"‚ûñ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤</b>\n\n"
                    f"–°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å:\n"
                    f"<b>{employee.full_name}</b>\n"
                    f"üì± ID: <code>{employee.user_id}</code>\n"
                    f"üè¢ {employee.department_code} - {employee.position}\n\n"
                    f"‚ö†Ô∏è <i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!</i>",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='HTML'
                )
                
                return AdminStates.REVOKE_ADMIN_CONFIRM
            else:
                keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_rights_manage")]]
                await query.edit_message_text(
                    "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return AdminStates.ADMIN_RIGHTS
        
        return AdminStates.ADMIN_RIGHTS
    
    async def _confirm_grant_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'confirm_grant_admin':
            user_id = context.user_data.get('grant_admin_user_id')
            if user_id:
                employee = await self.db_manager.get_employee_by_user_id(user_id)
                if employee:
                    success = await self.db_manager.set_admin_rights(user_id, True)
                    if success:
                        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_rights_manage")]]
                        await query.edit_message_text(
                            f"‚úÖ <b>{employee.full_name}</b> –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
                            reply_markup=InlineKeyboardMarkup(keyboard),
                            parse_mode='HTML'
                        )
                    else:
                        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_rights_manage")]]
                        await query.edit_message_text(
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                else:
                    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_rights_manage")]]
                    await query.edit_message_text(
                        "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
            else:
                keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_rights_manage")]]
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        
        context.user_data.pop('grant_admin_user_id', None)
        return AdminStates.ADMIN_RIGHTS
    
    async def _confirm_revoke_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'confirm_revoke_admin':
            user_id = context.user_data.get('revoke_admin_user_id')
            if user_id:
                employee = await self.db_manager.get_employee_by_user_id(user_id)
                if employee:
                    success = await self.db_manager.set_admin_rights(user_id, False)
                    if success:
                        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_rights_manage")]]
                        await query.edit_message_text(
                            f"‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã —Å <b>{employee.full_name}</b>!",
                            reply_markup=InlineKeyboardMarkup(keyboard),
                            parse_mode='HTML'
                        )
                    else:
                        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_rights_manage")]]
                        await query.edit_message_text(
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                else:
                    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_rights_manage")]]
                    await query.edit_message_text(
                        "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
            else:
                keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞–º–∏", callback_data="admin_rights_manage")]]
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        
        context.user_data.pop('revoke_admin_user_id', None)
        return AdminStates.ADMIN_RIGHTS
    
    def get_conversation_handler(self) -> ConversationHandler:
        """–°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        return ConversationHandler(
            entry_points=[CommandHandler('admin', self.admin_command)],
            states={
                AdminStates.MAIN_MENU: [
                    CallbackQueryHandler(self.handle_admin_callback)
                ],
                AdminStates.VIEW_REPORTS: [
                    CallbackQueryHandler(self.handle_reports_callback, pattern='^reports_'),
                    CallbackQueryHandler(self.handle_admin_callback)
                ],
                AdminStates.SEND_REMINDER: [
                    CallbackQueryHandler(self.handle_reminder_callback, pattern='^reminder_'),
                    CallbackQueryHandler(self.handle_admin_callback)
                ],
                AdminStates.MANAGE_USERS: [
                    CallbackQueryHandler(self.handle_users_callback, pattern='^users_|^departments_'),
                    CallbackQueryHandler(self.handle_admin_callback)
                ],
                AdminStates.EXPORT_DATA: [
                    CallbackQueryHandler(self.handle_export_callback, pattern='^export_'),
                    CallbackQueryHandler(self.handle_admin_callback)
                ],
                AdminStates.WAITING_INPUT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_user_input),
                    CommandHandler('cancel', self._cancel_admin)
                ],
                # –°–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                AdminStates.ADD_USER_STEP1_ID: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_add_user_step1),
                    CallbackQueryHandler(self._cancel_admin, pattern='^cancel$')
                ],
                AdminStates.ADD_USER_STEP2_USERNAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_add_user_step2),
                    CallbackQueryHandler(self._handle_add_user_step1, pattern='^wizard_back$'),
                    CallbackQueryHandler(self._cancel_admin, pattern='^cancel$')
                ],
                AdminStates.ADD_USER_STEP3_FULLNAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_add_user_step3),
                    CallbackQueryHandler(self._handle_add_user_step3, pattern='^wizard_next$'),
                    CallbackQueryHandler(self._handle_add_user_step2, pattern='^wizard_back$'),
                    CallbackQueryHandler(self._cancel_admin, pattern='^cancel$')
                ],
                AdminStates.ADD_USER_STEP4_DEPARTMENT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_add_user_step4),
                    CallbackQueryHandler(self._handle_add_user_step3, pattern='^wizard_back$'),
                    CallbackQueryHandler(self._cancel_admin, pattern='^cancel$')
                ],
                AdminStates.ADD_USER_STEP5_POSITION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_add_user_step5),
                    CallbackQueryHandler(self._handle_add_user_step4, pattern='^wizard_back$'),
                    CallbackQueryHandler(self._cancel_admin, pattern='^cancel$')
                ],
                AdminStates.ADD_USER_STEP6_EMPLOYEE_ID: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_add_user_step6),
                    CallbackQueryHandler(self._handle_add_user_step5, pattern='^wizard_back$'),
                    CallbackQueryHandler(self._cancel_admin, pattern='^cancel$')
                ],
                AdminStates.ADD_USER_STEP7_EMAIL: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_add_user_step7),
                    CallbackQueryHandler(self._handle_add_user_step7, pattern='^wizard_next$'),
                    CallbackQueryHandler(self._handle_add_user_step6, pattern='^wizard_back$'),
                    CallbackQueryHandler(self._cancel_admin, pattern='^cancel$')
                ],
                AdminStates.ADD_USER_STEP8_PHONE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_add_user_step8),
                    CallbackQueryHandler(self._handle_add_user_step8, pattern='^wizard_next$'),
                    CallbackQueryHandler(self._handle_add_user_step7, pattern='^wizard_back$'),
                    CallbackQueryHandler(self._cancel_admin, pattern='^cancel$')
                ],
                AdminStates.ADD_USER_CONFIRM: [
                    CallbackQueryHandler(self._confirm_add_user, pattern='^confirm_'),
                    CallbackQueryHandler(self._handle_add_user_step8, pattern='^wizard_back$'),
                    CallbackQueryHandler(self._cancel_admin, pattern='^cancel$')
                ],
                # –°–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                AdminStates.DELETE_USER_SELECT: [
                    CallbackQueryHandler(self._handle_delete_user_select, pattern='^delete_user_|^cancel$')
                ],
                AdminStates.DELETE_USER_CONFIRM: [
                    CallbackQueryHandler(self._confirm_delete_user, pattern='^delete_confirm|^delete_cancel$')
                ],
                # –°–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤
                AdminStates.ADD_DEPT_STEP1_CODE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_add_department_step1),
                    CallbackQueryHandler(self._cancel_admin, pattern='^cancel$')
                ],
                AdminStates.ADD_DEPT_STEP2_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_add_department_step2),
                    CallbackQueryHandler(self._handle_add_department_step1, pattern='^wizard_back$'),
                    CallbackQueryHandler(self._cancel_admin, pattern='^cancel$')
                ],
                AdminStates.ADD_DEPT_STEP3_DESCRIPTION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_add_department_step3),
                    CallbackQueryHandler(self._handle_add_department_step3, pattern='^wizard_next$'),
                    CallbackQueryHandler(self._handle_add_department_step2, pattern='^wizard_back$'),
                    CallbackQueryHandler(self._cancel_admin, pattern='^cancel$')
                ],
                AdminStates.ADD_DEPT_STEP4_HEAD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_add_department_step4),
                    CallbackQueryHandler(self._handle_add_department_step4, pattern='^wizard_next$'),
                    CallbackQueryHandler(self._handle_add_department_step3, pattern='^wizard_back$'),
                    CallbackQueryHandler(self._cancel_admin, pattern='^cancel$')
                ],
                AdminStates.ADD_DEPT_CONFIRM: [
                    CallbackQueryHandler(self._confirm_add_department, pattern='^confirm_'),
                    CallbackQueryHandler(self._handle_add_department_step4, pattern='^wizard_back$'),
                    CallbackQueryHandler(self._cancel_admin, pattern='^cancel$')
                ],
                # –°–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–æ–≤
                AdminStates.DELETE_DEPT_SELECT: [
                    CallbackQueryHandler(self._handle_delete_department_select, pattern='^delete_dept_|^cancel$')
                ],
                AdminStates.DELETE_DEPT_CONFIRM: [
                    CallbackQueryHandler(self._confirm_delete_department, pattern='^delete_confirm|^delete_cancel$')
                ],
                # –°–æ—Å—Ç–æ—è–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
                AdminStates.ADMIN_RIGHTS: [
                    CallbackQueryHandler(self.handle_admin_rights_callback, pattern='^admin_list|^admin_grant|^admin_revoke$'),
                    CallbackQueryHandler(self.handle_admin_callback)
                ],
                AdminStates.GRANT_ADMIN_SELECT: [
                    CallbackQueryHandler(self._handle_grant_admin_select, pattern='^grant_admin_|^admin_rights_manage$')
                ],
                AdminStates.GRANT_ADMIN_CONFIRM: [
                    CallbackQueryHandler(self._confirm_grant_admin, pattern='^confirm_grant_admin|^admin_rights_manage$')
                ],
                AdminStates.REVOKE_ADMIN_SELECT: [
                    CallbackQueryHandler(self._handle_revoke_admin_select, pattern='^revoke_admin_|^admin_rights_manage$')
                ],
                AdminStates.REVOKE_ADMIN_CONFIRM: [
                    CallbackQueryHandler(self._confirm_revoke_admin, pattern='^confirm_revoke_admin|^admin_rights_manage$')
                ]
            },
            fallbacks=[
                CommandHandler('cancel', self._cancel_admin),
                CallbackQueryHandler(self._cancel_admin, pattern='^cancel$')
            ],
            name="admin_conversation",
            persistent=True
        )
    
    async def _cancel_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        if update.callback_query:
            await update.callback_query.edit_message_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")
        else:
            await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")
        
        return ConversationHandler.END