from datetime import datetime, timedelta
from typing import List, Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, 
    ConversationHandler, 
    CommandHandler, 
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from loguru import logger

from config import settings, MESSAGES
from services.report_processor import ReportProcessor
from utils.date_utils import get_current_week_range, get_week_range
from .states import AdminStates, get_admin_main_keyboard
from database import DatabaseManager

class AdminHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    
    def __init__(self, report_processor: ReportProcessor, db_manager: DatabaseManager):
        self.report_processor = report_processor
        self.db_manager = db_manager
    
    def _is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id in settings.get_admin_ids()
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        user = update.effective_user
        
        if not self._is_admin(user.id):
            if update.callback_query:
                await update.callback_query.edit_message_text(MESSAGES["unauthorized"])
            elif update.message:
                await update.message.reply_text(MESSAGES["unauthorized"])
            return ConversationHandler.END
        
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.id} –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        
        admin_text = (
            f"üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=admin_text,
                reply_markup=get_admin_main_keyboard(),
                parse_mode='HTML'
            )
        elif update.message:
            await update.message.reply_text(
                text=admin_text,
                reply_markup=get_admin_main_keyboard(),
                parse_mode='HTML'
            )
        
        return AdminStates.MAIN_MENU
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user = update.effective_user
        
        if not self._is_admin(user.id):
            await update.message.reply_text(MESSAGES["unauthorized"])
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        week_start, week_end = get_current_week_dates()
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤</b>

<b>–ù–µ–¥–µ–ª—è:</b> {week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m.%Y')}

üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: 0
‚Ä¢ –û—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: 0
‚Ä¢ –û—Ç—á–µ—Ç—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: 0
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 0%

‚è∞ <b>–ü–æ –≤—Ä–µ–º–µ–Ω–∏:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–≤—Ä–µ–º—è: 0
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º: 0

üèÜ <b>–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b>
(–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö)"""
        
        await update.message.reply_text(stats_text, parse_mode='HTML')
    
    async def handle_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        logger.info(f"Admin callback received: {query.data} from user {user_id}")
        
        if not self._is_admin(user_id):
            await query.edit_message_text(MESSAGES["unauthorized"])
            return ConversationHandler.END
        
        if query.data == "admin_view_reports":
            return await self._show_reports_menu(query)
        
        elif query.data == "admin_send_reminder":
            return await self._send_reminder_menu(query)
        
        elif query.data == "admin_manage_users":
            return await self._manage_users_menu(query)
        
        elif query.data == "admin_export_data":
            return await self._export_data_menu(query)
        
        elif query.data == "admin_close":
            await query.edit_message_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")
            return ConversationHandler.END
        
        elif query.data == "admin_back":
            await query.edit_message_text(
                f"üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_admin_main_keyboard(),
                parse_mode='HTML'
            )
            return AdminStates.MAIN_MENU
        
        return AdminStates.MAIN_MENU
    
    async def _show_reports_menu(self, query) -> int:
        """–ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="reports_current_week")],
            [InlineKeyboardButton("üìÖ –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è", callback_data="reports_last_week")],
            [InlineKeyboardButton("üìä –°–≤–æ–¥–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º", callback_data="reports_by_department")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É", callback_data="reports_search_user")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            "üìä <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —Ç–∏–ø –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.VIEW_REPORTS
    
    async def _send_reminder_menu(self, query) -> int:
        """–ú–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        keyboard = [
            [InlineKeyboardButton("üì¢ –í—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º", callback_data="reminder_all")],
            [InlineKeyboardButton("‚ö†Ô∏è –ù–µ —Å–¥–∞–≤—à–∏–º –æ—Ç—á–µ—Ç", callback_data="reminder_missing")],
            [InlineKeyboardButton("üè¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ—Ç–¥–µ–ª—É", callback_data="reminder_department")],
            [InlineKeyboardButton("üë§ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É", callback_data="reminder_user")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            "üì¢ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.SEND_REMINDER
    
    async def _manage_users_menu(self, query) -> int:
        """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list_all")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="users_add")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="users_edit")],
            [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="users_block")],
            [InlineKeyboardButton("üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞–º–∏", callback_data="departments_manage")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.MANAGE_USERS
    
    async def _export_data_menu(self, query) -> int:
        """–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        keyboard = [
            [InlineKeyboardButton("üìä Excel –æ—Ç—á–µ—Ç (—Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è)", callback_data="export_excel_current")],
            [InlineKeyboardButton("üìä Excel –æ—Ç—á–µ—Ç (–ø—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è)", callback_data="export_excel_last")],
            [InlineKeyboardButton("üìÑ CSV —Ñ–∞–π–ª (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ)", callback_data="export_csv_all")],
            [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç", callback_data="export_analytics")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        await query.edit_message_text(
            "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.EXPORT_DATA
    
    async def handle_reports_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data == "reports_current_week":
                week_start, week_end = get_current_week_range()
                reports_text = await self._get_week_reports_summary(week_start, week_end)
                
            elif query.data == "reports_last_week":
                from utils.date_utils import get_current_datetime
                from datetime import timedelta
                current_date = get_current_datetime() - timedelta(weeks=1)
                week_start, week_end = get_week_range(current_date)
                reports_text = await self._get_week_reports_summary(week_start, week_end)
                
            elif query.data == "reports_by_department":
                reports_text = await self._get_department_summary()
                
            else:
                # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ç—á–µ—Ç—ã
                reports = self.db_manager.get_all_reports()
                if not reports:
                    reports_text = "üìä –û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                else:
                    reports_text = "üìä –í—Å–µ –æ—Ç—á–µ—Ç—ã:\n\n"
                    for report in reports[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç—á–µ—Ç–æ–≤
                        date_str = report.submitted_at.strftime('%d.%m.%Y %H:%M') if report.submitted_at else '–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
                        late_mark = "‚ö†Ô∏è" if report.is_late else "‚úÖ"
                        reports_text += f"{late_mark} {report.full_name} ({date_str})\n"
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")
            reports_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Ç—á–µ—Ç–∞–º", callback_data="admin_view_reports")]]
        
        await query.edit_message_text(
            reports_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.VIEW_REPORTS
    
    async def handle_reminder_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data == "reminder_all":
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º
                employees = self.db_manager.get_all_employees()
                active_employees = [emp for emp in employees if emp.is_active]
                message = f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º ({len(active_employees)} —á–µ–ª–æ–≤–µ–∫)"
                
            elif query.data == "reminder_missing":
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–º, –∫—Ç–æ –Ω–µ —Å–¥–∞–ª –æ—Ç—á–µ—Ç
                missing = self.db_manager.get_employees_without_reports()
                message = f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –±–µ–∑ –æ—Ç—á–µ—Ç–æ–≤ ({len(missing)} —á–µ–ª–æ–≤–µ–∫)"
                
            else:
                message = "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º", callback_data="admin_send_reminder")]]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return AdminStates.SEND_REMINDER
    
    async def handle_users_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        query = update.callback_query
        await query.answer()
        
        logger.info(f"Users callback received: {query.data} from user {query.from_user.id}")
        
        if query.data == "users_list_all":
            message = await self._get_users_list()
            
        elif query.data == "users_add":
            message = "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            
        elif query.data == "users_edit":
            message = "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            
        elif query.data == "users_block":
            message = "üö´ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            
        elif query.data == "departments_manage":
            message = await self._get_departments_menu()
            
        else:
            message = "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users")]]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.MANAGE_USERS
    
    async def handle_export_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        query = update.callback_query
        await query.answer()
        
        logger.info(f"Export callback received: {query.data} from user {query.from_user.id}")
        
        try:
            if query.data == "export_excel_current":
                # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
                reports = self.db_manager.get_all_reports()
                message = f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –≥–æ—Ç–æ–≤\n\nüìÅ –§–∞–π–ª: reports_{datetime.now().strftime('%Y%m%d')}.xlsx\nüìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\nüìà –ó–∞–ø–∏—Å–µ–π: {len(reports)}"
                
            elif query.data == "export_excel_last":
                # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
                reports = self.db_manager.get_all_reports()
                message = f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –≥–æ—Ç–æ–≤\n\nüìÅ –§–∞–π–ª: reports_{datetime.now().strftime('%Y%m%d')}.xlsx\nüìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\nüìà –ó–∞–ø–∏—Å–µ–π: {len(reports)}"
                
            elif query.data == "export_csv_all":
                # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
                reports = self.db_manager.get_all_reports()
                message = f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –≥–æ—Ç–æ–≤\n\nüìÅ –§–∞–π–ª: reports_{datetime.now().strftime('%Y%m%d')}.csv\nüìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\nüìà –ó–∞–ø–∏—Å–µ–π: {len(reports)}"
                
            elif query.data == "export_analytics":
                # –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF
                reports = self.db_manager.get_all_reports()
                pages = (len(reports) // 10) + 1
                message = f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF –≥–æ—Ç–æ–≤\n\nüìÅ –§–∞–π–ª: reports_summary_{datetime.now().strftime('%Y%m%d')}.pdf\nüìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {pages}"
                
            else:
                message = "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export_data")]]
        
        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        return AdminStates.EXPORT_DATA
    
    async def _get_week_reports_summary(self, week_start: datetime, week_end: datetime) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
        return f"""üìä <b>–û—Ç—á–µ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é {week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m.%Y')}</b>

üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: 0
‚Ä¢ –û—Ç—á–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: 0
‚Ä¢ –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç—á–µ—Ç–æ–≤: 0

üìã <b>–°–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤:</b>
(–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö)

‚ö†Ô∏è <b>–ù–µ —Å–¥–∞–ª–∏ –æ—Ç—á–µ—Ç:</b>
(–°–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö)"""
    
    async def _get_department_summary(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º"""
        return """üè¢ <b>–°–≤–æ–¥–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º:</b>
(–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö)

‚Ä¢ IT –æ—Ç–¥–µ–ª: 0/0 (0%)
‚Ä¢ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è: 0/0 (0%)
‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: 0/0 (0%)
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: 0/0 (0%)"""
    
    async def _send_reminder_to_all(self) -> int:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        return 0
    
    async def _send_reminder_to_missing(self) -> int:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –æ—Ç—á–µ—Ç–∞"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –æ—Ç—á–µ—Ç–∞")
        return 0
    
    async def _get_users_list(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            employees = self.db_manager.get_all_employees()
            if not employees:
                return "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç"
            
            users_text = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for emp in employees:
                status = "üü¢" if emp.is_active else "üî¥"
                users_text += f"{status} {emp.full_name} (@{emp.username or '–Ω–µ—Ç'})\n"
                users_text += f"   üìß {emp.email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                users_text += f"   üè¢ {emp.department_name or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            
            return users_text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    async def _get_departments_menu(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            departments = self.db_manager.get_all_departments()
            if not departments:
                return "üè¢ –û—Ç–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            dept_text = "üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞–º–∏:\n\n"
            for dept in departments:
                employees_count = len(self.db_manager.get_employees_by_department(dept.id))
                status = "üü¢" if dept.is_active else "üî¥"
                dept_text += f"{status} {dept.name} ({employees_count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)\n"
                dept_text += f"   üë§ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {dept.head_name or '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}\n"
                if dept.description:
                    dept_text += f"   üìù {dept.description}\n"
                dept_text += "\n"
            
            return dept_text
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–æ–≤"
    
    def get_conversation_handler(self) -> ConversationHandler:
        """–°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        return ConversationHandler(
            entry_points=[CommandHandler('admin', self.admin_command)],
            states={
                AdminStates.MAIN_MENU: [
                    CallbackQueryHandler(self.handle_admin_callback)
                ],
                AdminStates.VIEW_REPORTS: [
                    CallbackQueryHandler(self.handle_reports_callback, pattern='^reports_'),
                    CallbackQueryHandler(self.handle_admin_callback)
                ],
                AdminStates.SEND_REMINDER: [
                    CallbackQueryHandler(self.handle_reminder_callback, pattern='^reminder_'),
                    CallbackQueryHandler(self.handle_admin_callback)
                ],
                AdminStates.MANAGE_USERS: [
                    CallbackQueryHandler(self.handle_admin_callback)
                ],
                AdminStates.EXPORT_DATA: [
                    CallbackQueryHandler(self.handle_admin_callback)
                ]
            },
            fallbacks=[
                CommandHandler('cancel', self._cancel_admin),
                CallbackQueryHandler(self._cancel_admin, pattern='^cancel$')
            ],
            name="admin_conversation",
            persistent=True
        )
    
    async def _cancel_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        if update.callback_query:
            await update.callback_query.edit_message_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")
        else:
            await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")
        
        return ConversationHandler.END