# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
"""

from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from loguru import logger

from config import settings, MESSAGES
from .states import MainMenuStates, get_main_menu_keyboard, get_back_to_main_keyboard, get_persistent_menu_keyboard
from utils.navigation import get_breadcrumb_path, update_context_path, go_back_path

class MenuHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    
    def __init__(self, report_handler, admin_handler):
        self.report_handler = report_handler
        self.admin_handler = admin_handler
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        user = update.effective_user
        is_admin = user.id in settings.get_admin_ids()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        context.user_data['path'] = ['main']
        breadcrumb = get_breadcrumb_path(context.user_data['path'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            
            welcome_text = (
                f"üìç {breadcrumb}\n\n"
                f"üè¢ <b>–°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—é–º–µ –∑–∞ –Ω–µ–¥–µ–ª—é</b>\n"
                f"<i>–ê–û –≠–ú–ó –§–ò–†–ú–ê –°–≠–õ–ú–ê</i>\n\n"
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{user.first_name}</b>!\n\n"
                f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            await query.edit_message_text(
                text=welcome_text,
                reply_markup=get_main_menu_keyboard(is_admin),
                parse_mode='HTML'
            )
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not update.message:
                logger.error("update.message is None in show_main_menu")
                return MainMenuStates.MAIN_MENU
                
            welcome_text = MESSAGES['menu_main']
            
            await update.message.reply_text(
                text=welcome_text,
                reply_markup=get_main_menu_keyboard(is_admin),
                parse_mode='HTML'
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.",
                reply_markup=get_persistent_menu_keyboard()
            )
        
        return MainMenuStates.MAIN_MENU
    
    async def handle_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        callback_data = query.data
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª: {callback_data}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥
        if callback_data.startswith('back_'):
            path = go_back_path(context)
            if not path or path[-1] == 'main':
                return await self.show_main_menu(update, context)
        
        if callback_data == "menu_status":
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞
            path = update_context_path(context, 'status')
            breadcrumb = get_breadcrumb_path(path)
            
            await query.edit_message_text(
                text=f"üìç {breadcrumb}\n\nüìä <b>–°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞</b>\n\n‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à —Å—Ç–∞—Ç—É—Å...",
                parse_mode='HTML'
            )
            # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            await self.report_handler.status_command(update, context)
            return MainMenuStates.MAIN_MENU
            
        elif callback_data == "menu_help":
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
            path = update_context_path(context, 'help')
            breadcrumb = get_breadcrumb_path(path)
            
            help_text = (
                f"üìç {breadcrumb}\n\n"
                f"‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ</b>\n\n"
                f"üìù <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç:</b>\n"
                f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç'\n"
                f"‚Ä¢ –û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –∑–∞ –Ω–µ–¥–µ–ª—é\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç\n\n"
                f"üìä <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:</b>\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞'\n"
                f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –æ—Ç—á–µ—Ç–æ–≤\n\n"
                f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"
                f"‚Ä¢ –û—Ç—á–µ—Ç—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –¥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞\n"
                f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ —Å—Ä–æ–∫–∞—Ö\n\n"
                f"‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b> –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            
            await query.edit_message_text(
                text=help_text,
                reply_markup=get_back_to_main_keyboard(),
                parse_mode='HTML'
            )
            return MainMenuStates.MAIN_MENU
            

        elif callback_data == "menu_report":
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ - –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ report_handler
            path = update_context_path(context, 'report')
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π conversation –∏ –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ report_handler
            return ConversationHandler.END
            
        elif callback_data == "menu_admin":
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            update_context_path(context, 'admin')
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            return MainMenuStates.MAIN_MENU
            
        elif callback_data == "back_to_main":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            return await self.show_main_menu(update, context)
        
        return MainMenuStates.MAIN_MENU
    
    async def handle_menu_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ú–µ–Ω—é' –∏–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        if update.message and update.message.text == "üè† –ú–µ–Ω—é":
            user = update.effective_user
            is_admin = user.id in settings.get_admin_ids()
            await update.message.reply_text(
                text=MESSAGES['menu_main'],
                reply_markup=get_main_menu_keyboard(is_admin),
                parse_mode='HTML'
            )
            return MainMenuStates.MAIN_MENU
        return MainMenuStates.MAIN_MENU
    
    async def cancel_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        if update.callback_query:
            query = update.callback_query
            await query.answer()
            await query.edit_message_text(
                text="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_back_to_main_keyboard()
            )
        else:
            if not update.message:
                logger.error("update.message is None in cancel_menu")
                return MainMenuStates.MAIN_MENU
                
            await update.message.reply_text(
                text="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_back_to_main_keyboard()
            )
        
        return MainMenuStates.MAIN_MENU