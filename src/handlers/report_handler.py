import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, 
    ConversationHandler, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    filters
)
from loguru import logger

from config import settings, MESSAGES
from services.report_processor import ReportProcessor
from services.ollama_service import OllamaService
from services.telegram_service import TelegramService
from services import TaskManager, TaskStatus
from models.report import WeeklyReport
from utils.date_utils import get_current_week_range, is_deadline_passed
from .states import ReportStates, get_report_confirmation_keyboard, get_cancel_keyboard
from database import DatabaseManager

class ReportHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self, report_processor: ReportProcessor, ollama_service: OllamaService, telegram_service: TelegramService, task_manager: TaskManager, db_manager: DatabaseManager):
        self.report_processor = report_processor
        self.ollama_service = ollama_service
        self.telegram_service = telegram_service
        self.task_manager = task_manager
        self.db_manager = db_manager
        self.user_reports: Dict[int, WeeklyReport] = {}
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from .states import get_main_menu_keyboard
        
        is_admin = user.id in settings.get_admin_ids()
        
        welcome_text = (
            f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            f"{MESSAGES['welcome']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await update.message.reply_text(
            text=welcome_text,
            reply_markup=get_main_menu_keyboard(is_admin),
            parse_mode='HTML'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
        user = update.effective_user
        is_admin = user.id in settings.get_admin_ids()
        
        help_text = MESSAGES["help"]
        if not is_admin:
            # –£–±–∏—Ä–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            lines = help_text.split('\n')
            help_text = '\n'.join([line for line in lines if not line.startswith('/admin') and not line.startswith('/stats')])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω –ª–∏ –∏–∑ callback query (–∏–∑ –º–µ–Ω—é)
        if update.callback_query:
            from .states import get_back_to_main_keyboard
            await update.callback_query.message.reply_text(
                help_text,
                reply_markup=get_back_to_main_keyboard(),
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                help_text,
                parse_mode='HTML'
            )
    
    async def report_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
        return await self.start_report_process(update, context)
    
    async def start_report_process(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ (–º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã)"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥–ª–∞–π–Ω
        if is_deadline_passed():
            message_text = (
                "‚è∞ –î–µ–¥–ª–∞–π–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ —É–∂–µ –ø—Ä–æ—à–µ–ª.\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞."
            )
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text=message_text,
                    reply_markup=get_cancel_keyboard()
                )
            else:
                await update.message.reply_text(
                    text=message_text,
                    reply_markup=get_cancel_keyboard()
                )
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞
        start_date, end_date = get_current_week_range()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç—á–µ—Ç –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥
        existing_report = self.report_processor.get_user_report_for_week(
            user.id, start_date
        )
        
        if existing_report:
            message_text = (
                f"üìã –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
            )
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text=message_text,
                    reply_markup=get_cancel_keyboard()
                )
            else:
                await update.message.reply_text(
                    text=message_text,
                    reply_markup=get_cancel_keyboard()
                )
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = WeeklyReport(
            user_id=user.id,
            username=user.username or "",
            full_name=user.full_name or f"{user.first_name} {user.last_name or ''}".strip(),
            week_start=start_date,
            week_end=end_date,
            completed_tasks="",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
            next_week_plans=""   # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
        )
        
        self.user_reports[user.id] = report
        
        from .states import get_departments_keyboard
        
        message_text = (
            f"üìã <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞</b>\n\n"
            f"–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:"
        )
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=message_text,
                reply_markup=get_departments_keyboard(),
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                text=message_text,
                reply_markup=get_departments_keyboard(),
                parse_mode='HTML'
            )
        
        return ReportStates.WAITING_DEPARTMENT
    
    async def receive_department(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ callback query"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        
        if user_id not in self.user_reports:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /report")
            return ConversationHandler.END
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ –∏–∑ callback_data
        if query.data.startswith("dept_"):
            department_name = query.data[5:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "dept_"
            self.user_reports[user_id].department = department_name
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –æ—Ç–¥–µ–ª: {department_name}")
            
            await query.edit_message_text(
                f"‚úÖ –û—Ç–¥–µ–ª: <b>{department_name}</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
                "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏.",
                reply_markup=get_cancel_keyboard(),
                parse_mode='HTML'
            )
            
            return ReportStates.WAITING_TASKS
        else:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞")
            return ConversationHandler.END
    
    async def receive_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        user_id = update.effective_user.id
        tasks_text = update.message.text
        
        if user_id not in self.user_reports:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /report")
            return ConversationHandler.END
        
        self.user_reports[user_id].completed_tasks = tasks_text
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –∑–∞–¥–∞—á–∏ –≤ –æ—Ç—á–µ—Ç")
        
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –∏ —É—Å–ø–µ—Ö–∞—Ö –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
            "(–ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –∏–ª–∏ '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')",
            reply_markup=get_cancel_keyboard()
        )
        
        return ReportStates.WAITING_ACHIEVEMENTS
    
    async def receive_achievements(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        achievements_text = update.message.text
        
        if user_id not in self.user_reports:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /report")
            return ConversationHandler.END
        
        self.user_reports[user_id].achievements = achievements_text
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç")
        
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å:\n\n"
            "(–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º –Ω–µ –±—ã–ª–æ, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –∏–ª–∏ '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')",
            reply_markup=get_cancel_keyboard()
        )
        
        return ReportStates.WAITING_PROBLEMS
    
    async def receive_problems(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º"""
        user_id = update.effective_user.id
        problems_text = update.message.text
        
        if user_id not in self.user_reports:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /report")
            return ConversationHandler.END
        
        self.user_reports[user_id].problems = problems_text
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ—Ç—á–µ—Ç")
        
        await update.message.reply_text(
            "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –ø–ª–∞–Ω–∞—Ö –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:",
            reply_markup=get_cancel_keyboard()
        )
        
        return ReportStates.WAITING_PLANS
    
    async def receive_plans(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤"""
        user_id = update.effective_user.id
        plans_text = update.message.text
        
        if user_id not in self.user_reports:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /report")
            return ConversationHandler.END
        
        self.user_reports[user_id].next_week_plans = plans_text
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –ø–ª–∞–Ω—ã –≤ –æ—Ç—á–µ—Ç")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞
        report = self.user_reports[user_id]
        preview = self._format_report_preview(report)
        
        await update.message.reply_text(
            f"üìã <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞:</b>\n\n{preview}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
            reply_markup=get_report_confirmation_keyboard(),
            parse_mode='HTML'
        )
        
        return ReportStates.WAITING_CONFIRMATION
    
    async def confirm_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if query.data == "confirm_report":
            if user_id not in self.user_reports:
                await query.edit_message_text("–û—à–∏–±–∫–∞: –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /report")
                return ConversationHandler.END
            
            report = self.user_reports[user_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_task = self.task_manager.get_user_task(user_id)
            if existing_task and existing_task.status in [TaskStatus.PENDING, TaskStatus.RUNNING]:
                await query.edit_message_text("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π—Å—è –æ—Ç—á–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
                return ConversationHandler.END
            
            # –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            async def progress_callback(task_info):
                try:
                    if task_info.status == TaskStatus.COMPLETED:
                        if task_info.result:
                            await query.edit_message_text(MESSAGES["report_created"])
                            logger.info(f"–û—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                        else:
                            await query.edit_message_text(MESSAGES["error_general"])
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    elif task_info.status == TaskStatus.FAILED:
                        await query.edit_message_text(MESSAGES["error_general"])
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {task_info.error}")
                    elif task_info.status == TaskStatus.CANCELLED:
                        await query.edit_message_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ progress_callback: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞
            task_id = self.task_manager.create_task(
                user_id=user_id,
                coro=self._process_report_async(report, user_id),
                progress_callback=progress_callback
            )
            
            await query.edit_message_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Ç—á–µ—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {task_id} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
            del self.user_reports[user_id]
                
        elif query.data == "edit_report":
            await query.edit_message_text(
                "–ö–∞–∫—É—é —á–∞—Å—Ç—å –æ—Ç—á–µ—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n\n"
                "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /report"
            )
            
        elif query.data == "cancel_report":
            if user_id in self.user_reports:
                del self.user_reports[user_id]
            await query.edit_message_text("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        
        return ConversationHandler.END
    
    async def cancel_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
        user_id = update.effective_user.id
        
        if user_id in self.user_reports:
            del self.user_reports[user_id]
        
        if update.callback_query:
            await update.callback_query.edit_message_text("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        else:
            await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    async def _process_report_async(self, report: WeeklyReport, user_id: int) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞"""
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ Ollama
            processed_report = await self.ollama_service.process_report(report)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
            success = await self.telegram_service.send_report_to_group(processed_report)
            
            if success:
                logger.info(f"–û—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            raise
    
    async def task_status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        task_info = self.task_manager.get_user_task(user_id)
        
        if not task_info:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return
        
        status_emoji = {
            TaskStatus.PENDING: "‚è≥",
            TaskStatus.RUNNING: "üîÑ", 
            TaskStatus.COMPLETED: "‚úÖ",
            TaskStatus.FAILED: "‚ùå",
            TaskStatus.CANCELLED: "üö´"
        }
        
        status_text = {
            TaskStatus.PENDING: "–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
            TaskStatus.RUNNING: "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
            TaskStatus.COMPLETED: "–ó–∞–≤–µ—Ä—à–µ–Ω–∞",
            TaskStatus.FAILED: "–û—à–∏–±–∫–∞",
            TaskStatus.CANCELLED: "–û—Ç–º–µ–Ω–µ–Ω–∞"
        }
        
        message = f"{status_emoji[task_info.status]} <b>–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:</b> {status_text[task_info.status]}\n\n"
        message += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {task_info.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        if task_info.started_at:
            message += f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞: {task_info.started_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        if task_info.completed_at:
            message += f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {task_info.completed_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        if task_info.progress_message:
            message += f"\nüìù {task_info.progress_message}"
        
        if task_info.error:
            message += f"\n‚ùå –û—à–∏–±–∫–∞: {task_info.error}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        keyboard = None
        if task_info.status in [TaskStatus.PENDING, TaskStatus.RUNNING]:
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"cancel_task_{task_info.task_id}")
            ]])
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=keyboard)
    
    async def cancel_task_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        task_id = query.data.replace("cancel_task_", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        task_info = self.task_manager.get_task_info(task_id)
        if not task_info or task_info.user_id != user_id:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
            return
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É
        if self.task_manager.cancel_task(task_id):
            await query.edit_message_text("üö´ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É.")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = update.effective_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
            from utils.date_utils import get_current_week_range
            week_start, _ = get_current_week_range()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
            report = self.report_processor.get_user_report_for_week(user_id, week_start)
            
            if report:
                status_text = (
                    f"üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –æ—Ç—á–µ—Ç–∞:</b>\n\n"
                    f"üìÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {report.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"‚úÖ –°—Ç–∞—Ç—É—Å: {report.status}\n\n"
                    f"üìù <b>–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n"
                    f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {len(report.completed_tasks)} –ø—É–Ω–∫—Ç–æ–≤\n"
                    f"‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {len(report.achievements)} –ø—É–Ω–∫—Ç–æ–≤\n"
                    f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã: {len(report.problems)} –ø—É–Ω–∫—Ç–æ–≤\n"
                    f"‚Ä¢ –ü–ª–∞–Ω—ã: {len(report.next_week_plans)} –ø—É–Ω–∫—Ç–æ–≤"
                )
            else:
                status_text = (
                    "üìä <b>–°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞:</b>\n\n"
                    "‚ùå –û—Ç—á–µ—Ç –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞."
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω –ª–∏ –∏–∑ callback query (–∏–∑ –º–µ–Ω—é)
            if update.callback_query:
                from .states import get_back_to_main_keyboard
                await update.callback_query.message.reply_text(
                    status_text,
                    reply_markup=get_back_to_main_keyboard(),
                    parse_mode='HTML'
                )
            else:
                if not update.message:
                    logger.error("update.message is None in status_command")
                    return
                    
                await update.message.reply_text(
                    status_text,
                    parse_mode='HTML'
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–∞: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–∞."
            
            if update.callback_query:
                from .states import get_back_to_main_keyboard
                await update.callback_query.message.reply_text(
                    error_text,
                    reply_markup=get_back_to_main_keyboard()
                )
            else:
                if not update.message:
                    logger.error("update.message is None in status_command error handler")
                    return
                    
                await update.message.reply_text(error_text)
    
    def _format_report_preview(self, report: WeeklyReport) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–∞"""
        return f"""<b>–û—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é {report.week_start.strftime('%d.%m')} - {report.week_end.strftime('%d.%m.%Y')}</b>

<b>üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {report.full_name}
<b>üìß Username:</b> @{report.username}

<b>‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>
{report.completed_tasks}

<b>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>
{report.achievements}

<b>‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:</b>
{report.problems}

<b>üìã –ü–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:</b>
{report.next_week_plans}"""
    
    def get_conversation_handler(self) -> ConversationHandler:
        """–°–æ–∑–¥–∞–Ω–∏–µ ConversationHandler –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
        return ConversationHandler(
            entry_points=[CommandHandler('report', self.report_command)],
            states={
                ReportStates.WAITING_TASKS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.receive_tasks)
                ],
                ReportStates.WAITING_ACHIEVEMENTS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.receive_achievements)
                ],
                ReportStates.WAITING_PROBLEMS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.receive_problems)
                ],
                ReportStates.WAITING_PLANS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.receive_plans)
                ],
                ReportStates.WAITING_CONFIRMATION: [
                    CallbackQueryHandler(self.confirm_report)
                ]
            },
            fallbacks=[
                CommandHandler('cancel', self.cancel_report),
                CallbackQueryHandler(self.cancel_report, pattern='^cancel$')
            ],
            name="report_conversation",
            persistent=True
        )