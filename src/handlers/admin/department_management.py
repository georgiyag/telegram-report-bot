# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞–º–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from loguru import logger

from handlers.states import AdminStates
from database import DatabaseManager

class DepartmentManagementHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª–∞–º–∏."""

    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager

    async def show_department_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Displays the list of departments with management buttons."""
        query = update.callback_query
        await query.answer()

        departments = await self.db_manager.get_departments()
        
        keyboard = []
        if departments:
            for dept in departments:
                keyboard.append([InlineKeyboardButton(f"{dept.name}", callback_data=f"admin_edit_dept_{dept.code}")])
        
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª", callback_data="admin_add_dept")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text="üóÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞–º–∏:",
            reply_markup=reply_markup
        )
        return AdminStates.MANAGE_DEPARTMENTS

    async def add_department_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Saves the department name and asks for the code."""
        department_name = update.message.text
        context.user_data['new_department_name'] = department_name
        await update.message.reply_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞: {department_name}.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –æ—Ç–¥–µ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'IT'):")
        return AdminStates.ADD_DEPARTMENT_CODE

    async def edit_department_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handles the request to edit a department's name."""
        query = update.callback_query
        await query.answer()
        dept_code = query.data.split('_')[-1]
        context.user_data['department_to_edit'] = dept_code
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞:")
        return AdminStates.EDIT_DEPARTMENT_NAME

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handles callbacks for department management."""
        query = update.callback_query
        await query.answer()
        data = query.data

        if data.startswith("admin_edit_dept_"):
            dept_code = data.split('_')[-1]
            try:
                department = await self.db_manager.get_department_by_code(dept_code)
                if department:
                    await query.edit_message_text(
                        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞</b>\n\n"
                        f"üè¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {department.name}\n"
                        f"üî§ <b>–ö–æ–¥:</b> {department.code}\n\n"
                        f"üîß –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.\n\n"
                        f"üí° –ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª", callback_data=f"admin_delete_dept_{dept_code}")],
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                        ]),
                        parse_mode='HTML'
                    )
                else:
                    await query.edit_message_text(
                        "‚ùå –û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                        ])
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–∞.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                    ])
                )
            return AdminStates.MANAGE_DEPARTMENTS
        elif data.startswith("admin_delete_dept_"):
            dept_code = data.split('_')[-1]
            try:
                department = await self.db_manager.get_department_by_code(dept_code)
                if department:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —ç—Ç–æ–º –æ—Ç–¥–µ–ª–µ
                    users_count = await self.db_manager.get_users_count_by_department(dept_code)
                    
                    if users_count > 0:
                        await query.edit_message_text(
                            f"‚ö†Ô∏è <b>–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª</b>\n\n"
                            f"üè¢ <b>–û—Ç–¥–µ–ª:</b> {department.name}\n"
                            f"üë• <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –æ—Ç–¥–µ–ª–µ:</b> {users_count}\n\n"
                            f"‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ—Ç–¥–µ–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏.\n"
                            f"–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –¥—Ä—É–≥–∏–µ –æ—Ç–¥–µ–ª—ã.",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                            ]),
                            parse_mode='HTML'
                        )
                    else:
                        await query.edit_message_text(
                            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞</b>\n\n"
                            f"üè¢ <b>–û—Ç–¥–µ–ª:</b> {department.name}\n"
                            f"üî§ <b>–ö–æ–¥:</b> {department.code}\n\n"
                            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–¥–µ–ª?\n"
                            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                            reply_markup=InlineKeyboardMarkup([
                                [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_dept_{dept_code}")],
                                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
                            ]),
                            parse_mode='HTML'
                        )
                else:
                    await query.edit_message_text(
                        "‚ùå –û—Ç–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                        ])
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–¥–µ–ª–∞.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                    ])
                )
            return AdminStates.MANAGE_DEPARTMENTS
        elif data.startswith("confirm_delete_dept_"):
            dept_code = data.split('_')[-1]
            try:
                success = await self.db_manager.delete_department(dept_code)
                if success:
                    await query.edit_message_text(
                        "‚úÖ <b>–û—Ç–¥–µ–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>\n\n"
                        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç–¥–µ–ª–æ–≤...",
                        parse_mode='HTML'
                    )
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç–¥–µ–ª–æ–≤
                    return await self.show_department_list(update, context)
                else:
                    await query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                        ])
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞: {e}")
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–∞.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                    ])
                )
            return AdminStates.MANAGE_DEPARTMENTS
        elif data == "admin_add_dept":
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç–¥–µ–ª–∞:")
            return AdminStates.ADD_DEPARTMENT_NAME
        elif data == "admin_back":
            return AdminStates.MAIN_MENU

        return AdminStates.MANAGE_DEPARTMENTS