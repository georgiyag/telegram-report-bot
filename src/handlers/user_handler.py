from telegram import Update
from telegram.ext import ContextTypes
from loguru import logger

import logging
from config import MESSAGES
from database import DatabaseManager, Employee
from utils.navigation import get_breadcrumb_path, create_keyboard


class UserHandler:
    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
        self.logger = logging.getLogger(__name__)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            employee = await self.db_manager.get_employee_by_user_id(user.id)
            if not employee:
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_employee = Employee(
                    user_id=user.id,
                    username=user.username,
                    full_name=f"{user.first_name} {user.last_name or ''}".strip(),
                    email=None,
                    department_code=None,
                    position=None,
                    is_active=True
                )
                await self.db_manager.add_employee(new_employee)
                self.logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        welcome_text = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{user.first_name}</b>!\n\n"
            f"üè¢ <b>–°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—é–º–µ –∑–∞ –Ω–µ–¥–µ–ª—é</b>\n"
            f"<i>–ê–û –≠–ú–ó –§–ò–†–ú–ê –°–≠–õ–ú–ê</i>\n\n"
            f"ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.\n\n"
            f"‚ú® <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
            f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤\n"
            f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–æ–≤\n"
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å—Ä–æ–∫–∞—Ö\n"
            f"‚ùì –ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            f"üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
        )
        
        await update.message.reply_text(welcome_text, parse_mode='HTML')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        from .states import MainMenuStates, get_main_menu_keyboard
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        from config import settings
        keyboard = get_main_menu_keyboard(user.id in settings.get_admin_ids())
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        return MainMenuStates.MAIN_MENU

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        breadcrumb = get_breadcrumb_path("help")
        
        help_text = (
            f"{breadcrumb}\n\n"
            f"üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
            f"üöÄ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            f"‚Ä¢ <code>/start</code> - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
            f"‚Ä¢ <code>/report</code> - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞\n"
            f"‚Ä¢ <code>/status</code> - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–æ–≤\n"
            f"‚Ä¢ <code>/menu</code> - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            f"üìù <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç:</b>\n"
            f"1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç'\n"
            f"2Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            f"3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –ø–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é\n"
            f"4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n\n"
            f"‚è∞ <b>–°—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏:</b>\n"
            f"–û—Ç—á–µ—Ç—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –¥–æ –ø—è—Ç–Ω–∏—Ü—ã 18:00\n\n"
            f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
            f"–ë–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞\n\n"
            f"‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ HR-–æ—Ç–¥–µ–ª—É"
        )
        
        keyboard = create_keyboard("help")
        await update.message.reply_text(help_text, parse_mode='HTML', reply_markup=keyboard)

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        user = update.effective_user
        breadcrumb = get_breadcrumb_path("status")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reports = await self.db_manager.get_user_reports(user.id)
            
            if not reports:
                status_text = (
                    f"{breadcrumb}\n\n"
                    f"üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –æ—Ç—á–µ—Ç–æ–≤</b>\n\n"
                    f"üìù <i>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤</i>\n\n"
                    f"üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>\n"
                    f"–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –æ—Ç—á–µ—Ç, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n"
                    f"üí° <b>–°–æ–≤–µ—Ç:</b> –†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø–æ–¥–∞—á–∞ –æ—Ç—á–µ—Ç–æ–≤\n"
                    f"–ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å"
                )
            else:
                # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                approved_count = len([r for r in reports if r.status == "approved"])
                pending_count = len([r for r in reports if r.status == "pending"])
                rejected_count = len([r for r in reports if r.status == "rejected"])
                
                status_text = (
                    f"{breadcrumb}\n\n"
                    f"üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –æ—Ç—á–µ—Ç–æ–≤</b>\n\n"
                    f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                    f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: <b>{approved_count}</b>\n"
                    f"‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: <b>{pending_count}</b>\n"
                    f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <b>{rejected_count}</b>\n"
                    f"üìù –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: <b>{len(reports)}</b>\n\n"
                    f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã:</b>\n"
                )
                
                for report in reports[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç—á–µ—Ç–æ–≤
                    status_emoji = "‚úÖ" if report.status == "approved" else "‚è≥" if report.status == "pending" else "‚ùå"
                    status_name = "–û–¥–æ–±—Ä–µ–Ω" if report.status == "approved" else "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏" if report.status == "pending" else "–û—Ç–∫–ª–æ–Ω–µ–Ω"
                    status_text += f"{status_emoji} <code>{report.week_start.strftime('%d.%m.%Y')}</code> - {status_name}\n"
                
                if len(reports) > 5:
                    status_text += f"\n<i>... –∏ –µ—â–µ {len(reports) - 5} –æ—Ç—á–µ—Ç–æ–≤</i>"
            
            keyboard = create_keyboard("status")
            await update.message.reply_text(status_text, parse_mode='HTML', reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")
            error_text = (
                f"{breadcrumb}\n\n"
                f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–æ–≤.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            keyboard = create_keyboard("status")
            await update.message.reply_text(error_text, parse_mode='HTML', reply_markup=keyboard)