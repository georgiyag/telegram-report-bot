#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
"""

import asyncio
import sys
from pathlib import Path
from unittest.mock import Mock, AsyncMock
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

from telegram import Bot, Update, Message, User, Chat, CallbackQuery
from telegram.ext import ContextTypes
from src.config import settings
from src.handlers.menu_handler import MenuHandler
from src.handlers.report_handler import ReportHandler
from src.handlers.admin_handler import AdminHandler
from src.services.telegram_service import TelegramService
from src.database import DatabaseManager
from src.services.ollama_service import OllamaService
from src.services.report_processor import ReportProcessor
from src.services.task_manager import TaskManager
from src.handlers.admin.user_management import UserManagementHandler
from src.handlers.admin.department_management import DepartmentManagementHandler

class BotFunctionTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = Bot(settings.telegram_bot_token)
        self.telegram_service = TelegramService(self.bot)
        self.db_manager = DatabaseManager()
        self.test_user_id = 167960842
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.menu_handler = None
        self.report_handler = None
        self.admin_handler = None
        
    async def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db_manager.initialize()
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            ollama_service = OllamaService()
            report_processor = ReportProcessor(
                ollama_service,
                self.telegram_service
            )
            task_manager = TaskManager()
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.menu_handler = MenuHandler(self.db_manager, self.telegram_service)
            self.report_handler = ReportHandler(
                report_processor,
                ollama_service,
                self.telegram_service,
                task_manager,
                self.db_manager
            )
            # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
            user_management_handler = UserManagementHandler(self.db_manager)
            department_management_handler = DepartmentManagementHandler(self.db_manager)
            
            self.admin_handler = AdminHandler(
                report_processor,
                self.db_manager,
                self.telegram_service,
                user_management_handler,
                department_management_handler
            )
            
            # –°–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.menu_handler.report_handler = self.report_handler
            
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            return False
    
    def create_mock_update(self, text: str = None, callback_data: str = None) -> Update:
        """–°–æ–∑–¥–∞–Ω–∏–µ mock Update –æ–±—ä–µ–∫—Ç–∞"""
        user = User(
            id=self.test_user_id,
            is_bot=False,
            first_name="Test",
            last_name="User",
            username="testuser"
        )
        
        chat = Chat(
            id=self.test_user_id,
            type="private"
        )
        
        update = Mock(spec=Update)
        
        if text:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = Mock(spec=Message)
            message.message_id = 1
            message.from_user = user
            message.chat = chat
            message.text = text
            message.date = datetime.now()
            
            update.message = message
            update.callback_query = None
        
        elif callback_data:
            # –°–æ–∑–¥–∞–µ–º callback query
            callback_query = Mock(spec=CallbackQuery)
            callback_query.id = "test_callback"
            callback_query.from_user = user
            callback_query.data = callback_data
            callback_query.answer = AsyncMock()
            callback_query.edit_message_text = AsyncMock()
            callback_query.edit_message_reply_markup = AsyncMock()
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è callback
            message = Mock(spec=Message)
            message.message_id = 1
            message.from_user = user
            message.chat = chat
            message.text = "Test message"
            message.date = datetime.now()
            
            callback_query.message = message
            
            update.callback_query = callback_query
            update.message = None
        
        update.effective_user = user
        update.effective_chat = chat
        
        return update
    
    def create_mock_context(self) -> ContextTypes.DEFAULT_TYPE:
        """–°–æ–∑–¥–∞–Ω–∏–µ mock Context –æ–±—ä–µ–∫—Ç–∞"""
        context = Mock(spec=ContextTypes.DEFAULT_TYPE)
        context.bot = self.bot
        context.user_data = {}
        context.chat_data = {}
        context.bot_data = {}
        return context
    
    async def test_menu_command(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é"""
        try:
            update = self.create_mock_update(text="/menu")
            context = self.create_mock_context()
            
            result = await self.menu_handler.show_main_menu(update, context)
            
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /menu –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /menu: {e}")
            return False
    
    async def test_menu_report_callback(self):
        """–¢–µ—Å—Ç callback menu_report"""
        try:
            update = self.create_mock_update(callback_data="menu_report")
            context = self.create_mock_context()
            
            result = await self.menu_handler.handle_menu_callback(update, context)
            
            print("‚úÖ Callback menu_report –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è callback menu_report: {e}")
            return False
    
    async def test_menu_admin_callback(self):
        """–¢–µ—Å—Ç callback menu_admin"""
        try:
            update = self.create_mock_update(callback_data="menu_admin")
            context = self.create_mock_context()
            
            result = await self.menu_handler.handle_menu_callback(update, context)
            
            print("‚úÖ Callback menu_admin –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è callback menu_admin: {e}")
            return False
    
    async def test_admin_panel(self):
        """–¢–µ—Å—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
        try:
            update = self.create_mock_update(text="/admin")
            context = self.create_mock_context()
            
            result = await self.admin_handler.admin_command(update, context)
            
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /admin –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /admin: {e}")
            return False
    
    async def test_report_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
        try:
            update = self.create_mock_update(text="/report")
            context = self.create_mock_context()
            
            result = await self.report_handler.report_command(update, context)
            
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /report –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /report: {e}")
            return False
    
    async def send_test_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            message = (
                "üß™ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞</b>\n\n"
                "–Ø —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏. "
                "–ü—Ä–æ–≤–µ–ª –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:\n\n"
                "‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥\n"
                "‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏\n"
                "‚úÖ –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏—è\n"
                "‚úÖ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n"
                "‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤\n\n"
                "üîß –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!\n\n"
                "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ."
            )
            
            success = await self.telegram_service.send_message_safe(
                self.test_user_id,
                message
            )
            
            if success:
                print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def run_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞...\n")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
        if not await self.setup_handlers():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏")
            return False
        
        tests = [
            ("–ö–æ–º–∞–Ω–¥–∞ /menu", self.test_menu_command),
            ("Callback menu_report", self.test_menu_report_callback),
            ("Callback menu_admin", self.test_menu_admin_callback),
            ("–ö–æ–º–∞–Ω–¥–∞ /admin", self.test_admin_panel),
            ("–ö–æ–º–∞–Ω–¥–∞ /report", self.test_report_creation),
        ]
        
        results = []
        for test_name, test_func in tests:
            print(f"üîÑ –¢–µ—Å—Ç: {test_name}")
            try:
                result = await test_func()
                results.append((test_name, result))
                print(f"{'‚úÖ' if result else '‚ùå'} {test_name}: {'–ü–†–û–ô–î–ï–ù' if result else '–ü–†–û–í–ê–õ–ï–ù'}\n")
            except Exception as e:
                print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}\n")
                results.append((test_name, False))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        await self.send_test_notification()
        
        # –ò—Ç–æ–≥–∏
        print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        passed = sum(1 for _, result in results if result)
        total = len(results)
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
        
        for test_name, result in results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"  {test_name}: {status}")
        
        return passed == total

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = BotFunctionTester()
    success = await tester.run_tests()
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    
    return success

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)