#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π Telegram –±–æ—Ç–∞
"""

import asyncio
import sys
import os
from datetime import datetime
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from config import settings
from database import DatabaseManager
from services.telegram_service import TelegramService
from telegram import Bot

class BotFunctionTester:
    """–¢–µ—Å—Ç–µ—Ä —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = Bot(token=settings.telegram_bot_token)
        self.telegram_service = TelegramService(self.bot)
        self.db_manager = DatabaseManager()
        self.test_user_id = 167960842  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        
    async def test_bot_info(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
        try:
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{bot_info.username} ({bot_info.first_name})")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
            return False
    
    async def test_database_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            departments = await self.db_manager.get_departments()
            logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –Ω–∞–π–¥–µ–Ω–æ {len(departments)} –æ—Ç–¥–µ–ª–æ–≤")
            
            employees = await self.db_manager.get_employees()
            logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –Ω–∞–π–¥–µ–Ω–æ {len(employees)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
            
            self.test_results["–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"] = "‚úÖ –ü–†–û–ô–î–ï–ù"
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
            self.test_results["–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"] = f"‚ùå –ù–ï –ü–†–û–ô–î–ï–ù - {str(e)}"
            return False
    
    async def test_send_message(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            test_message = f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞\n–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            success = await self.telegram_service.send_message_safe(
                chat_id=self.test_user_id,
                text=test_message
            )
            
            if success:
                logger.info("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def test_admin_permissions(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            admin_ids = settings.get_admin_ids()
            is_admin = self.test_user_id in admin_ids
            
            logger.info(f"‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {'–î–∞' if is_admin else '–ù–µ—Ç'}")
            logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_ids}")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
            return False
    
    async def test_config_settings(self):
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'–î–∞' if settings.telegram_bot_token else '–ù–µ—Ç'}")
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ID –≥—Ä—É–ø–ø—ã: {settings.group_chat_id}")
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings.timezone}")
            
            admin_ids = settings.get_admin_ids()
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {admin_ids}")
            
            timezone = settings.get_timezone()
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –û–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã: {timezone}")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    async def test_departments_and_employees(self):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–¥–µ–ª–∞–º–∏ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª—ã
            departments = await self.db_manager.get_departments()
            logger.info(f"‚úÖ –û—Ç–¥–µ–ª—ã ({len(departments)}):")
            for dept in departments[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                logger.info(f"   - {dept.name} (ID: {dept.id})")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            employees = await self.db_manager.get_employees()
            logger.info(f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ ({len(employees)}):")
            for emp in employees[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
                logger.info(f"   - {emp.full_name} ({emp.department_name})")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–¥–µ–ª–∞–º–∏/—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏: {e}")
            return False
    
    async def test_reports_functionality(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç—á–µ—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é
            from datetime import date
            week_reports = await self.db_manager.get_reports_by_week(
                date.today(), date.today()
            )
            logger.info(f"‚úÖ –û—Ç—á–µ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {len(week_reports)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏)
            employees = await self.db_manager.get_employees()
            if employees:
                user_reports = await self.db_manager.get_user_reports(employees[0].user_id, limit=5)
                logger.info(f"‚úÖ –û—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(user_reports)}")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏: {e}")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞")
        logger.info("=" * 50)
        
        tests = [
            ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", self.test_bot_info),
            ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", self.test_database_connection),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", self.test_config_settings),
            ("–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", self.test_admin_permissions),
            ("–û—Ç–¥–µ–ª—ã –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", self.test_departments_and_employees),
            ("–§—É–Ω–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤", self.test_reports_functionality),
            ("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", self.test_send_message),
        ]
        
        passed = 0
        failed = 0
        
        for test_name, test_func in tests:
            logger.info(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_name}")
            try:
                result = await test_func()
                if result:
                    passed += 1
                    logger.success(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                else:
                    failed += 1
                    logger.error(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
            except Exception as e:
                failed += 1
                logger.error(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
        
        logger.info("\n" + "=" * 50)
        logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed / (passed + failed) * 100):.1f}%")
        
        if failed == 0:
            logger.success("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {failed} –ø—Ä–æ–±–ª–µ–º")
        
        return passed, failed

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = BotFunctionTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())