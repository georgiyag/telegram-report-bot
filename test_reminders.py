#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from unittest.mock import AsyncMock, MagicMock
from telegram import Update, CallbackQuery, User, Message, Chat
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from handlers.admin_handler import AdminHandler
from database import DatabaseManager
from services.reminder_service import ReminderService
from services.telegram_service import TelegramService

class ReminderTest:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    
    def __init__(self):
        self.db_manager = None
        self.admin_handler = None
        self.reminder_service = None
        self.telegram_service = None
        
    async def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏
        self.db_manager = AsyncMock(spec=DatabaseManager)
        self.telegram_service = AsyncMock(spec=TelegramService)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
        self.db_manager.is_admin.return_value = True
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        report_processor = AsyncMock()
        user_management_handler = AsyncMock()
        department_management_handler = AsyncMock()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.admin_handler = AdminHandler(
            report_processor,
            self.db_manager, 
            self.telegram_service, 
            user_management_handler, 
            department_management_handler
        )
        self.reminder_service = ReminderService(self.db_manager, self.telegram_service)
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    def create_mock_update(self, callback_data: str, user_id: int = 123456789) -> Update:
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ Update –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user = User(id=user_id, first_name="Test", is_bot=False)
        chat = Chat(id=user_id, type="private")
        message = Message(
            message_id=1,
            date=datetime.now(),
            chat=chat,
            from_user=user
        )
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ callback_query
        callback_query = AsyncMock()
        callback_query.id = "test_callback"
        callback_query.from_user = user
        callback_query.chat_instance = "test_instance"
        callback_query.data = callback_data
        callback_query.message = message
        callback_query.answer = AsyncMock()
        callback_query.edit_message_text = AsyncMock()
        
        update = Update(update_id=1, callback_query=callback_query)
        return update
    
    def create_mock_context(self) -> ContextTypes.DEFAULT_TYPE:
        """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        context = MagicMock()
        context.user_data = {}
        context.chat_data = {}
        context.bot_data = {}
        return context
    
    async def test_reminder_callback_handler(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ update –∏ context
            update = self.create_mock_update("admin_reminders")
            context = self.create_mock_context()
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            result = await self.admin_handler.handle_reminder_callback(update, context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert result is not None, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –±—ã–ª –æ—Ç–≤–µ—á–µ–Ω
            update.callback_query.answer.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
            update.callback_query.edit_message_text.assert_called_once()
            
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback: {e}")
            return False
    
    async def test_reminder_settings_button(self):
        """–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ update –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            update = self.create_mock_update("reminder_settings")
            context = self.create_mock_context()
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
            result = await self.admin_handler.handle_reminder_action(update, context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert result is not None, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –±—ã–ª –æ—Ç–≤–µ—á–µ–Ω
            update.callback_query.answer.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
            update.callback_query.edit_message_text.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            call_args = update.callback_query.edit_message_text.call_args
            message_text = call_args[0][0] if call_args[0] else ""
            
            assert "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π" in message_text, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'"
            
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    async def test_reminder_send_all_button(self):
        """–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ–º"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º'...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ update –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º
            update = self.create_mock_update("reminder_send_all")
            context = self.create_mock_context()
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            result = await self.admin_handler.handle_reminder_action(update, context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert result is not None, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –±—ã–ª –æ—Ç–≤–µ—á–µ–Ω
            update.callback_query.answer.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
            update.callback_query.edit_message_text.assert_called_once()
            
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å–µ–º' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º: {e}")
            return False
    
    async def test_reminder_send_missing_button(self):
        """–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —Å–¥–∞–≤—à–∏–º"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–ø–æ–º–Ω–∏—Ç—å –Ω–µ —Å–¥–∞–≤—à–∏–º'...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ update –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —Å–¥–∞–≤—à–∏–º
            update = self.create_mock_update("reminder_send_missing")
            context = self.create_mock_context()
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            result = await self.admin_handler.handle_reminder_action(update, context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert result is not None, "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –±—ã–ª –æ—Ç–≤–µ—á–µ–Ω
            update.callback_query.answer.assert_called_once()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
            update.callback_query.edit_message_text.assert_called_once()
            
            print("‚úÖ –ö–Ω–æ–ø–∫–∞ '–ù–∞–ø–æ–º–Ω–∏—Ç—å –Ω–µ —Å–¥–∞–≤—à–∏–º' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —Å–¥–∞–≤—à–∏–º: {e}")
            return False
    
    async def test_reminder_service_basic(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            assert self.reminder_service is not None, "–°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            assert not self.reminder_service.is_running, "–°–µ—Ä–≤–∏—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ"
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
            await self.reminder_service.start()
            assert self.reminder_service.is_running, "–°–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ start()"
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–µ—Ä–≤–∏—Å–∞
            await self.reminder_service.stop()
            assert not self.reminder_service.is_running, "–°–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ stop()"
            
            print("‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        print("=" * 60)
        
        await self.setup()
        
        tests = [
            self.test_reminder_callback_handler,
            self.test_reminder_settings_button,
            self.test_reminder_send_all_button,
            self.test_reminder_send_missing_button,
            self.test_reminder_service_basic
        ]
        
        passed = 0
        total = len(tests)
        
        for test in tests:
            try:
                result = await test()
                if result:
                    passed += 1
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
        
        print("\n" + "=" * 60)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        return passed == total

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ReminderTest()
    success = await tester.run_all_tests()
    
    if success:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)