#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–õ–æ–∫–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
"""

import asyncio
import json
import logging
import sqlite3
import sys
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('local_bot_demo.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class LocalBotDemo:
    """–õ–æ–∫–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db_path = Path("data/bot_database.db")
        self.db_path.parent.mkdir(exist_ok=True)
        self.init_database()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.test_users = {
            "user1": {"name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "department": "IT –æ—Ç–¥–µ–ª", "role": "user"},
            "admin1": {"name": "–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞", "department": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", "role": "admin"}
        }
        
        self.scenarios_completed = []
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        telegram_id TEXT UNIQUE NOT NULL,
                        username TEXT,
                        first_name TEXT,
                        department TEXT,
                        role TEXT DEFAULT 'user',
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—á–µ—Ç–æ–≤
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS reports (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        department TEXT,
                        content TEXT,
                        week_start DATE,
                        week_end DATE,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        status TEXT DEFAULT 'completed',
                        ai_analysis TEXT,
                        FOREIGN KEY (user_id) REFERENCES users (id)
                    )
                """)
                
                conn.commit()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def print_header(self, title: str):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        print("\n" + "="*70)
        print(f"üé≠ {title}")
        print("="*70)
    
    def print_user_action(self, user: str, action: str):
        """–ü–µ—á–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"\n[{timestamp}] üë§ {user}: {action}")
        time.sleep(1)
    
    def print_bot_response(self, response: str):
        """–ü–µ—á–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] ü§ñ –ë–æ—Ç: {response}")
        time.sleep(2)
    
    def print_system_info(self, info: str):
        """–ü–µ—á–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] ‚öôÔ∏è  –°–∏—Å—Ç–µ–º–∞: {info}")
    
    async def check_services(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.print_header("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM users")
                user_count = cursor.fetchone()[0]
                self.print_system_info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count})")
        except Exception as e:
            self.print_system_info(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Ollama
        self.print_system_info("‚ö†Ô∏è  Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram API
        self.print_system_info("‚úÖ Telegram API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        return True
    
    async def scenario_new_user_registration(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.print_header("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ")
        
        user = self.test_users["user1"]
        
        self.print_user_action(user["name"], "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É /start")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute(
                    "SELECT * FROM users WHERE telegram_id = ?",
                    ("user1",)
                )
                existing_user = cursor.fetchone()
                
                if not existing_user:
                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    cursor.execute(
                        "INSERT INTO users (telegram_id, username, first_name, department, role, created_at) VALUES (?, ?, ?, ?, ?, ?)",
                        ("user1", user["name"], user["name"], user["department"], user["role"], datetime.now())
                    )
                    conn.commit()
                    
                    self.print_bot_response(
                        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –ê–û –≠–ú–ó '–§–ò–†–ú–ê –°–≠–õ–ú–ê', {user['name']}!\n\n"
                        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã.\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:\n"
                        "üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç\n"
                        "üìä –ú–æ–∏ –æ—Ç—á–µ—Ç—ã\n"
                        "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                        "‚ùì –ü–æ–º–æ—â—å"
                    )
                else:
                    self.print_bot_response(
                        f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user['name']}!\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
                    )
            
        except Exception as e:
            self.print_system_info(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        
        self.scenarios_completed.append("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    async def scenario_create_report(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.print_header("–°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        
        user = self.test_users["user1"]
        
        self.print_user_action(user["name"], "–ù–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É 'üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç'")
        
        self.print_bot_response(
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª:\n\n"
            "üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–¥–µ–ª—ã:\n"
            "‚Ä¢ –û–¢–ö\n‚Ä¢ –û–ö\n‚Ä¢ –û–ì–ö\n‚Ä¢ –û–ì–¢\n‚Ä¢ –û–ú–¢–°\n‚Ä¢ –ü–≠–û\n‚Ä¢ –†–°–£\n‚Ä¢ –≠–ú–û\n‚Ä¢ IT –æ—Ç–¥–µ–ª\n‚Ä¢ –ò–õ\n‚Ä¢ –ë–ò–ö"
        )
        
        self.print_user_action(user["name"], "–í—ã–±–∏—Ä–∞–µ—Ç –æ—Ç–¥–µ–ª 'IT –æ—Ç–¥–µ–ª'")
        
        self.print_bot_response(
            "‚úÖ –û—Ç–¥–µ–ª –≤—ã–±—Ä–∞–Ω: IT –æ—Ç–¥–µ–ª\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ—Ç—á–µ—Ç–∞:\n"
            "üí° –û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø–ª–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"
        )
        
        report_text = (
            "–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –º–æ–¥—É–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. "
            "–ò—Å–ø—Ä–∞–≤–∏–ª–∏ 15 –±–∞–≥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏. "
            "–ù–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –Ω–æ–≤—ã–º API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏. "
            "–ü—Ä–æ–≤–µ–ª–∏ –∫–æ–¥-—Ä–µ–≤—å—é 8 pull request'–æ–≤. "
            "–û–±–Ω–æ–≤–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã."
        )
        
        self.print_user_action(user["name"], f"–í–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç: '{report_text}'")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞
        self.print_system_info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò...")
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute("SELECT id FROM users WHERE telegram_id = ?", ("user1",))
                user_result = cursor.fetchone()
                
                if user_result:
                    user_id = user_result[0]
                    
                    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
                    cursor.execute(
                        "INSERT INTO reports (user_id, department, content, week_start, week_end, created_at, status) VALUES (?, ?, ?, ?, ?, ?, ?)",
                        (
                            user_id,
                            "IT –æ—Ç–¥–µ–ª",
                            report_text,
                            datetime.now().date(),
                            (datetime.now() + timedelta(days=6)).date(),
                            datetime.now(),
                            "completed"
                        )
                    )
                    
                    report_id = cursor.lastrowid
                    conn.commit()
                    
                    # –ò–º–∏—Ç–∞—Ü–∏—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
                    await asyncio.sleep(2)
                    
                    # –ê–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
                    tasks_count = report_text.count('.') - 1
                    bugs_fixed = 15 if "15 –±–∞–≥–æ–≤" in report_text else 0
                    new_projects = 1 if "–Ω–æ–≤—ã–π" in report_text else 0
                    
                    analysis = {
                        "tasks_completed": tasks_count,
                        "bugs_fixed": bugs_fixed,
                        "new_projects": new_projects,
                        "overall_rating": "–û—Ç–ª–∏—á–Ω–æ" if tasks_count >= 4 else "–•–æ—Ä–æ—à–æ"
                    }
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                    cursor.execute(
                        "UPDATE reports SET ai_analysis = ? WHERE id = ?",
                        (json.dumps(analysis, ensure_ascii=False), report_id)
                    )
                    conn.commit()
                    
                    self.print_bot_response(
                        "‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                        "üìà –ê–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–∞:\n"
                        f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: {analysis['tasks_completed']}\n"
                        f"‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –±–∞–≥–æ–≤: {analysis['bugs_fixed']}\n"
                        f"‚Ä¢ –ù–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: {analysis['new_projects']}\n"
                        f"‚Ä¢ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {analysis['overall_rating']}\n\n"
                        "üìä –û—Ç—á–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–¥–µ–ª–∞"
                    )
            
        except Exception as e:
            self.print_system_info(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            self.print_bot_response(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á–µ—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        self.scenarios_completed.append("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞")
    
    async def scenario_admin_panel(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –†–∞–±–æ—Ç–∞ —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é"""
        self.print_header("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        admin = self.test_users["admin1"]
        
        self.print_user_action(admin["name"], "–ù–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É 'üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'")
        
        self.print_bot_response(
            "üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
            "üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞–º–∏\n"
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
            "üìà –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
        )
        
        self.print_user_action(admin["name"], "–í—ã–±–∏—Ä–∞–µ—Ç 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã'")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor.execute("SELECT COUNT(*) FROM users")
                total_users = cursor.fetchone()[0]
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
                cursor.execute("SELECT COUNT(*) FROM reports WHERE created_at >= date('now', '-7 days')")
                weekly_reports = cursor.fetchone()[0]
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º
                cursor.execute("SELECT department, COUNT(*) FROM users GROUP BY department")
                departments_stats = cursor.fetchall()
                
                # –ü—Ä–æ—Ü–µ–Ω—Ç —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–æ–≤
                completion_rate = (weekly_reports / max(total_users, 1)) * 100
                
                self.print_bot_response(
                    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
                    f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                    f"üìã –û—Ç—á–µ—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {weekly_reports}\n"
                    f"üè¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤: {len(departments_stats)}\n"
                    f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–æ–≤: {completion_rate:.1f}%\n\n"
                    "üî• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º:\n" +
                    "\n".join([f"‚Ä¢ {dept}: {count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" for dept, count in departments_stats[:5]])
                )
                
        except Exception as e:
            self.print_system_info(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            self.print_bot_response(
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
                "üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 47\n"
                "üìã –û—Ç—á–µ—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: 42\n"
                "üè¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤: 11\n"
                "üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–¥–∞—á–∏ –æ—Ç—á–µ—Ç–æ–≤: 89.4%\n\n"
                "üî• –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–¥–µ–ª—ã:\n"
                "1. IT –æ—Ç–¥–µ–ª - 100%\n"
                "2. –û–¢–ö - 95%\n"
                "3. –ü–≠–û - 90%"
            )
        
        self.print_user_action(admin["name"], "–í—ã–±–∏—Ä–∞–µ—Ç 'üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö' ‚Üí 'Excel'")
        
        self.print_system_info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...")
        await asyncio.sleep(2)
        
        self.print_bot_response(
            "üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel\n\n"
            "‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...\n"
            "üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: 47\n"
            "‚úÖ –§–∞–π–ª –≥–æ—Ç–æ–≤: reports_2025_01_29.xlsx\n\n"
            "üìé –§–∞–π–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç!"
        )
        
        self.scenarios_completed.append("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    
    async def scenario_reminders(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        self.print_header("–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
        user = self.test_users["user1"]
        
        self.print_user_action(user["name"], "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
        self.print_bot_response(
            "üîî –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
            "üìÖ –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü—è—Ç–Ω–∏—Ü–∞, 16:00\n"
            "üìù –¢–µ–º–∞: –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç\n\n"
            "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞\n"
            "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–µ\n\n"
            "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"
        )
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await asyncio.sleep(3)
        
        self.print_system_info("–°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
        
        self.print_bot_response(
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
            "‚è∞ –î–æ –¥–µ–¥–ª–∞–π–Ω–∞ –ø–æ–¥–∞—á–∏ –æ—Ç—á–µ—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å 2 —á–∞—Å–∞\n"
            "üìÖ –î–µ–¥–ª–∞–π–Ω: –°–µ–≥–æ–¥–Ω—è, 18:00\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.\n\n"
            "üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç —Å–µ–π—á–∞—Å\n"
            "‚è∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç\n"
            "‚úÖ –û—Ç—á–µ—Ç —É–∂–µ –≥–æ—Ç–æ–≤"
        )
        
        self.scenarios_completed.append("–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    async def scenario_analytics(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã"""
        self.print_header("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã")
        
        admin = self.test_users["admin1"]
        
        self.print_user_action(admin["name"], "–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü")
        
        self.print_bot_response(
            "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü\n\n"
            "üìà –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n"
            "‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–¥–∞—á–∏: 87.2%\n"
            "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü: +5.3%\n"
            "‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: 2.4 —á–∞—Å–∞\n"
            "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤: 8.7/10\n\n"
            "üèÜ –¢–æ–ø –æ—Ç–¥–µ–ª–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n"
            "1. IT –æ—Ç–¥–µ–ª - 98.5%\n"
            "2. –û–¢–ö - 95.2%\n"
            "3. –ü–≠–û - 92.8%\n\n"
            "üìä –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:\n"
            "–ü–Ω: ‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë 40%\n"
            "–í—Ç: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë 60%\n"
            "–°—Ä: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë 80%\n"
            "–ß—Ç: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%\n"
            "–ü—Ç: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë 85%"
        )
        
        self.print_user_action(admin["name"], "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        self.print_bot_response(
            "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:\n\n"
            "1. üéØ –£–≤–µ–ª–∏—á–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n"
            "2. üìö –ü—Ä–æ–≤–µ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤ —Å –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é\n"
            "3. üèÜ –í–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–æ–æ—â—Ä–µ–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
            "4. ‚è∞ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: 14:00-16:00\n"
            "5. üì± –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞"
        )
        
        self.scenarios_completed.append("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    async def run_full_demonstration(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("\nüé≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–û–ô –†–ê–ë–û–¢–´ TELEGRAM –ë–û–¢–ê")
        print("ü§ñ –°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –ê–û –≠–ú–ó '–§–ò–†–ú–ê –°–≠–õ–ú–ê'")
        print("\n" + "="*80)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        if not await self.check_services():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
        
        print("\nüìã –°—Ü–µ–Ω–∞—Ä–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
        scenarios = [
            "1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "2. –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞",
            "3. –†–∞–±–æ—Ç–∞ —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é",
            "4. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            "5. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã"
        ]
        
        for scenario in scenarios:
            print(f"   {scenario}")
        
        input("\n‚ñ∂Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        # –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        demo_scenarios = [
            self.scenario_new_user_registration,
            self.scenario_create_report,
            self.scenario_admin_panel,
            self.scenario_reminders,
            self.scenario_analytics
        ]
        
        for i, scenario_func in enumerate(demo_scenarios, 1):
            print(f"\n\nüé¨ –°—Ü–µ–Ω–∞—Ä–∏–π {i}/{len(demo_scenarios)}")
            await scenario_func()
            
            if i < len(demo_scenarios):
                input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_final_summary()
    
    def print_final_summary(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ"""
        self.print_header("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        
        print("\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        for i, scenario in enumerate(self.scenarios_completed, 1):
            print(f"   {i}. {scenario}")
        
        print("\nüöÄ –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:")
        print("   ‚Ä¢ üë§ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("   ‚Ä¢ üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º")
        print("   ‚Ä¢ üëë –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        print("   ‚Ä¢ üîî –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        print("   ‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("   ‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö")
        print("   ‚Ä¢ üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        
        print("\nüíæ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
        print("   ‚Ä¢ üóÑÔ∏è  SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        print("   ‚Ä¢ ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Ollama –¥–ª—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞")
        print("   ‚Ä¢ üì± Telegram Bot API")
        print("   ‚Ä¢ üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        print("   ‚Ä¢ üìà –°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        
        print("\nüéØ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\n" + "="*80)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = f"local_demo_report_{timestamp}.txt"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("–û—Ç—á–µ—Ç –æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write("–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:\n")
            for i, scenario in enumerate(self.scenarios_completed, 1):
                f.write(f"{i}. {scenario}\n")
            f.write("\n–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n")
        
        print(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    demo = LocalBotDemo()
    await demo.run_full_demonstration()

if __name__ == "__main__":
    asyncio.run(main())  